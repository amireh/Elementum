sampler s0 : register(s0);

//static const float3 LUMINANCE_VECTOR  = float3(0.2125f, 0.7154f, 0.0721f);

struct PS_IN
{
	float2 TexC : TEXCOORD0;
};

float4 PS(PS_IN i) : COLOR
{
    float3 vSample = 0.0f;
    float  fLogLumSum = 0.0f;

    // Compute the sum of log(luminance) throughout the sample points
    fLogLumSum += log(dot(tex2D(s0, i.TexC + float2(-1.f/(3.f * 64),-1.f/(3.f * 64))), float3(0.3f, 0.58f, 0.12f))+0.0001f);
    fLogLumSum += log(dot(tex2D(s0, i.TexC + float2( 0.f/(3.f * 64),-1.f/(3.f * 64))), float3(0.3f, 0.58f, 0.12f))+0.0001f);
    fLogLumSum += log(dot(tex2D(s0, i.TexC + float2(+1.f/(3.f * 64),-1.f/(3.f * 64))), float3(0.3f, 0.58f, 0.12f))+0.0001f);

    fLogLumSum += log(dot(tex2D(s0, i.TexC + float2(-1.f/(3.f * 64), 0.f/(3.f * 64))), float3(0.3f, 0.58f, 0.12f))+0.0001f);
    fLogLumSum += log(dot(tex2D(s0, i.TexC + float2( 0.f/(3.f * 64), 0.f/(3.f * 64))), float3(0.3f, 0.58f, 0.12f))+0.0001f);
    fLogLumSum += log(dot(tex2D(s0, i.TexC + float2(+1.f/(3.f * 64), 0.f/(3.f * 64))), float3(0.3f, 0.58f, 0.12f))+0.0001f);

    fLogLumSum += log(dot(tex2D(s0, i.TexC + float2(-1.f/(3.f * 64),+1.f/(3.f * 64))), float3(0.3f, 0.58f, 0.12f))+0.0001f);
    fLogLumSum += log(dot(tex2D(s0, i.TexC + float2( 0.f/(3.f * 64),+1.f/(3.f * 64))), float3(0.3f, 0.58f, 0.12f))+0.0001f);
    fLogLumSum += log(dot(tex2D(s0, i.TexC + float2(+1.f/(3.f * 64),+1.f/(3.f * 64))), float3(0.3f, 0.58f, 0.12f))+0.0001f);
    
    // Divide the sum to complete the average
    return fLogLumSum / 9.f;
}