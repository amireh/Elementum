/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGLUA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

typedef struct {
  const char     *name;
  lua_CFunction   method;
} swig_lua_method;

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;

typedef struct swig_lua_class {
  const char    *name;
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrappering all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { lua_pushstring(L, (char *) msg); goto fail; } else

/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {lua_pushfstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {lua_pushfstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
//#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a)))
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State* L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State* L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default value is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State* L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  lua_pushstring(L,"This variable is immutable");
  lua_error(L);
#endif
    return 0;   /* should not return anything */
}

/* the module.get method used for getting linked data */
SWIGINTERN int SWIG_Lua_module_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  printf("SWIG_Lua_module_get %p(%s) '%s'\n",
   lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
   lua_tostring(L,2));
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get");  /* get the .get table */
  lua_remove(L,3);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .get table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,3);  /* remove .get */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_call(L,0,1);
      return 1;
    }
    lua_pop(L,1);  /* remove the top */
  }
  lua_pop(L,1);  /* remove the .get */
  lua_pushnil(L);  /* return a nil */
    return 1;
}

/* the module.set method used for setting linked data */
SWIGINTERN int SWIG_Lua_module_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".set");  /* get the .set table */
  lua_remove(L,4);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,4);  /* remove .set */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
  }
  lua_settop(L,3);  /* reset back to start */
  /* we now have the table, key & new value, so just set directly */
  lua_rawset(L,1);  /* add direct */
  return 0;
}

/* registering a module in lua */
SWIGINTERN void  SWIG_Lua_module_begin(lua_State* L,const char* name)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushstring(L,name);
  lua_newtable(L);   /* the table */
  /* add meta table */
  lua_newtable(L);    /* the meta table */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_module_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_module_set);
  lua_pushstring(L,".get");
  lua_newtable(L);    /* the .get table */
  lua_rawset(L,-3);  /* add .get into metatable */
  lua_pushstring(L,".set");
  lua_newtable(L);    /* the .set table */
  lua_rawset(L,-3);  /* add .set into metatable */
  lua_setmetatable(L,-2);  /* sets meta table in module */
  lua_rawset(L,-3);        /* add module into parent */
  SWIG_Lua_get_table(L,name);   /* get the table back out */
}

/* ending the register */
SWIGINTERN void  SWIG_Lua_module_end(lua_State* L)
{
  lua_pop(L,1);       /* tidy stack (remove module) */
}

/* adding a linked variable to the module */
SWIGINTERN void SWIG_Lua_module_add_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_getmetatable(L,-1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* should be a table: */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)  /* if there is a set fn */
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* should be a table: */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
  lua_pop(L,1);       /* tidy stack (remove meta) */
}

/* adding a function module */
SWIGINTERN void  SWIG_Lua_module_add_function(lua_State* L,const char* name,lua_CFunction fn)
{
  SWIG_Lua_add_function(L,name,fn);
}

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

/* the class.get method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;  /* sorry not known */
}

/* the class.set method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
printf("SWIG_Lua_class_set %p(%s) '%s' %p(%s)\n",
      lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
      lua_tostring(L,2),
      lua_topointer(L,3),lua_typename(L,lua_type(L,3)));*/

  assert(lua_isuserdata(L,1));  /* just in case */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,1);  /* userdata */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,2,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_pushvalue(L,3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  swig_lua_class* clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* gets the swig class registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State* L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    lua_pushstring(L,"SWIG");
    lua_newtable(L);
    lua_rawset(L,LUA_REGISTRYINDEX);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

/* helper fn to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State* L,const char* cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_details(lua_State* L,swig_lua_class* clss)
{
  int i;
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_details(L,clss->bases[i]);
  }
  /* add fns */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /*   add operator overloads
    these look ANY method which start with "__" and assume they
    are operator overloads & add them to the metatable
    (this might mess up is someone defines a method __gc (the destructor)*/
  for(i=0;clss->methods[i].name;i++){
    if (clss->methods[i].name[0]=='_' && clss->methods[i].name[1]=='_'){
      SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
    }
  }
}

/* set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State* L,swig_lua_class* clss)
{
  int i=0;
  swig_module_info* module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }	
}

/* performs the entire class registration process */
SWIGINTERN void  SWIG_Lua_class_register(lua_State* L,swig_lua_class* clss)
{
  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
    SWIG_Lua_add_function(L,clss->name,clss->constructor);

  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->name);  /* get the name */
  lua_newtable(L);    /* create the metatable */
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->name);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */

  SWIG_Lua_get_class_metatable(L,clss->name);
  SWIG_Lua_add_class_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
}

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void _SWIG_Lua_AddMetatable(lua_State* L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->name);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State* L,void* ptr,swig_type_info *type, int own)
{
  swig_lua_userdata* usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State* L,int index,void** ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata* usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State* L,int index,swig_type_info *type,int flags,
       int argnum,const char* func_name){
  void* result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    lua_pushfstring(L,"Error in %s, expected a %s at argument number %d\n",
      func_name,(type && type->str)?type->str:"void*",argnum);
    lua_error(L);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State* L,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State* L,int index,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata* usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State* L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_equal(lua_State* L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua a really simple way of calling lua from C
Unfortunately lua keeps changing its API's, so we need a conditional compile
In lua 5.0.X its lua_dostring()
In lua 5.1.X its luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char* str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_CEGUI__UBox swig_types[0]
#define SWIGTYPE_p_CEGUI__Window swig_types[1]
#define SWIGTYPE_p_CornerEnum swig_types[2]
#define SWIGTYPE_p_MovableTextOverlay swig_types[3]
#define SWIGTYPE_p_OIS__Keyboard swig_types[4]
#define SWIGTYPE_p_OIS__Mouse swig_types[5]
#define SWIGTYPE_p_OgreBites__SdkCameraMan swig_types[6]
#define SWIGTYPE_p_OgreMax__OgreMaxScene swig_types[7]
#define SWIGTYPE_p_Ogre__BillboardSet swig_types[8]
#define SWIGTYPE_p_Ogre__Camera swig_types[9]
#define SWIGTYPE_p_Ogre__ColourValue swig_types[10]
#define SWIGTYPE_p_Ogre__Entity swig_types[11]
#define SWIGTYPE_p_Ogre__Light swig_types[12]
#define SWIGTYPE_p_Ogre__MovableObject swig_types[13]
#define SWIGTYPE_p_Ogre__RenderWindow swig_types[14]
#define SWIGTYPE_p_Ogre__Root swig_types[15]
#define SWIGTYPE_p_Ogre__SceneManager swig_types[16]
#define SWIGTYPE_p_Ogre__SceneNode swig_types[17]
#define SWIGTYPE_p_Ogre__SharedPtrT_Ogre__Resource_t swig_types[18]
#define SWIGTYPE_p_Ogre__Vector2 swig_types[19]
#define SWIGTYPE_p_Ogre__Vector3 swig_types[20]
#define SWIGTYPE_p_Ogre__Viewport swig_types[21]
#define SWIGTYPE_p_ParticleUniverse__ParticleSystem swig_types[22]
#define SWIGTYPE_p_Pixy__Animable swig_types[23]
#define SWIGTYPE_p_Pixy__BaseCaster swig_types[24]
#define SWIGTYPE_p_Pixy__BaseDeck swig_types[25]
#define SWIGTYPE_p_Pixy__BaseEntity swig_types[26]
#define SWIGTYPE_p_Pixy__BasePuppet swig_types[27]
#define SWIGTYPE_p_Pixy__BaseSpell swig_types[28]
#define SWIGTYPE_p_Pixy__BaseUnit swig_types[29]
#define SWIGTYPE_p_Pixy__Caster swig_types[30]
#define SWIGTYPE_p_Pixy__Combat swig_types[31]
#define SWIGTYPE_p_Pixy__Deck swig_types[32]
#define SWIGTYPE_p_Pixy__Entity swig_types[33]
#define SWIGTYPE_p_Pixy__Event swig_types[34]
#define SWIGTYPE_p_Pixy__EventManager swig_types[35]
#define SWIGTYPE_p_Pixy__FxEngine swig_types[36]
#define SWIGTYPE_p_Pixy__GameManager swig_types[37]
#define SWIGTYPE_p_Pixy__GameState swig_types[38]
#define SWIGTYPE_p_Pixy__GfxEngine swig_types[39]
#define SWIGTYPE_p_Pixy__Identifiable swig_types[40]
#define SWIGTYPE_p_Pixy__InputManager swig_types[41]
#define SWIGTYPE_p_Pixy__Intro swig_types[42]
#define SWIGTYPE_p_Pixy__Loggable swig_types[43]
#define SWIGTYPE_p_Pixy__LuaExporterT_std__listT_Pixy__Deck_p_t_t swig_types[44]
#define SWIGTYPE_p_Pixy__LuaExporterT_std__listT_Pixy__Puppet_p_t_t swig_types[45]
#define SWIGTYPE_p_Pixy__LuaExporterT_std__listT_Pixy__Spell_p_t_t swig_types[46]
#define SWIGTYPE_p_Pixy__LuaExporterT_std__listT_Pixy__Unit_p_t_t swig_types[47]
#define SWIGTYPE_p_Pixy__Mobile swig_types[48]
#define SWIGTYPE_p_Pixy__NetworkManager swig_types[49]
#define SWIGTYPE_p_Pixy__OgreRTT swig_types[50]
#define SWIGTYPE_p_Pixy__Puppet swig_types[51]
#define SWIGTYPE_p_Pixy__Renderable swig_types[52]
#define SWIGTYPE_p_Pixy__ScriptEngine swig_types[53]
#define SWIGTYPE_p_Pixy__Spell swig_types[54]
#define SWIGTYPE_p_Pixy__Talent swig_types[55]
#define SWIGTYPE_p_Pixy__UIEngine swig_types[56]
#define SWIGTYPE_p_Pixy__Unit swig_types[57]
#define SWIGTYPE_p_caster_t swig_types[58]
#define SWIGTYPE_p_deck_t swig_types[59]
#define SWIGTYPE_p_decks_t swig_types[60]
#define SWIGTYPE_p_float swig_types[61]
#define SWIGTYPE_p_int swig_types[62]
#define SWIGTYPE_p_mapT_std__string_std__string_t swig_types[63]
#define SWIGTYPE_p_owner_t swig_types[64]
#define SWIGTYPE_p_property_t swig_types[65]
#define SWIGTYPE_p_puppets_t swig_types[66]
#define SWIGTYPE_p_spell_t swig_types[67]
#define SWIGTYPE_p_spells_t swig_types[68]
#define SWIGTYPE_p_std__listT_Pixy__Deck_p_t swig_types[69]
#define SWIGTYPE_p_std__listT_Pixy__Puppet_p_t swig_types[70]
#define SWIGTYPE_p_std__listT_Pixy__Spell_p_t swig_types[71]
#define SWIGTYPE_p_std__listT_Pixy__Talent_const_p_t swig_types[72]
#define SWIGTYPE_p_std__listT_Pixy__Unit_p_t swig_types[73]
#define SWIGTYPE_p_std__ostream swig_types[74]
#define SWIGTYPE_p_std__string swig_types[75]
#define SWIGTYPE_p_std__vectorT_Pixy__Spell_const_p_t swig_types[76]
#define SWIGTYPE_p_talent_t swig_types[77]
#define SWIGTYPE_p_talents_t swig_types[78]
#define SWIGTYPE_p_uint32 swig_types[79]
#define SWIGTYPE_p_unit_t swig_types[80]
#define SWIGTYPE_p_units_t swig_types[81]
#define SWIGTYPE_p_unsigned_char swig_types[82]
#define SWIGTYPE_p_unsigned_int swig_types[83]
#define SWIGTYPE_p_unsigned_long swig_types[84]
#define SWIGTYPE_p_unsigned_short swig_types[85]
#define SWIGTYPE_p_vectorT_Ogre__PixelFormat_t__type swig_types[86]
#define SWIGTYPE_p_void swig_types[87]
static swig_type_info *swig_types[89];
static swig_module_info swig_module = {swig_types, 88, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "Pixy"
#define SWIG_init      luaopen_Pixy
#define SWIG_init_user luaopen_Pixy_user

#define SWIG_LUACODE   luaopen_Pixy_luacode


namespace swig {
typedef struct{} LANGUAGE_OBJ;
}




	#include <string>


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}




  #include "Event.hpp"
  #include <vector>
  #include <exception>
  #include <map>
  #include <iostream>


  #include "EventManager.h"
  #include "Event.hpp"


  #include "Identifiable.h"


  #include "Loggable.h"


  #include "BaseCaster.h"
  #include "BaseSpell.h"


  #include "BaseDeck.h"


  #include "BaseEntity.h"


  #include "BasePuppet.h"
  #include <list>
  #include <vector>


  #include "BaseSpell.h"
  #include <cmath>
  #include <boost/shared_ptr.hpp>


  #include "BaseUnit.h"


  #include "BaseLuaExporter.h"


  #include "GameState.h"


  #include "Combat.h"
  #include <list>


  #include "Intro.h"
  #include <list>


  #include "Animable.h"
  #include <Ogre.h>


  #include "Mobile.h"


  #include "Renderable.h"


  #include "Caster.h"
  #include "BaseCaster.h"
  #include "Spell.h"
  #include <list>


  #include "Deck.h"
  #include "BaseDeck.h"


  #include "Entity.h"


  #include "Puppet.h"


  #include "Spell.h"
  #include "BaseSpell.h"


  #include "Unit.h"


  #include "GameManager.h"


  #include "InputManager.h"


  #include "NetworkManager.h"


  #include "GfxEngine.h"


  #include "FxEngine.h"


  #include "UIEngine.h"


  #include "ScriptEngine.h"


  #include "ogre/OgreRTT.h"


  #include "LuaExporter.h"
  #include "BaseLuaExporter.h"

  #include <vector>
  #include <list>

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",0,0)
  result = (std::string *)new std::string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("std::string::string",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (std::string *)new std::string((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::string()\n"
    "    std::string::string(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_string_size(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::size",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_length(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::length",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_length",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::string::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::empty",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string);
  }
  
  result = (bool)((std::string const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_c_str(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::c_str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::c_str",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_c_str",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->c_str();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_data(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::data",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->data();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("std::string::assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::assign",1,"std::string *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("std::string::assign",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_assign",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->assign((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static swig_lua_method swig_std_string_methods[] = {
    {"size", _wrap_string_size}, 
    {"length", _wrap_string_length}, 
    {"empty", _wrap_string_empty}, 
    {"c_str", _wrap_string_c_str}, 
    {"data", _wrap_string_data}, 
    {"assign", _wrap_string_assign}, 
    {0,0}
};
static swig_lua_attribute swig_std_string_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_std_string_bases[] = {0};
static const char *swig_std_string_base_names[] = {0};
static swig_lua_class _wrap_class_std_string = { "string", &SWIGTYPE_p_std__string,_wrap_new_string, swig_delete_string, swig_std_string_methods, swig_std_string_attributes, swig_std_string_bases, swig_std_string_base_names };

static int _wrap_new_Event__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Event *result = 0 ;
  
  SWIG_check_num_args("Pixy::Event::Event",0,0)
  result = (Pixy::Event *)new Pixy::Event();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__Event,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Event__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char arg1 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  Pixy::Event *result = 0 ;
  
  SWIG_check_num_args("Pixy::Event::Event",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Pixy::Event::Event",1,"unsigned char const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::Event::Event",2,"unsigned char const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Pixy::Event::Event",3,"unsigned char");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned char const)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char const)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned char)lua_tonumber(L, 3);
  result = (Pixy::Event *)new Pixy::Event(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__Event,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Event__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char arg1 ;
  unsigned char arg2 ;
  Pixy::Event *result = 0 ;
  
  SWIG_check_num_args("Pixy::Event::Event",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Pixy::Event::Event",1,"unsigned char const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::Event::Event",2,"unsigned char const");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned char const)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char const)lua_tonumber(L, 2);
  result = (Pixy::Event *)new Pixy::Event(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__Event,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Event__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char arg1 ;
  Pixy::Event *result = 0 ;
  
  SWIG_check_num_args("Pixy::Event::Event",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Pixy::Event::Event",1,"unsigned char const");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned char const)lua_tonumber(L, 1);
  result = (Pixy::Event *)new Pixy::Event(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__Event,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Event__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Event *arg1 = 0 ;
  Pixy::Event *result = 0 ;
  
  SWIG_check_num_args("Pixy::Event::Event",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Pixy::Event::Event",1,"Pixy::Event const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Event,0))){
    SWIG_fail_ptr("new_Event",1,SWIGTYPE_p_Pixy__Event);
  }
  
  result = (Pixy::Event *)new Pixy::Event((Pixy::Event const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__Event,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Event(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Event__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__Event, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Event__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Event__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Event__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Event__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Event'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Pixy::Event::Event()\n"
    "    Pixy::Event::Event(unsigned char const,unsigned char const,unsigned char)\n"
    "    Pixy::Event::Event(unsigned char const,unsigned char const)\n"
    "    Pixy::Event::Event(unsigned char const)\n"
    "    Pixy::Event::Event(Pixy::Event const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Event_reset(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Event *arg1 = (Pixy::Event *) 0 ;
  
  SWIG_check_num_args("Pixy::Event::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Event::reset",1,"Pixy::Event *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Event,0))){
    SWIG_fail_ptr("Event_reset",1,SWIGTYPE_p_Pixy__Event);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Event_getProperty(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Event *arg1 = (Pixy::Event *) 0 ;
  std::string arg2 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("Pixy::Event::getProperty",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Event::getProperty",1,"Pixy::Event const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Pixy::Event::getProperty",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Event,0))){
    SWIG_fail_ptr("Event_getProperty",1,SWIGTYPE_p_Pixy__Event);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  result = (std::string *) &((Pixy::Event const *)arg1)->getProperty(arg2);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Event_setProperty__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Event *arg1 = (Pixy::Event *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  
  SWIG_check_num_args("Pixy::Event::setProperty",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Event::setProperty",1,"Pixy::Event *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Pixy::Event::setProperty",2,"std::string const");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Pixy::Event::setProperty",3,"std::string const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Event,0))){
    SWIG_fail_ptr("Event_setProperty",1,SWIGTYPE_p_Pixy__Event);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  (&arg3)->assign(lua_tostring(L,3),lua_strlen(L,3));
  (arg1)->setProperty(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Event_setProperty__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Event *arg1 = (Pixy::Event *) 0 ;
  std::string arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("Pixy::Event::setProperty",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Event::setProperty",1,"Pixy::Event *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Pixy::Event::setProperty",2,"std::string const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Pixy::Event::setProperty",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Event,0))){
    SWIG_fail_ptr("Event_setProperty",1,SWIGTYPE_p_Pixy__Event);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setProperty(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Event_setProperty(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__Event, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Event_setProperty__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__Event, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Event_setProperty__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Event_setProperty'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Pixy::Event::setProperty(std::string const,std::string const)\n"
    "    Pixy::Event::setProperty(std::string const,int)\n");
  lua_error(L);return 0;
}


static int _wrap_Event_hasProperty(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Event *arg1 = (Pixy::Event *) 0 ;
  std::string arg2 ;
  bool result;
  
  SWIG_check_num_args("Pixy::Event::hasProperty",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Event::hasProperty",1,"Pixy::Event const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Pixy::Event::hasProperty",2,"std::string const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Event,0))){
    SWIG_fail_ptr("Event_hasProperty",1,SWIGTYPE_p_Pixy__Event);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  result = (bool)((Pixy::Event const *)arg1)->hasProperty(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Event_dump__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Event *arg1 = (Pixy::Event *) 0 ;
  std::ostream *arg2 = 0 ;
  
  SWIG_check_num_args("Pixy::Event::dump",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Event::dump",1,"Pixy::Event const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Pixy::Event::dump",2,"std::ostream &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Event,0))){
    SWIG_fail_ptr("Event_dump",1,SWIGTYPE_p_Pixy__Event);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__ostream,0))){
    SWIG_fail_ptr("Event_dump",2,SWIGTYPE_p_std__ostream);
  }
  
  ((Pixy::Event const *)arg1)->dump(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Event_dump__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Event *arg1 = (Pixy::Event *) 0 ;
  
  SWIG_check_num_args("Pixy::Event::dump",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Event::dump",1,"Pixy::Event const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Event,0))){
    SWIG_fail_ptr("Event_dump",1,SWIGTYPE_p_Pixy__Event);
  }
  
  ((Pixy::Event const *)arg1)->dump();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Event_dump(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__Event, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Event_dump__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__Event, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__ostream, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Event_dump__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Event_dump'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Pixy::Event::dump(std::ostream &) const\n"
    "    Pixy::Event::dump() const\n");
  lua_error(L);return 0;
}


static int _wrap_Event_UID_set(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Event *arg1 = (Pixy::Event *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("Pixy::Event::UID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Event::UID",1,"Pixy::Event *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::Event::UID",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Event,0))){
    SWIG_fail_ptr("Event_UID_set",1,SWIGTYPE_p_Pixy__Event);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  if (arg1) (arg1)->UID = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Event_UID_get(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Event *arg1 = (Pixy::Event *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("Pixy::Event::UID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Event::UID",1,"Pixy::Event *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Event,0))){
    SWIG_fail_ptr("Event_UID_get",1,SWIGTYPE_p_Pixy__Event);
  }
  
  result = (unsigned char) ((arg1)->UID);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Event_Options_set(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Event *arg1 = (Pixy::Event *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("Pixy::Event::Options",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Event::Options",1,"Pixy::Event *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::Event::Options",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Event,0))){
    SWIG_fail_ptr("Event_Options_set",1,SWIGTYPE_p_Pixy__Event);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  if (arg1) (arg1)->Options = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Event_Options_get(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Event *arg1 = (Pixy::Event *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("Pixy::Event::Options",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Event::Options",1,"Pixy::Event *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Event,0))){
    SWIG_fail_ptr("Event_Options_get",1,SWIGTYPE_p_Pixy__Event);
  }
  
  result = (unsigned char) ((arg1)->Options);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Event_Feedback_set(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Event *arg1 = (Pixy::Event *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("Pixy::Event::Feedback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Event::Feedback",1,"Pixy::Event *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::Event::Feedback",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Event,0))){
    SWIG_fail_ptr("Event_Feedback_set",1,SWIGTYPE_p_Pixy__Event);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  if (arg1) (arg1)->Feedback = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Event_Feedback_get(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Event *arg1 = (Pixy::Event *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("Pixy::Event::Feedback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Event::Feedback",1,"Pixy::Event *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Event,0))){
    SWIG_fail_ptr("Event_Feedback_get",1,SWIGTYPE_p_Pixy__Event);
  }
  
  result = (unsigned char) ((arg1)->Feedback);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Event_Any_set(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Event *arg1 = (Pixy::Event *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("Pixy::Event::Any",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Event::Any",1,"Pixy::Event *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::Event::Any",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Event,0))){
    SWIG_fail_ptr("Event_Any_set",1,SWIGTYPE_p_Pixy__Event);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Event_Any_set");
  if (arg1) (arg1)->Any = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Event_Any_get(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Event *arg1 = (Pixy::Event *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("Pixy::Event::Any",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Event::Any",1,"Pixy::Event *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Event,0))){
    SWIG_fail_ptr("Event_Any_get",1,SWIGTYPE_p_Pixy__Event);
  }
  
  result = (void *) ((arg1)->Any);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Event_UIDToString(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char arg1 ;
  std::string result;
  
  SWIG_check_num_args("Pixy::Event::_uid_to_string",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Pixy::Event::_uid_to_string",1,"unsigned char");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned char)lua_tonumber(L, 1);
  result = Pixy::Event::_uid_to_string(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Event(void *obj) {
Pixy::Event *arg1 = (Pixy::Event *) obj;
delete arg1;
}
static swig_lua_method swig_Pixy_Event_methods[] = {
    {"reset", _wrap_Event_reset}, 
    {"getProperty", _wrap_Event_getProperty}, 
    {"setProperty", _wrap_Event_setProperty}, 
    {"hasProperty", _wrap_Event_hasProperty}, 
    {"dump", _wrap_Event_dump}, 
    {0,0}
};
static swig_lua_attribute swig_Pixy_Event_attributes[] = {
    { "UID", _wrap_Event_UID_get, _wrap_Event_UID_set},
    { "Options", _wrap_Event_Options_get, _wrap_Event_Options_set},
    { "Feedback", _wrap_Event_Feedback_get, _wrap_Event_Feedback_set},
    { "Any", _wrap_Event_Any_get, _wrap_Event_Any_set},
    {0,0,0}
};
static swig_lua_class *swig_Pixy_Event_bases[] = {0};
static const char *swig_Pixy_Event_base_names[] = {0};
static swig_lua_class _wrap_class_Pixy_Event = { "Event", &SWIGTYPE_p_Pixy__Event,_wrap_new_Event, swig_delete_Event, swig_Pixy_Event_methods, swig_Pixy_Event_attributes, swig_Pixy_Event_bases, swig_Pixy_Event_base_names };

static int _wrap_EventManager_getSingletonPtr(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::EventManager *result = 0 ;
  
  SWIG_check_num_args("Pixy::EventManager::getSingletonPtr",0,0)
  result = (Pixy::EventManager *)Pixy::EventManager::getSingletonPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__EventManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventManager_getSingleton(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::EventManager *result = 0 ;
  
  SWIG_check_num_args("Pixy::EventManager::getSingleton",0,0)
  result = (Pixy::EventManager *) &Pixy::EventManager::getSingleton();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__EventManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventManager_hook(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::EventManager *arg1 = (Pixy::EventManager *) 0 ;
  Pixy::Event *arg2 = 0 ;
  
  SWIG_check_num_args("Pixy::EventManager::hook",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::EventManager::hook",1,"Pixy::EventManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Pixy::EventManager::hook",2,"Pixy::Event const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__EventManager,0))){
    SWIG_fail_ptr("EventManager_hook",1,SWIGTYPE_p_Pixy__EventManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Pixy__Event,0))){
    SWIG_fail_ptr("EventManager_hook",2,SWIGTYPE_p_Pixy__Event);
  }
  
  (arg1)->hook((Pixy::Event const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_Pixy_EventManager_methods[] = {
    {"hook", _wrap_EventManager_hook}, 
    {0,0}
};
static swig_lua_attribute swig_Pixy_EventManager_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Pixy_EventManager_bases[] = {0};
static const char *swig_Pixy_EventManager_base_names[] = {0};
static swig_lua_class _wrap_class_Pixy_EventManager = { "EventManager", &SWIGTYPE_p_Pixy__EventManager,0,0, swig_Pixy_EventManager_methods, swig_Pixy_EventManager_attributes, swig_Pixy_EventManager_bases, swig_Pixy_EventManager_base_names };

static int _wrap_new_Identifiable__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Identifiable *result = 0 ;
  
  SWIG_check_num_args("Pixy::Identifiable::Identifiable",0,0)
  result = (Pixy::Identifiable *)new Pixy::Identifiable();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__Identifiable,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Identifiable__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Identifiable *arg1 = 0 ;
  Pixy::Identifiable *result = 0 ;
  
  SWIG_check_num_args("Pixy::Identifiable::Identifiable",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Pixy::Identifiable::Identifiable",1,"Pixy::Identifiable const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Identifiable,0))){
    SWIG_fail_ptr("new_Identifiable",1,SWIGTYPE_p_Pixy__Identifiable);
  }
  
  result = (Pixy::Identifiable *)new Pixy::Identifiable((Pixy::Identifiable const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__Identifiable,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Identifiable(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Identifiable__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__Identifiable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Identifiable__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Identifiable'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Pixy::Identifiable::Identifiable()\n"
    "    Pixy::Identifiable::Identifiable(Pixy::Identifiable const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Identifiable__setUID(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Identifiable *arg1 = (Pixy::Identifiable *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Pixy::Identifiable::_setUID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Identifiable::_setUID",1,"Pixy::Identifiable *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::Identifiable::_setUID",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Identifiable,0))){
    SWIG_fail_ptr("Identifiable__setUID",1,SWIGTYPE_p_Pixy__Identifiable);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->_setUID(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Identifiable_getUID(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Identifiable *arg1 = (Pixy::Identifiable *) 0 ;
  int result;
  
  SWIG_check_num_args("Pixy::Identifiable::getUID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Identifiable::getUID",1,"Pixy::Identifiable const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Identifiable,0))){
    SWIG_fail_ptr("Identifiable_getUID",1,SWIGTYPE_p_Pixy__Identifiable);
  }
  
  result = (int)((Pixy::Identifiable const *)arg1)->getUID();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Identifiable__setName(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Identifiable *arg1 = (Pixy::Identifiable *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Pixy::Identifiable::_setName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Identifiable::_setName",1,"Pixy::Identifiable *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Pixy::Identifiable::_setName",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Identifiable,0))){
    SWIG_fail_ptr("Identifiable__setName",1,SWIGTYPE_p_Pixy__Identifiable);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->_setName((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Identifiable_getName(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Identifiable *arg1 = (Pixy::Identifiable *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("Pixy::Identifiable::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Identifiable::getName",1,"Pixy::Identifiable const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Identifiable,0))){
    SWIG_fail_ptr("Identifiable_getName",1,SWIGTYPE_p_Pixy__Identifiable);
  }
  
  result = (std::string *) &((Pixy::Identifiable const *)arg1)->getName();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Identifiable___eq(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Identifiable *arg1 = (Pixy::Identifiable *) 0 ;
  Pixy::Identifiable *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Pixy::Identifiable::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Identifiable::operator ==",1,"Pixy::Identifiable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Pixy::Identifiable::operator ==",2,"Pixy::Identifiable const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Identifiable,0))){
    SWIG_fail_ptr("Identifiable___eq",1,SWIGTYPE_p_Pixy__Identifiable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Pixy__Identifiable,0))){
    SWIG_fail_ptr("Identifiable___eq",2,SWIGTYPE_p_Pixy__Identifiable);
  }
  
  result = (bool)(arg1)->operator ==((Pixy::Identifiable const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Identifiable(void *obj) {
Pixy::Identifiable *arg1 = (Pixy::Identifiable *) obj;
delete arg1;
}
static swig_lua_method swig_Pixy_Identifiable_methods[] = {
    {"_setUID", _wrap_Identifiable__setUID}, 
    {"getUID", _wrap_Identifiable_getUID}, 
    {"_setName", _wrap_Identifiable__setName}, 
    {"getName", _wrap_Identifiable_getName}, 
    {"__eq", _wrap_Identifiable___eq}, 
    {0,0}
};
static swig_lua_attribute swig_Pixy_Identifiable_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Pixy_Identifiable_bases[] = {0};
static const char *swig_Pixy_Identifiable_base_names[] = {0};
static swig_lua_class _wrap_class_Pixy_Identifiable = { "Identifiable", &SWIGTYPE_p_Pixy__Identifiable,_wrap_new_Identifiable, swig_delete_Identifiable, swig_Pixy_Identifiable_methods, swig_Pixy_Identifiable_attributes, swig_Pixy_Identifiable_bases, swig_Pixy_Identifiable_base_names };

static int _wrap_Loggable_dump(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Loggable *arg1 = (Pixy::Loggable *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Pixy::Loggable::dump",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Loggable::dump",1,"Pixy::Loggable const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Loggable,0))){
    SWIG_fail_ptr("Loggable_dump",1,SWIGTYPE_p_Pixy__Loggable);
  }
  
  result = ((Pixy::Loggable const *)arg1)->dump();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Loggable(void *obj) {
Pixy::Loggable *arg1 = (Pixy::Loggable *) obj;
delete arg1;
}
static swig_lua_method swig_Pixy_Loggable_methods[] = {
    {"dump", _wrap_Loggable_dump}, 
    {0,0}
};
static swig_lua_attribute swig_Pixy_Loggable_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Pixy_Loggable_bases[] = {0};
static const char *swig_Pixy_Loggable_base_names[] = {0};
static swig_lua_class _wrap_class_Pixy_Loggable = { "Loggable", &SWIGTYPE_p_Pixy__Loggable,0, swig_delete_Loggable, swig_Pixy_Loggable_methods, swig_Pixy_Loggable_attributes, swig_Pixy_Loggable_bases, swig_Pixy_Loggable_base_names };

static int _wrap_BaseCaster_attachSpell(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseCaster *arg1 = (Pixy::BaseCaster *) 0 ;
  Pixy::BaseCaster::spell_t *arg2 = (Pixy::BaseCaster::spell_t *) 0 ;
  
  SWIG_check_num_args("Pixy::BaseCaster::attachSpell",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseCaster::attachSpell",1,"Pixy::BaseCaster *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::BaseCaster::attachSpell",2,"Pixy::BaseCaster::spell_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseCaster,0))){
    SWIG_fail_ptr("BaseCaster_attachSpell",1,SWIGTYPE_p_Pixy__BaseCaster);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Pixy__BaseSpell,0))){
    SWIG_fail_ptr("BaseCaster_attachSpell",2,SWIGTYPE_p_Pixy__BaseSpell);
  }
  
  (arg1)->attachSpell(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCaster_attachBuff(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseCaster *arg1 = (Pixy::BaseCaster *) 0 ;
  Pixy::BaseCaster::spell_t *arg2 = (Pixy::BaseCaster::spell_t *) 0 ;
  
  SWIG_check_num_args("Pixy::BaseCaster::attachBuff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseCaster::attachBuff",1,"Pixy::BaseCaster *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::BaseCaster::attachBuff",2,"Pixy::BaseCaster::spell_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseCaster,0))){
    SWIG_fail_ptr("BaseCaster_attachBuff",1,SWIGTYPE_p_Pixy__BaseCaster);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Pixy__BaseSpell,0))){
    SWIG_fail_ptr("BaseCaster_attachBuff",2,SWIGTYPE_p_Pixy__BaseSpell);
  }
  
  (arg1)->attachBuff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCaster_detachSpell__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseCaster *arg1 = (Pixy::BaseCaster *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("Pixy::BaseCaster::detachSpell",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseCaster::detachSpell",1,"Pixy::BaseCaster *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::BaseCaster::detachSpell",2,"int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Pixy::BaseCaster::detachSpell",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseCaster,0))){
    SWIG_fail_ptr("BaseCaster_detachSpell",1,SWIGTYPE_p_Pixy__BaseCaster);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->detachSpell(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCaster_detachSpell__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseCaster *arg1 = (Pixy::BaseCaster *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Pixy::BaseCaster::detachSpell",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseCaster::detachSpell",1,"Pixy::BaseCaster *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::BaseCaster::detachSpell",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseCaster,0))){
    SWIG_fail_ptr("BaseCaster_detachSpell",1,SWIGTYPE_p_Pixy__BaseCaster);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->detachSpell(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCaster_detachSpell(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__BaseCaster, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BaseCaster_detachSpell__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__BaseCaster, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_BaseCaster_detachSpell__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'BaseCaster_detachSpell'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Pixy::BaseCaster::detachSpell(int,bool)\n"
    "    Pixy::BaseCaster::detachSpell(int)\n");
  lua_error(L);return 0;
}


static int _wrap_BaseCaster_detachBuff__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseCaster *arg1 = (Pixy::BaseCaster *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("Pixy::BaseCaster::detachBuff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseCaster::detachBuff",1,"Pixy::BaseCaster *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::BaseCaster::detachBuff",2,"int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Pixy::BaseCaster::detachBuff",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseCaster,0))){
    SWIG_fail_ptr("BaseCaster_detachBuff",1,SWIGTYPE_p_Pixy__BaseCaster);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->detachBuff(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCaster_detachBuff__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseCaster *arg1 = (Pixy::BaseCaster *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Pixy::BaseCaster::detachBuff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseCaster::detachBuff",1,"Pixy::BaseCaster *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::BaseCaster::detachBuff",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseCaster,0))){
    SWIG_fail_ptr("BaseCaster_detachBuff",1,SWIGTYPE_p_Pixy__BaseCaster);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->detachBuff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCaster_detachBuff(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__BaseCaster, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BaseCaster_detachBuff__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__BaseCaster, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_BaseCaster_detachBuff__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'BaseCaster_detachBuff'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Pixy::BaseCaster::detachBuff(int,bool)\n"
    "    Pixy::BaseCaster::detachBuff(int)\n");
  lua_error(L);return 0;
}


static int _wrap_BaseCaster_getSpell(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseCaster *arg1 = (Pixy::BaseCaster *) 0 ;
  int arg2 ;
  Pixy::BaseCaster::spell_t *result = 0 ;
  
  SWIG_check_num_args("Pixy::BaseCaster::getSpell",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseCaster::getSpell",1,"Pixy::BaseCaster *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::BaseCaster::getSpell",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseCaster,0))){
    SWIG_fail_ptr("BaseCaster_getSpell",1,SWIGTYPE_p_Pixy__BaseCaster);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (Pixy::BaseCaster::spell_t *)(arg1)->getSpell(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__BaseSpell,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCaster_getBuff(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseCaster *arg1 = (Pixy::BaseCaster *) 0 ;
  int arg2 ;
  Pixy::BaseCaster::spell_t *result = 0 ;
  
  SWIG_check_num_args("Pixy::BaseCaster::getBuff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseCaster::getBuff",1,"Pixy::BaseCaster *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::BaseCaster::getBuff",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseCaster,0))){
    SWIG_fail_ptr("BaseCaster_getBuff",1,SWIGTYPE_p_Pixy__BaseCaster);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (Pixy::BaseCaster::spell_t *)(arg1)->getBuff(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__BaseSpell,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCaster_hasBuff(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseCaster *arg1 = (Pixy::BaseCaster *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("Pixy::BaseCaster::hasBuff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseCaster::hasBuff",1,"Pixy::BaseCaster *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::BaseCaster::hasBuff",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseCaster,0))){
    SWIG_fail_ptr("BaseCaster_hasBuff",1,SWIGTYPE_p_Pixy__BaseCaster);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->hasBuff(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCaster_hasBuffWithName(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseCaster *arg1 = (Pixy::BaseCaster *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("Pixy::BaseCaster::hasBuffWithName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseCaster::hasBuffWithName",1,"Pixy::BaseCaster *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Pixy::BaseCaster::hasBuffWithName",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseCaster,0))){
    SWIG_fail_ptr("BaseCaster_hasBuffWithName",1,SWIGTYPE_p_Pixy__BaseCaster);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->hasBuffWithName((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCaster_nrSpells(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseCaster *arg1 = (Pixy::BaseCaster *) 0 ;
  int result;
  
  SWIG_check_num_args("Pixy::BaseCaster::nrSpells",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseCaster::nrSpells",1,"Pixy::BaseCaster *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseCaster,0))){
    SWIG_fail_ptr("BaseCaster_nrSpells",1,SWIGTYPE_p_Pixy__BaseCaster);
  }
  
  result = (int)(arg1)->nrSpells();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCaster_nrBuffs(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseCaster *arg1 = (Pixy::BaseCaster *) 0 ;
  int result;
  
  SWIG_check_num_args("Pixy::BaseCaster::nrBuffs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseCaster::nrBuffs",1,"Pixy::BaseCaster *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseCaster,0))){
    SWIG_fail_ptr("BaseCaster_nrBuffs",1,SWIGTYPE_p_Pixy__BaseCaster);
  }
  
  result = (int)(arg1)->nrBuffs();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BaseCaster(void *obj) {
Pixy::BaseCaster *arg1 = (Pixy::BaseCaster *) obj;
delete arg1;
}
static swig_lua_method swig_Pixy_BaseCaster_methods[] = {
    {"attachSpell", _wrap_BaseCaster_attachSpell}, 
    {"attachBuff", _wrap_BaseCaster_attachBuff}, 
    {"detachSpell", _wrap_BaseCaster_detachSpell}, 
    {"detachBuff", _wrap_BaseCaster_detachBuff}, 
    {"getSpell", _wrap_BaseCaster_getSpell}, 
    {"getBuff", _wrap_BaseCaster_getBuff}, 
    {"hasBuff", _wrap_BaseCaster_hasBuff}, 
    {"hasBuffWithName", _wrap_BaseCaster_hasBuffWithName}, 
    {"nrSpells", _wrap_BaseCaster_nrSpells}, 
    {"nrBuffs", _wrap_BaseCaster_nrBuffs}, 
    {0,0}
};
static swig_lua_attribute swig_Pixy_BaseCaster_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Pixy_BaseCaster_bases[] = {0};
static const char *swig_Pixy_BaseCaster_base_names[] = {0};
static swig_lua_class _wrap_class_Pixy_BaseCaster = { "BaseCaster", &SWIGTYPE_p_Pixy__BaseCaster,0, swig_delete_BaseCaster, swig_Pixy_BaseCaster_methods, swig_Pixy_BaseCaster_attributes, swig_Pixy_BaseCaster_bases, swig_Pixy_BaseCaster_base_names };

static int _wrap_BaseDeck_getName(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseDeck *arg1 = (Pixy::BaseDeck *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("Pixy::BaseDeck::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseDeck::getName",1,"Pixy::BaseDeck const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseDeck,0))){
    SWIG_fail_ptr("BaseDeck_getName",1,SWIGTYPE_p_Pixy__BaseDeck);
  }
  
  result = (std::string *) &((Pixy::BaseDeck const *)arg1)->getName();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseDeck_getUseCount(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseDeck *arg1 = (Pixy::BaseDeck *) 0 ;
  int result;
  
  SWIG_check_num_args("Pixy::BaseDeck::getUseCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseDeck::getUseCount",1,"Pixy::BaseDeck const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseDeck,0))){
    SWIG_fail_ptr("BaseDeck_getUseCount",1,SWIGTYPE_p_Pixy__BaseDeck);
  }
  
  result = (int)((Pixy::BaseDeck const *)arg1)->getUseCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BaseDeck(void *obj) {
Pixy::BaseDeck *arg1 = (Pixy::BaseDeck *) obj;
delete arg1;
}
static swig_lua_method swig_Pixy_BaseDeck_methods[] = {
    {"getName", _wrap_BaseDeck_getName}, 
    {"getUseCount", _wrap_BaseDeck_getUseCount}, 
    {0,0}
};
static swig_lua_attribute swig_Pixy_BaseDeck_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Pixy_BaseDeck_bases[] = {0};
static const char *swig_Pixy_BaseDeck_base_names[] = {0};
static swig_lua_class _wrap_class_Pixy_BaseDeck = { "BaseDeck", &SWIGTYPE_p_Pixy__BaseDeck,0, swig_delete_BaseDeck, swig_Pixy_BaseDeck_methods, swig_Pixy_BaseDeck_attributes, swig_Pixy_BaseDeck_bases, swig_Pixy_BaseDeck_base_names };

static int _wrap_BaseEntity_live(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseEntity *arg1 = (Pixy::BaseEntity *) 0 ;
  bool result;
  
  SWIG_check_num_args("Pixy::BaseEntity::live",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseEntity::live",1,"Pixy::BaseEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseEntity,0))){
    SWIG_fail_ptr("BaseEntity_live",1,SWIGTYPE_p_Pixy__BaseEntity);
  }
  
  result = (bool)(arg1)->live();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntity_die(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseEntity *arg1 = (Pixy::BaseEntity *) 0 ;
  
  SWIG_check_num_args("Pixy::BaseEntity::die",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseEntity::die",1,"Pixy::BaseEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseEntity,0))){
    SWIG_fail_ptr("BaseEntity_die",1,SWIGTYPE_p_Pixy__BaseEntity);
  }
  
  (arg1)->die();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntity_setHP(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseEntity *arg1 = (Pixy::BaseEntity *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Pixy::BaseEntity::setHP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseEntity::setHP",1,"Pixy::BaseEntity *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::BaseEntity::setHP",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseEntity,0))){
    SWIG_fail_ptr("BaseEntity_setHP",1,SWIGTYPE_p_Pixy__BaseEntity);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setHP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntity_getHP(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseEntity *arg1 = (Pixy::BaseEntity *) 0 ;
  int result;
  
  SWIG_check_num_args("Pixy::BaseEntity::getHP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseEntity::getHP",1,"Pixy::BaseEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseEntity,0))){
    SWIG_fail_ptr("BaseEntity_getHP",1,SWIGTYPE_p_Pixy__BaseEntity);
  }
  
  result = (int)((Pixy::BaseEntity const *)arg1)->getHP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntity_getRace(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseEntity *arg1 = (Pixy::BaseEntity *) 0 ;
  int result;
  
  SWIG_check_num_args("Pixy::BaseEntity::getRace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseEntity::getRace",1,"Pixy::BaseEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseEntity,0))){
    SWIG_fail_ptr("BaseEntity_getRace",1,SWIGTYPE_p_Pixy__BaseEntity);
  }
  
  result = (int)((Pixy::BaseEntity const *)arg1)->getRace();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntity_getOwner(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseEntity *arg1 = (Pixy::BaseEntity *) 0 ;
  Pixy::Entity *result = 0 ;
  
  SWIG_check_num_args("Pixy::BaseEntity::getOwner",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseEntity::getOwner",1,"Pixy::BaseEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseEntity,0))){
    SWIG_fail_ptr("BaseEntity_getOwner",1,SWIGTYPE_p_Pixy__BaseEntity);
  }
  
  result = (Pixy::Entity *)((Pixy::BaseEntity const *)arg1)->getOwner();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__Entity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntity_isDead(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseEntity *arg1 = (Pixy::BaseEntity *) 0 ;
  bool result;
  
  SWIG_check_num_args("Pixy::BaseEntity::isDead",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseEntity::isDead",1,"Pixy::BaseEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseEntity,0))){
    SWIG_fail_ptr("BaseEntity_isDead",1,SWIGTYPE_p_Pixy__BaseEntity);
  }
  
  result = (bool)((Pixy::BaseEntity const *)arg1)->isDead();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntity_isPuppet(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseEntity *arg1 = (Pixy::BaseEntity *) 0 ;
  bool result;
  
  SWIG_check_num_args("Pixy::BaseEntity::isPuppet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseEntity::isPuppet",1,"Pixy::BaseEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseEntity,0))){
    SWIG_fail_ptr("BaseEntity_isPuppet",1,SWIGTYPE_p_Pixy__BaseEntity);
  }
  
  result = (bool)((Pixy::BaseEntity const *)arg1)->isPuppet();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntity_isUnit(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseEntity *arg1 = (Pixy::BaseEntity *) 0 ;
  bool result;
  
  SWIG_check_num_args("Pixy::BaseEntity::isUnit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseEntity::isUnit",1,"Pixy::BaseEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseEntity,0))){
    SWIG_fail_ptr("BaseEntity_isUnit",1,SWIGTYPE_p_Pixy__BaseEntity);
  }
  
  result = (bool)((Pixy::BaseEntity const *)arg1)->isUnit();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntity_dump(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseEntity *arg1 = (Pixy::BaseEntity *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Pixy::BaseEntity::dump",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseEntity::dump",1,"Pixy::BaseEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseEntity,0))){
    SWIG_fail_ptr("BaseEntity_dump",1,SWIGTYPE_p_Pixy__BaseEntity);
  }
  
  result = ((Pixy::BaseEntity const *)arg1)->dump();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BaseEntity(void *obj) {
Pixy::BaseEntity *arg1 = (Pixy::BaseEntity *) obj;
delete arg1;
}
static swig_lua_method swig_Pixy_BaseEntity_methods[] = {
    {"live", _wrap_BaseEntity_live}, 
    {"die", _wrap_BaseEntity_die}, 
    {"setHP", _wrap_BaseEntity_setHP}, 
    {"getHP", _wrap_BaseEntity_getHP}, 
    {"getRace", _wrap_BaseEntity_getRace}, 
    {"getOwner", _wrap_BaseEntity_getOwner}, 
    {"isDead", _wrap_BaseEntity_isDead}, 
    {"isPuppet", _wrap_BaseEntity_isPuppet}, 
    {"isUnit", _wrap_BaseEntity_isUnit}, 
    {"dump", _wrap_BaseEntity_dump}, 
    {0,0}
};
static swig_lua_attribute swig_Pixy_BaseEntity_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Pixy_BaseEntity_bases[] = {0,0,0};
static const char *swig_Pixy_BaseEntity_base_names[] = {"Pixy::Identifiable *","Pixy::Loggable *",0};
static swig_lua_class _wrap_class_Pixy_BaseEntity = { "BaseEntity", &SWIGTYPE_p_Pixy__BaseEntity,0, swig_delete_BaseEntity, swig_Pixy_BaseEntity_methods, swig_Pixy_BaseEntity_attributes, swig_Pixy_BaseEntity_bases, swig_Pixy_BaseEntity_base_names };

static int _wrap_BasePuppet_setExperience(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BasePuppet *arg1 = (Pixy::BasePuppet *) 0 ;
  long arg2 ;
  
  SWIG_check_num_args("Pixy::BasePuppet::setExperience",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BasePuppet::setExperience",1,"Pixy::BasePuppet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::BasePuppet::setExperience",2,"long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BasePuppet,0))){
    SWIG_fail_ptr("BasePuppet_setExperience",1,SWIGTYPE_p_Pixy__BasePuppet);
  }
  
  arg2 = (long)lua_tonumber(L, 2);
  (arg1)->setExperience(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasePuppet_setLevel(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BasePuppet *arg1 = (Pixy::BasePuppet *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Pixy::BasePuppet::setLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BasePuppet::setLevel",1,"Pixy::BasePuppet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::BasePuppet::setLevel",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BasePuppet,0))){
    SWIG_fail_ptr("BasePuppet_setLevel",1,SWIGTYPE_p_Pixy__BasePuppet);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setLevel(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasePuppet_setIntelligence(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BasePuppet *arg1 = (Pixy::BasePuppet *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Pixy::BasePuppet::setIntelligence",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BasePuppet::setIntelligence",1,"Pixy::BasePuppet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::BasePuppet::setIntelligence",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BasePuppet,0))){
    SWIG_fail_ptr("BasePuppet_setIntelligence",1,SWIGTYPE_p_Pixy__BasePuppet);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setIntelligence(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasePuppet_setVitality(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BasePuppet *arg1 = (Pixy::BasePuppet *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Pixy::BasePuppet::setVitality",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BasePuppet::setVitality",1,"Pixy::BasePuppet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::BasePuppet::setVitality",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BasePuppet,0))){
    SWIG_fail_ptr("BasePuppet_setVitality",1,SWIGTYPE_p_Pixy__BasePuppet);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setVitality(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasePuppet_setWP(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BasePuppet *arg1 = (Pixy::BasePuppet *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Pixy::BasePuppet::setWP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BasePuppet::setWP",1,"Pixy::BasePuppet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::BasePuppet::setWP",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BasePuppet,0))){
    SWIG_fail_ptr("BasePuppet_setWP",1,SWIGTYPE_p_Pixy__BasePuppet);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setWP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasePuppet_setChannels(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BasePuppet *arg1 = (Pixy::BasePuppet *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Pixy::BasePuppet::setChannels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BasePuppet::setChannels",1,"Pixy::BasePuppet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::BasePuppet::setChannels",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BasePuppet,0))){
    SWIG_fail_ptr("BasePuppet_setChannels",1,SWIGTYPE_p_Pixy__BasePuppet);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setChannels(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasePuppet_setWins(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BasePuppet *arg1 = (Pixy::BasePuppet *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Pixy::BasePuppet::setWins",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BasePuppet::setWins",1,"Pixy::BasePuppet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::BasePuppet::setWins",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BasePuppet,0))){
    SWIG_fail_ptr("BasePuppet_setWins",1,SWIGTYPE_p_Pixy__BasePuppet);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setWins(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasePuppet_setLosses(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BasePuppet *arg1 = (Pixy::BasePuppet *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Pixy::BasePuppet::setLosses",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BasePuppet::setLosses",1,"Pixy::BasePuppet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::BasePuppet::setLosses",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BasePuppet,0))){
    SWIG_fail_ptr("BasePuppet_setLosses",1,SWIGTYPE_p_Pixy__BasePuppet);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setLosses(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasePuppet_getExperience(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BasePuppet *arg1 = (Pixy::BasePuppet *) 0 ;
  long result;
  
  SWIG_check_num_args("Pixy::BasePuppet::getExperience",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BasePuppet::getExperience",1,"Pixy::BasePuppet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BasePuppet,0))){
    SWIG_fail_ptr("BasePuppet_getExperience",1,SWIGTYPE_p_Pixy__BasePuppet);
  }
  
  result = (long)((Pixy::BasePuppet const *)arg1)->getExperience();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasePuppet_getLevel(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BasePuppet *arg1 = (Pixy::BasePuppet *) 0 ;
  int result;
  
  SWIG_check_num_args("Pixy::BasePuppet::getLevel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BasePuppet::getLevel",1,"Pixy::BasePuppet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BasePuppet,0))){
    SWIG_fail_ptr("BasePuppet_getLevel",1,SWIGTYPE_p_Pixy__BasePuppet);
  }
  
  result = (int)((Pixy::BasePuppet const *)arg1)->getLevel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasePuppet_getIntelligence(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BasePuppet *arg1 = (Pixy::BasePuppet *) 0 ;
  int result;
  
  SWIG_check_num_args("Pixy::BasePuppet::getIntelligence",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BasePuppet::getIntelligence",1,"Pixy::BasePuppet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BasePuppet,0))){
    SWIG_fail_ptr("BasePuppet_getIntelligence",1,SWIGTYPE_p_Pixy__BasePuppet);
  }
  
  result = (int)((Pixy::BasePuppet const *)arg1)->getIntelligence();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasePuppet_getVitality(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BasePuppet *arg1 = (Pixy::BasePuppet *) 0 ;
  int result;
  
  SWIG_check_num_args("Pixy::BasePuppet::getVitality",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BasePuppet::getVitality",1,"Pixy::BasePuppet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BasePuppet,0))){
    SWIG_fail_ptr("BasePuppet_getVitality",1,SWIGTYPE_p_Pixy__BasePuppet);
  }
  
  result = (int)((Pixy::BasePuppet const *)arg1)->getVitality();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasePuppet_getWP(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BasePuppet *arg1 = (Pixy::BasePuppet *) 0 ;
  int result;
  
  SWIG_check_num_args("Pixy::BasePuppet::getWP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BasePuppet::getWP",1,"Pixy::BasePuppet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BasePuppet,0))){
    SWIG_fail_ptr("BasePuppet_getWP",1,SWIGTYPE_p_Pixy__BasePuppet);
  }
  
  result = (int)((Pixy::BasePuppet const *)arg1)->getWP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasePuppet_getChannels(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BasePuppet *arg1 = (Pixy::BasePuppet *) 0 ;
  int result;
  
  SWIG_check_num_args("Pixy::BasePuppet::getChannels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BasePuppet::getChannels",1,"Pixy::BasePuppet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BasePuppet,0))){
    SWIG_fail_ptr("BasePuppet_getChannels",1,SWIGTYPE_p_Pixy__BasePuppet);
  }
  
  result = (int)((Pixy::BasePuppet const *)arg1)->getChannels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasePuppet_getWins(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BasePuppet *arg1 = (Pixy::BasePuppet *) 0 ;
  int result;
  
  SWIG_check_num_args("Pixy::BasePuppet::getWins",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BasePuppet::getWins",1,"Pixy::BasePuppet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BasePuppet,0))){
    SWIG_fail_ptr("BasePuppet_getWins",1,SWIGTYPE_p_Pixy__BasePuppet);
  }
  
  result = (int)((Pixy::BasePuppet const *)arg1)->getWins();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasePuppet_getLosses(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BasePuppet *arg1 = (Pixy::BasePuppet *) 0 ;
  int result;
  
  SWIG_check_num_args("Pixy::BasePuppet::getLosses",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BasePuppet::getLosses",1,"Pixy::BasePuppet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BasePuppet,0))){
    SWIG_fail_ptr("BasePuppet_getLosses",1,SWIGTYPE_p_Pixy__BasePuppet);
  }
  
  result = (int)((Pixy::BasePuppet const *)arg1)->getLosses();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasePuppet_attachTalent(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BasePuppet *arg1 = (Pixy::BasePuppet *) 0 ;
  Pixy::BasePuppet::talent_t *arg2 = (Pixy::BasePuppet::talent_t *) 0 ;
  
  SWIG_check_num_args("Pixy::BasePuppet::attachTalent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BasePuppet::attachTalent",1,"Pixy::BasePuppet *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::BasePuppet::attachTalent",2,"Pixy::BasePuppet::talent_t const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BasePuppet,0))){
    SWIG_fail_ptr("BasePuppet_attachTalent",1,SWIGTYPE_p_Pixy__BasePuppet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Pixy__Talent,0))){
    SWIG_fail_ptr("BasePuppet_attachTalent",2,SWIGTYPE_p_Pixy__Talent);
  }
  
  (arg1)->attachTalent((Pixy::BasePuppet::talent_t const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasePuppet_detachTalent(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BasePuppet *arg1 = (Pixy::BasePuppet *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Pixy::BasePuppet::detachTalent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BasePuppet::detachTalent",1,"Pixy::BasePuppet *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Pixy::BasePuppet::detachTalent",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BasePuppet,0))){
    SWIG_fail_ptr("BasePuppet_detachTalent",1,SWIGTYPE_p_Pixy__BasePuppet);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->detachTalent((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasePuppet_getTalents(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BasePuppet *arg1 = (Pixy::BasePuppet *) 0 ;
  Pixy::BasePuppet::talents_t *result = 0 ;
  
  SWIG_check_num_args("Pixy::BasePuppet::getTalents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BasePuppet::getTalents",1,"Pixy::BasePuppet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BasePuppet,0))){
    SWIG_fail_ptr("BasePuppet_getTalents",1,SWIGTYPE_p_Pixy__BasePuppet);
  }
  
  result = (Pixy::BasePuppet::talents_t *) &((Pixy::BasePuppet const *)arg1)->getTalents();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__listT_Pixy__Talent_const_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasePuppet_hasTalent(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BasePuppet *arg1 = (Pixy::BasePuppet *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("Pixy::BasePuppet::hasTalent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BasePuppet::hasTalent",1,"Pixy::BasePuppet const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Pixy::BasePuppet::hasTalent",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BasePuppet,0))){
    SWIG_fail_ptr("BasePuppet_hasTalent",1,SWIGTYPE_p_Pixy__BasePuppet);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (bool)((Pixy::BasePuppet const *)arg1)->hasTalent((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasePuppet_attachDeck(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BasePuppet *arg1 = (Pixy::BasePuppet *) 0 ;
  Pixy::BasePuppet::deck_t *arg2 = (Pixy::BasePuppet::deck_t *) 0 ;
  
  SWIG_check_num_args("Pixy::BasePuppet::attachDeck",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BasePuppet::attachDeck",1,"Pixy::BasePuppet *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::BasePuppet::attachDeck",2,"Pixy::BasePuppet::deck_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BasePuppet,0))){
    SWIG_fail_ptr("BasePuppet_attachDeck",1,SWIGTYPE_p_Pixy__BasePuppet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Pixy__BaseDeck,0))){
    SWIG_fail_ptr("BasePuppet_attachDeck",2,SWIGTYPE_p_Pixy__BaseDeck);
  }
  
  (arg1)->attachDeck(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasePuppet_detachDeck(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BasePuppet *arg1 = (Pixy::BasePuppet *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Pixy::BasePuppet::detachDeck",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BasePuppet::detachDeck",1,"Pixy::BasePuppet *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Pixy::BasePuppet::detachDeck",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BasePuppet,0))){
    SWIG_fail_ptr("BasePuppet_detachDeck",1,SWIGTYPE_p_Pixy__BasePuppet);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->detachDeck((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasePuppet__setDeck(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BasePuppet *arg1 = (Pixy::BasePuppet *) 0 ;
  Pixy::BaseDeck *arg2 = (Pixy::BaseDeck *) 0 ;
  
  SWIG_check_num_args("Pixy::BasePuppet::_setDeck",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BasePuppet::_setDeck",1,"Pixy::BasePuppet *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::BasePuppet::_setDeck",2,"Pixy::BaseDeck *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BasePuppet,0))){
    SWIG_fail_ptr("BasePuppet__setDeck",1,SWIGTYPE_p_Pixy__BasePuppet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Pixy__BaseDeck,0))){
    SWIG_fail_ptr("BasePuppet__setDeck",2,SWIGTYPE_p_Pixy__BaseDeck);
  }
  
  (arg1)->_setDeck(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasePuppet_getDeck(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BasePuppet *arg1 = (Pixy::BasePuppet *) 0 ;
  Pixy::BasePuppet::deck_t *result = 0 ;
  
  SWIG_check_num_args("Pixy::BasePuppet::getDeck",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BasePuppet::getDeck",1,"Pixy::BasePuppet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BasePuppet,0))){
    SWIG_fail_ptr("BasePuppet_getDeck",1,SWIGTYPE_p_Pixy__BasePuppet);
  }
  
  result = (Pixy::BasePuppet::deck_t *)(arg1)->getDeck();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__BaseDeck,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasePuppet_hasDeck(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BasePuppet *arg1 = (Pixy::BasePuppet *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("Pixy::BasePuppet::hasDeck",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BasePuppet::hasDeck",1,"Pixy::BasePuppet const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Pixy::BasePuppet::hasDeck",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BasePuppet,0))){
    SWIG_fail_ptr("BasePuppet_hasDeck",1,SWIGTYPE_p_Pixy__BasePuppet);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (bool)((Pixy::BasePuppet const *)arg1)->hasDeck((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasePuppet_nrDecks(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BasePuppet *arg1 = (Pixy::BasePuppet *) 0 ;
  int result;
  
  SWIG_check_num_args("Pixy::BasePuppet::nrDecks",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BasePuppet::nrDecks",1,"Pixy::BasePuppet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BasePuppet,0))){
    SWIG_fail_ptr("BasePuppet_nrDecks",1,SWIGTYPE_p_Pixy__BasePuppet);
  }
  
  result = (int)((Pixy::BasePuppet const *)arg1)->nrDecks();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasePuppet_attachUnit(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BasePuppet *arg1 = (Pixy::BasePuppet *) 0 ;
  Pixy::BasePuppet::unit_t *arg2 = (Pixy::BasePuppet::unit_t *) 0 ;
  
  SWIG_check_num_args("Pixy::BasePuppet::attachUnit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BasePuppet::attachUnit",1,"Pixy::BasePuppet *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::BasePuppet::attachUnit",2,"Pixy::BasePuppet::unit_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BasePuppet,0))){
    SWIG_fail_ptr("BasePuppet_attachUnit",1,SWIGTYPE_p_Pixy__BasePuppet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Pixy__Unit,0))){
    SWIG_fail_ptr("BasePuppet_attachUnit",2,SWIGTYPE_p_Pixy__Unit);
  }
  
  (arg1)->attachUnit(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasePuppet_detachUnit__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BasePuppet *arg1 = (Pixy::BasePuppet *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("Pixy::BasePuppet::detachUnit",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BasePuppet::detachUnit",1,"Pixy::BasePuppet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::BasePuppet::detachUnit",2,"int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Pixy::BasePuppet::detachUnit",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BasePuppet,0))){
    SWIG_fail_ptr("BasePuppet_detachUnit",1,SWIGTYPE_p_Pixy__BasePuppet);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->detachUnit(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasePuppet_detachUnit__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BasePuppet *arg1 = (Pixy::BasePuppet *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Pixy::BasePuppet::detachUnit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BasePuppet::detachUnit",1,"Pixy::BasePuppet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::BasePuppet::detachUnit",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BasePuppet,0))){
    SWIG_fail_ptr("BasePuppet_detachUnit",1,SWIGTYPE_p_Pixy__BasePuppet);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->detachUnit(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasePuppet_detachUnit(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__BasePuppet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BasePuppet_detachUnit__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__BasePuppet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_BasePuppet_detachUnit__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'BasePuppet_detachUnit'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Pixy::BasePuppet::detachUnit(int,bool)\n"
    "    Pixy::BasePuppet::detachUnit(int)\n");
  lua_error(L);return 0;
}


static int _wrap_BasePuppet_getUnit(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BasePuppet *arg1 = (Pixy::BasePuppet *) 0 ;
  int arg2 ;
  Pixy::BasePuppet::unit_t *result = 0 ;
  
  SWIG_check_num_args("Pixy::BasePuppet::getUnit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BasePuppet::getUnit",1,"Pixy::BasePuppet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::BasePuppet::getUnit",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BasePuppet,0))){
    SWIG_fail_ptr("BasePuppet_getUnit",1,SWIGTYPE_p_Pixy__BasePuppet);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (Pixy::BasePuppet::unit_t *)(arg1)->getUnit(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__Unit,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasePuppet_hasUnitWithName(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BasePuppet *arg1 = (Pixy::BasePuppet *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("Pixy::BasePuppet::hasUnitWithName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BasePuppet::hasUnitWithName",1,"Pixy::BasePuppet const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Pixy::BasePuppet::hasUnitWithName",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BasePuppet,0))){
    SWIG_fail_ptr("BasePuppet_hasUnitWithName",1,SWIGTYPE_p_Pixy__BasePuppet);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (bool)((Pixy::BasePuppet const *)arg1)->hasUnitWithName((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BasePuppet(void *obj) {
Pixy::BasePuppet *arg1 = (Pixy::BasePuppet *) obj;
delete arg1;
}
static swig_lua_method swig_Pixy_BasePuppet_methods[] = {
    {"setExperience", _wrap_BasePuppet_setExperience}, 
    {"setLevel", _wrap_BasePuppet_setLevel}, 
    {"setIntelligence", _wrap_BasePuppet_setIntelligence}, 
    {"setVitality", _wrap_BasePuppet_setVitality}, 
    {"setWP", _wrap_BasePuppet_setWP}, 
    {"setChannels", _wrap_BasePuppet_setChannels}, 
    {"setWins", _wrap_BasePuppet_setWins}, 
    {"setLosses", _wrap_BasePuppet_setLosses}, 
    {"getExperience", _wrap_BasePuppet_getExperience}, 
    {"getLevel", _wrap_BasePuppet_getLevel}, 
    {"getIntelligence", _wrap_BasePuppet_getIntelligence}, 
    {"getVitality", _wrap_BasePuppet_getVitality}, 
    {"getWP", _wrap_BasePuppet_getWP}, 
    {"getChannels", _wrap_BasePuppet_getChannels}, 
    {"getWins", _wrap_BasePuppet_getWins}, 
    {"getLosses", _wrap_BasePuppet_getLosses}, 
    {"attachTalent", _wrap_BasePuppet_attachTalent}, 
    {"detachTalent", _wrap_BasePuppet_detachTalent}, 
    {"getTalents", _wrap_BasePuppet_getTalents}, 
    {"hasTalent", _wrap_BasePuppet_hasTalent}, 
    {"attachDeck", _wrap_BasePuppet_attachDeck}, 
    {"detachDeck", _wrap_BasePuppet_detachDeck}, 
    {"_setDeck", _wrap_BasePuppet__setDeck}, 
    {"getDeck", _wrap_BasePuppet_getDeck}, 
    {"hasDeck", _wrap_BasePuppet_hasDeck}, 
    {"nrDecks", _wrap_BasePuppet_nrDecks}, 
    {"attachUnit", _wrap_BasePuppet_attachUnit}, 
    {"detachUnit", _wrap_BasePuppet_detachUnit}, 
    {"getUnit", _wrap_BasePuppet_getUnit}, 
    {"hasUnitWithName", _wrap_BasePuppet_hasUnitWithName}, 
    {0,0}
};
static swig_lua_attribute swig_Pixy_BasePuppet_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Pixy_BasePuppet_bases[] = {0};
static const char *swig_Pixy_BasePuppet_base_names[] = {0};
static swig_lua_class _wrap_class_Pixy_BasePuppet = { "BasePuppet", &SWIGTYPE_p_Pixy__BasePuppet,0, swig_delete_BasePuppet, swig_Pixy_BasePuppet_methods, swig_Pixy_BasePuppet_attributes, swig_Pixy_BasePuppet_bases, swig_Pixy_BasePuppet_base_names };

static int _wrap_new_BaseSpell__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseSpell *result = 0 ;
  
  SWIG_check_num_args("Pixy::BaseSpell::BaseSpell",0,0)
  result = (Pixy::BaseSpell *)new Pixy::BaseSpell();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__BaseSpell,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BaseSpell__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseSpell *arg1 = 0 ;
  Pixy::BaseSpell *result = 0 ;
  
  SWIG_check_num_args("Pixy::BaseSpell::BaseSpell",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Pixy::BaseSpell::BaseSpell",1,"Pixy::BaseSpell const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseSpell,0))){
    SWIG_fail_ptr("new_BaseSpell",1,SWIGTYPE_p_Pixy__BaseSpell);
  }
  
  result = (Pixy::BaseSpell *)new Pixy::BaseSpell((Pixy::BaseSpell const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__BaseSpell,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BaseSpell(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BaseSpell__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__BaseSpell, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_BaseSpell__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_BaseSpell'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Pixy::BaseSpell::BaseSpell()\n"
    "    Pixy::BaseSpell::BaseSpell(Pixy::BaseSpell const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BaseSpell__setRace(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseSpell *arg1 = (Pixy::BaseSpell *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Pixy::BaseSpell::_setRace",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseSpell::_setRace",1,"Pixy::BaseSpell *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::BaseSpell::_setRace",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseSpell,0))){
    SWIG_fail_ptr("BaseSpell__setRace",1,SWIGTYPE_p_Pixy__BaseSpell);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->_setRace(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpell_setDuration(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseSpell *arg1 = (Pixy::BaseSpell *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Pixy::BaseSpell::setDuration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseSpell::setDuration",1,"Pixy::BaseSpell *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::BaseSpell::setDuration",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseSpell,0))){
    SWIG_fail_ptr("BaseSpell_setDuration",1,SWIGTYPE_p_Pixy__BaseSpell);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setDuration(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpell_setCostWP(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseSpell *arg1 = (Pixy::BaseSpell *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Pixy::BaseSpell::setCostWP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseSpell::setCostWP",1,"Pixy::BaseSpell *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::BaseSpell::setCostWP",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseSpell,0))){
    SWIG_fail_ptr("BaseSpell_setCostWP",1,SWIGTYPE_p_Pixy__BaseSpell);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setCostWP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpell_setCostHP(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseSpell *arg1 = (Pixy::BaseSpell *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Pixy::BaseSpell::setCostHP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseSpell::setCostHP",1,"Pixy::BaseSpell *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::BaseSpell::setCostHP",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseSpell,0))){
    SWIG_fail_ptr("BaseSpell_setCostHP",1,SWIGTYPE_p_Pixy__BaseSpell);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setCostHP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpell_setCostChannels(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseSpell *arg1 = (Pixy::BaseSpell *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Pixy::BaseSpell::setCostChannels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseSpell::setCostChannels",1,"Pixy::BaseSpell *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::BaseSpell::setCostChannels",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseSpell,0))){
    SWIG_fail_ptr("BaseSpell_setCostChannels",1,SWIGTYPE_p_Pixy__BaseSpell);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setCostChannels(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpell_setAspect(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseSpell *arg1 = (Pixy::BaseSpell *) 0 ;
  char arg2 ;
  
  SWIG_check_num_args("Pixy::BaseSpell::setAspect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseSpell::setAspect",1,"Pixy::BaseSpell *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Pixy::BaseSpell::setAspect",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseSpell,0))){
    SWIG_fail_ptr("BaseSpell_setAspect",1,SWIGTYPE_p_Pixy__BaseSpell);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  (arg1)->setAspect(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpell_setPhase(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseSpell *arg1 = (Pixy::BaseSpell *) 0 ;
  char arg2 ;
  
  SWIG_check_num_args("Pixy::BaseSpell::setPhase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseSpell::setPhase",1,"Pixy::BaseSpell *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Pixy::BaseSpell::setPhase",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseSpell,0))){
    SWIG_fail_ptr("BaseSpell_setPhase",1,SWIGTYPE_p_Pixy__BaseSpell);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  (arg1)->setPhase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpell_setRequiresTarget(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseSpell *arg1 = (Pixy::BaseSpell *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Pixy::BaseSpell::setRequiresTarget",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseSpell::setRequiresTarget",1,"Pixy::BaseSpell *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Pixy::BaseSpell::setRequiresTarget",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseSpell,0))){
    SWIG_fail_ptr("BaseSpell_setRequiresTarget",1,SWIGTYPE_p_Pixy__BaseSpell);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setRequiresTarget(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpell_setRequiresEnemyTarget(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseSpell *arg1 = (Pixy::BaseSpell *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Pixy::BaseSpell::setRequiresEnemyTarget",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseSpell::setRequiresEnemyTarget",1,"Pixy::BaseSpell *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Pixy::BaseSpell::setRequiresEnemyTarget",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseSpell,0))){
    SWIG_fail_ptr("BaseSpell_setRequiresEnemyTarget",1,SWIGTYPE_p_Pixy__BaseSpell);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setRequiresEnemyTarget(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpell_setDispellable(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseSpell *arg1 = (Pixy::BaseSpell *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Pixy::BaseSpell::setDispellable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseSpell::setDispellable",1,"Pixy::BaseSpell *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Pixy::BaseSpell::setDispellable",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseSpell,0))){
    SWIG_fail_ptr("BaseSpell_setDispellable",1,SWIGTYPE_p_Pixy__BaseSpell);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setDispellable(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpell_setDescription(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseSpell *arg1 = (Pixy::BaseSpell *) 0 ;
  std::string arg2 ;
  
  SWIG_check_num_args("Pixy::BaseSpell::setDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseSpell::setDescription",1,"Pixy::BaseSpell *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Pixy::BaseSpell::setDescription",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseSpell,0))){
    SWIG_fail_ptr("BaseSpell_setDescription",1,SWIGTYPE_p_Pixy__BaseSpell);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  (arg1)->setDescription(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpell_getRace(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseSpell *arg1 = (Pixy::BaseSpell *) 0 ;
  int result;
  
  SWIG_check_num_args("Pixy::BaseSpell::getRace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseSpell::getRace",1,"Pixy::BaseSpell const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseSpell,0))){
    SWIG_fail_ptr("BaseSpell_getRace",1,SWIGTYPE_p_Pixy__BaseSpell);
  }
  
  result = (int)((Pixy::BaseSpell const *)arg1)->getRace();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpell_getDescription(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseSpell *arg1 = (Pixy::BaseSpell *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("Pixy::BaseSpell::getDescription",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseSpell::getDescription",1,"Pixy::BaseSpell const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseSpell,0))){
    SWIG_fail_ptr("BaseSpell_getDescription",1,SWIGTYPE_p_Pixy__BaseSpell);
  }
  
  result = (std::string *) &((Pixy::BaseSpell const *)arg1)->getDescription();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpell_getCostWP(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseSpell *arg1 = (Pixy::BaseSpell *) 0 ;
  int result;
  
  SWIG_check_num_args("Pixy::BaseSpell::getCostWP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseSpell::getCostWP",1,"Pixy::BaseSpell const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseSpell,0))){
    SWIG_fail_ptr("BaseSpell_getCostWP",1,SWIGTYPE_p_Pixy__BaseSpell);
  }
  
  result = (int)((Pixy::BaseSpell const *)arg1)->getCostWP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpell_getCostHP(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseSpell *arg1 = (Pixy::BaseSpell *) 0 ;
  int result;
  
  SWIG_check_num_args("Pixy::BaseSpell::getCostHP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseSpell::getCostHP",1,"Pixy::BaseSpell const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseSpell,0))){
    SWIG_fail_ptr("BaseSpell_getCostHP",1,SWIGTYPE_p_Pixy__BaseSpell);
  }
  
  result = (int)((Pixy::BaseSpell const *)arg1)->getCostHP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpell_getCostChannels(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseSpell *arg1 = (Pixy::BaseSpell *) 0 ;
  int result;
  
  SWIG_check_num_args("Pixy::BaseSpell::getCostChannels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseSpell::getCostChannels",1,"Pixy::BaseSpell const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseSpell,0))){
    SWIG_fail_ptr("BaseSpell_getCostChannels",1,SWIGTYPE_p_Pixy__BaseSpell);
  }
  
  result = (int)((Pixy::BaseSpell const *)arg1)->getCostChannels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpell_getDuration(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseSpell *arg1 = (Pixy::BaseSpell *) 0 ;
  int result;
  
  SWIG_check_num_args("Pixy::BaseSpell::getDuration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseSpell::getDuration",1,"Pixy::BaseSpell const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseSpell,0))){
    SWIG_fail_ptr("BaseSpell_getDuration",1,SWIGTYPE_p_Pixy__BaseSpell);
  }
  
  result = (int)((Pixy::BaseSpell const *)arg1)->getDuration();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpell_getAspect(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseSpell *arg1 = (Pixy::BaseSpell *) 0 ;
  char result;
  
  SWIG_check_num_args("Pixy::BaseSpell::getAspect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseSpell::getAspect",1,"Pixy::BaseSpell const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseSpell,0))){
    SWIG_fail_ptr("BaseSpell_getAspect",1,SWIGTYPE_p_Pixy__BaseSpell);
  }
  
  result = (char)((Pixy::BaseSpell const *)arg1)->getAspect();
  lua_pushfstring(L,"%c",result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpell_getPhase(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseSpell *arg1 = (Pixy::BaseSpell *) 0 ;
  char result;
  
  SWIG_check_num_args("Pixy::BaseSpell::getPhase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseSpell::getPhase",1,"Pixy::BaseSpell const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseSpell,0))){
    SWIG_fail_ptr("BaseSpell_getPhase",1,SWIGTYPE_p_Pixy__BaseSpell);
  }
  
  result = (char)((Pixy::BaseSpell const *)arg1)->getPhase();
  lua_pushfstring(L,"%c",result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpell_isDispellable(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseSpell *arg1 = (Pixy::BaseSpell *) 0 ;
  bool result;
  
  SWIG_check_num_args("Pixy::BaseSpell::isDispellable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseSpell::isDispellable",1,"Pixy::BaseSpell const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseSpell,0))){
    SWIG_fail_ptr("BaseSpell_isDispellable",1,SWIGTYPE_p_Pixy__BaseSpell);
  }
  
  result = (bool)((Pixy::BaseSpell const *)arg1)->isDispellable();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpell_requiresTarget(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseSpell *arg1 = (Pixy::BaseSpell *) 0 ;
  bool result;
  
  SWIG_check_num_args("Pixy::BaseSpell::requiresTarget",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseSpell::requiresTarget",1,"Pixy::BaseSpell const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseSpell,0))){
    SWIG_fail_ptr("BaseSpell_requiresTarget",1,SWIGTYPE_p_Pixy__BaseSpell);
  }
  
  result = (bool)((Pixy::BaseSpell const *)arg1)->requiresTarget();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpell_requiresEnemyTarget(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseSpell *arg1 = (Pixy::BaseSpell *) 0 ;
  bool result;
  
  SWIG_check_num_args("Pixy::BaseSpell::requiresEnemyTarget",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseSpell::requiresEnemyTarget",1,"Pixy::BaseSpell const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseSpell,0))){
    SWIG_fail_ptr("BaseSpell_requiresEnemyTarget",1,SWIGTYPE_p_Pixy__BaseSpell);
  }
  
  result = (bool)((Pixy::BaseSpell const *)arg1)->requiresEnemyTarget();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpell_setCaster(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseSpell *arg1 = (Pixy::BaseSpell *) 0 ;
  Pixy::BaseSpell::owner_t *arg2 = (Pixy::BaseSpell::owner_t *) 0 ;
  
  SWIG_check_num_args("Pixy::BaseSpell::setCaster",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseSpell::setCaster",1,"Pixy::BaseSpell *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::BaseSpell::setCaster",2,"Pixy::BaseSpell::owner_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseSpell,0))){
    SWIG_fail_ptr("BaseSpell_setCaster",1,SWIGTYPE_p_Pixy__BaseSpell);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Pixy__BaseEntity,0))){
    SWIG_fail_ptr("BaseSpell_setCaster",2,SWIGTYPE_p_Pixy__BaseEntity);
  }
  
  (arg1)->setCaster(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpell_setTarget(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseSpell *arg1 = (Pixy::BaseSpell *) 0 ;
  Pixy::BaseSpell::owner_t *arg2 = (Pixy::BaseSpell::owner_t *) 0 ;
  
  SWIG_check_num_args("Pixy::BaseSpell::setTarget",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseSpell::setTarget",1,"Pixy::BaseSpell *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::BaseSpell::setTarget",2,"Pixy::BaseSpell::owner_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseSpell,0))){
    SWIG_fail_ptr("BaseSpell_setTarget",1,SWIGTYPE_p_Pixy__BaseSpell);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Pixy__BaseEntity,0))){
    SWIG_fail_ptr("BaseSpell_setTarget",2,SWIGTYPE_p_Pixy__BaseEntity);
  }
  
  (arg1)->setTarget(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpell_getCaster(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseSpell *arg1 = (Pixy::BaseSpell *) 0 ;
  Pixy::BaseSpell::owner_t *result = 0 ;
  
  SWIG_check_num_args("Pixy::BaseSpell::getCaster",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseSpell::getCaster",1,"Pixy::BaseSpell const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseSpell,0))){
    SWIG_fail_ptr("BaseSpell_getCaster",1,SWIGTYPE_p_Pixy__BaseSpell);
  }
  
  result = (Pixy::BaseSpell::owner_t *)((Pixy::BaseSpell const *)arg1)->getCaster();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__BaseEntity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpell_getTarget(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseSpell *arg1 = (Pixy::BaseSpell *) 0 ;
  Pixy::BaseSpell::owner_t *result = 0 ;
  
  SWIG_check_num_args("Pixy::BaseSpell::getTarget",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseSpell::getTarget",1,"Pixy::BaseSpell const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseSpell,0))){
    SWIG_fail_ptr("BaseSpell_getTarget",1,SWIGTYPE_p_Pixy__BaseSpell);
  }
  
  result = (Pixy::BaseSpell::owner_t *)((Pixy::BaseSpell const *)arg1)->getTarget();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__BaseEntity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpell_setExpired(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseSpell *arg1 = (Pixy::BaseSpell *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Pixy::BaseSpell::setExpired",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseSpell::setExpired",1,"Pixy::BaseSpell *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Pixy::BaseSpell::setExpired",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseSpell,0))){
    SWIG_fail_ptr("BaseSpell_setExpired",1,SWIGTYPE_p_Pixy__BaseSpell);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setExpired(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpell_hasExpired(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseSpell *arg1 = (Pixy::BaseSpell *) 0 ;
  bool result;
  
  SWIG_check_num_args("Pixy::BaseSpell::hasExpired",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseSpell::hasExpired",1,"Pixy::BaseSpell const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseSpell,0))){
    SWIG_fail_ptr("BaseSpell_hasExpired",1,SWIGTYPE_p_Pixy__BaseSpell);
  }
  
  result = (bool)((Pixy::BaseSpell const *)arg1)->hasExpired();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpell_dump(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseSpell *arg1 = (Pixy::BaseSpell *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Pixy::BaseSpell::dump",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseSpell::dump",1,"Pixy::BaseSpell const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseSpell,0))){
    SWIG_fail_ptr("BaseSpell_dump",1,SWIGTYPE_p_Pixy__BaseSpell);
  }
  
  result = ((Pixy::BaseSpell const *)arg1)->dump();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BaseSpell(void *obj) {
Pixy::BaseSpell *arg1 = (Pixy::BaseSpell *) obj;
delete arg1;
}
static swig_lua_method swig_Pixy_BaseSpell_methods[] = {
    {"_setRace", _wrap_BaseSpell__setRace}, 
    {"setDuration", _wrap_BaseSpell_setDuration}, 
    {"setCostWP", _wrap_BaseSpell_setCostWP}, 
    {"setCostHP", _wrap_BaseSpell_setCostHP}, 
    {"setCostChannels", _wrap_BaseSpell_setCostChannels}, 
    {"setAspect", _wrap_BaseSpell_setAspect}, 
    {"setPhase", _wrap_BaseSpell_setPhase}, 
    {"setRequiresTarget", _wrap_BaseSpell_setRequiresTarget}, 
    {"setRequiresEnemyTarget", _wrap_BaseSpell_setRequiresEnemyTarget}, 
    {"setDispellable", _wrap_BaseSpell_setDispellable}, 
    {"setDescription", _wrap_BaseSpell_setDescription}, 
    {"getRace", _wrap_BaseSpell_getRace}, 
    {"getDescription", _wrap_BaseSpell_getDescription}, 
    {"getCostWP", _wrap_BaseSpell_getCostWP}, 
    {"getCostHP", _wrap_BaseSpell_getCostHP}, 
    {"getCostChannels", _wrap_BaseSpell_getCostChannels}, 
    {"getDuration", _wrap_BaseSpell_getDuration}, 
    {"getAspect", _wrap_BaseSpell_getAspect}, 
    {"getPhase", _wrap_BaseSpell_getPhase}, 
    {"isDispellable", _wrap_BaseSpell_isDispellable}, 
    {"requiresTarget", _wrap_BaseSpell_requiresTarget}, 
    {"requiresEnemyTarget", _wrap_BaseSpell_requiresEnemyTarget}, 
    {"setCaster", _wrap_BaseSpell_setCaster}, 
    {"setTarget", _wrap_BaseSpell_setTarget}, 
    {"getCaster", _wrap_BaseSpell_getCaster}, 
    {"getTarget", _wrap_BaseSpell_getTarget}, 
    {"setExpired", _wrap_BaseSpell_setExpired}, 
    {"hasExpired", _wrap_BaseSpell_hasExpired}, 
    {"dump", _wrap_BaseSpell_dump}, 
    {0,0}
};
static swig_lua_attribute swig_Pixy_BaseSpell_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Pixy_BaseSpell_bases[] = {0,0,0};
static const char *swig_Pixy_BaseSpell_base_names[] = {"Pixy::Identifiable *","Pixy::Loggable *",0};
static swig_lua_class _wrap_class_Pixy_BaseSpell = { "BaseSpell", &SWIGTYPE_p_Pixy__BaseSpell,_wrap_new_BaseSpell, swig_delete_BaseSpell, swig_Pixy_BaseSpell_methods, swig_Pixy_BaseSpell_attributes, swig_Pixy_BaseSpell_bases, swig_Pixy_BaseSpell_base_names };

static int _wrap_BaseUnit_attack__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseUnit *arg1 = (Pixy::BaseUnit *) 0 ;
  Pixy::Puppet *arg2 = (Pixy::Puppet *) 0 ;
  bool result;
  
  SWIG_check_num_args("Pixy::BaseUnit::attack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseUnit::attack",1,"Pixy::BaseUnit *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::BaseUnit::attack",2,"Pixy::Puppet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseUnit,0))){
    SWIG_fail_ptr("BaseUnit_attack",1,SWIGTYPE_p_Pixy__BaseUnit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Pixy__Puppet,0))){
    SWIG_fail_ptr("BaseUnit_attack",2,SWIGTYPE_p_Pixy__Puppet);
  }
  
  result = (bool)(arg1)->attack(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseUnit_attack__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseUnit *arg1 = (Pixy::BaseUnit *) 0 ;
  Pixy::Unit *arg2 = (Pixy::Unit *) 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("Pixy::BaseUnit::attack",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseUnit::attack",1,"Pixy::BaseUnit *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::BaseUnit::attack",2,"Pixy::Unit *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Pixy::BaseUnit::attack",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseUnit,0))){
    SWIG_fail_ptr("BaseUnit_attack",1,SWIGTYPE_p_Pixy__BaseUnit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Pixy__Unit,0))){
    SWIG_fail_ptr("BaseUnit_attack",2,SWIGTYPE_p_Pixy__Unit);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)(arg1)->attack(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseUnit_attack__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseUnit *arg1 = (Pixy::BaseUnit *) 0 ;
  Pixy::Unit *arg2 = (Pixy::Unit *) 0 ;
  bool result;
  
  SWIG_check_num_args("Pixy::BaseUnit::attack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseUnit::attack",1,"Pixy::BaseUnit *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::BaseUnit::attack",2,"Pixy::Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseUnit,0))){
    SWIG_fail_ptr("BaseUnit_attack",1,SWIGTYPE_p_Pixy__BaseUnit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Pixy__Unit,0))){
    SWIG_fail_ptr("BaseUnit_attack",2,SWIGTYPE_p_Pixy__Unit);
  }
  
  result = (bool)(arg1)->attack(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseUnit_attack(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__BaseUnit, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Pixy__Puppet, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BaseUnit_attack__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__BaseUnit, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Pixy__Unit, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BaseUnit_attack__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__BaseUnit, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Pixy__Unit, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_BaseUnit_attack__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'BaseUnit_attack'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Pixy::BaseUnit::attack(Pixy::Puppet *)\n"
    "    Pixy::BaseUnit::attack(Pixy::Unit *,bool)\n"
    "    Pixy::BaseUnit::attack(Pixy::Unit *)\n");
  lua_error(L);return 0;
}


static int _wrap_BaseUnit_rest(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseUnit *arg1 = (Pixy::BaseUnit *) 0 ;
  
  SWIG_check_num_args("Pixy::BaseUnit::rest",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseUnit::rest",1,"Pixy::BaseUnit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseUnit,0))){
    SWIG_fail_ptr("BaseUnit_rest",1,SWIGTYPE_p_Pixy__BaseUnit);
  }
  
  (arg1)->rest();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseUnit_getUp(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseUnit *arg1 = (Pixy::BaseUnit *) 0 ;
  
  SWIG_check_num_args("Pixy::BaseUnit::getUp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseUnit::getUp",1,"Pixy::BaseUnit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseUnit,0))){
    SWIG_fail_ptr("BaseUnit_getUp",1,SWIGTYPE_p_Pixy__BaseUnit);
  }
  
  (arg1)->getUp();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseUnit_reset(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseUnit *arg1 = (Pixy::BaseUnit *) 0 ;
  
  SWIG_check_num_args("Pixy::BaseUnit::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseUnit::reset",1,"Pixy::BaseUnit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseUnit,0))){
    SWIG_fail_ptr("BaseUnit_reset",1,SWIGTYPE_p_Pixy__BaseUnit);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseUnit_hasSummoningSickness(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseUnit *arg1 = (Pixy::BaseUnit *) 0 ;
  bool result;
  
  SWIG_check_num_args("Pixy::BaseUnit::hasSummoningSickness",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseUnit::hasSummoningSickness",1,"Pixy::BaseUnit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseUnit,0))){
    SWIG_fail_ptr("BaseUnit_hasSummoningSickness",1,SWIGTYPE_p_Pixy__BaseUnit);
  }
  
  result = (bool)((Pixy::BaseUnit const *)arg1)->hasSummoningSickness();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseUnit_canAttack(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseUnit *arg1 = (Pixy::BaseUnit *) 0 ;
  bool result;
  
  SWIG_check_num_args("Pixy::BaseUnit::canAttack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseUnit::canAttack",1,"Pixy::BaseUnit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseUnit,0))){
    SWIG_fail_ptr("BaseUnit_canAttack",1,SWIGTYPE_p_Pixy__BaseUnit);
  }
  
  result = (bool)((Pixy::BaseUnit const *)arg1)->canAttack();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseUnit_isResting(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseUnit *arg1 = (Pixy::BaseUnit *) 0 ;
  bool result;
  
  SWIG_check_num_args("Pixy::BaseUnit::isResting",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseUnit::isResting",1,"Pixy::BaseUnit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseUnit,0))){
    SWIG_fail_ptr("BaseUnit_isResting",1,SWIGTYPE_p_Pixy__BaseUnit);
  }
  
  result = (bool)((Pixy::BaseUnit const *)arg1)->isResting();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseUnit_isCharging(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseUnit *arg1 = (Pixy::BaseUnit *) 0 ;
  bool result;
  
  SWIG_check_num_args("Pixy::BaseUnit::isCharging",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseUnit::isCharging",1,"Pixy::BaseUnit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseUnit,0))){
    SWIG_fail_ptr("BaseUnit_isCharging",1,SWIGTYPE_p_Pixy__BaseUnit);
  }
  
  result = (bool)((Pixy::BaseUnit const *)arg1)->isCharging();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseUnit_isAttacking(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseUnit *arg1 = (Pixy::BaseUnit *) 0 ;
  bool result;
  
  SWIG_check_num_args("Pixy::BaseUnit::isAttacking",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseUnit::isAttacking",1,"Pixy::BaseUnit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseUnit,0))){
    SWIG_fail_ptr("BaseUnit_isAttacking",1,SWIGTYPE_p_Pixy__BaseUnit);
  }
  
  result = (bool)((Pixy::BaseUnit const *)arg1)->isAttacking();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseUnit_isBlocking(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseUnit *arg1 = (Pixy::BaseUnit *) 0 ;
  bool result;
  
  SWIG_check_num_args("Pixy::BaseUnit::isBlocking",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseUnit::isBlocking",1,"Pixy::BaseUnit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseUnit,0))){
    SWIG_fail_ptr("BaseUnit_isBlocking",1,SWIGTYPE_p_Pixy__BaseUnit);
  }
  
  result = (bool)((Pixy::BaseUnit const *)arg1)->isBlocking();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseUnit_isReady(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseUnit *arg1 = (Pixy::BaseUnit *) 0 ;
  bool result;
  
  SWIG_check_num_args("Pixy::BaseUnit::isReady",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseUnit::isReady",1,"Pixy::BaseUnit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseUnit,0))){
    SWIG_fail_ptr("BaseUnit_isReady",1,SWIGTYPE_p_Pixy__BaseUnit);
  }
  
  result = (bool)((Pixy::BaseUnit const *)arg1)->isReady();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseUnit_isFlying(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseUnit *arg1 = (Pixy::BaseUnit *) 0 ;
  bool result;
  
  SWIG_check_num_args("Pixy::BaseUnit::isFlying",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseUnit::isFlying",1,"Pixy::BaseUnit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseUnit,0))){
    SWIG_fail_ptr("BaseUnit_isFlying",1,SWIGTYPE_p_Pixy__BaseUnit);
  }
  
  result = (bool)((Pixy::BaseUnit const *)arg1)->isFlying();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseUnit_isTrampling(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseUnit *arg1 = (Pixy::BaseUnit *) 0 ;
  bool result;
  
  SWIG_check_num_args("Pixy::BaseUnit::isTrampling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseUnit::isTrampling",1,"Pixy::BaseUnit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseUnit,0))){
    SWIG_fail_ptr("BaseUnit_isTrampling",1,SWIGTYPE_p_Pixy__BaseUnit);
  }
  
  result = (bool)((Pixy::BaseUnit const *)arg1)->isTrampling();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseUnit_isUnblockable(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseUnit *arg1 = (Pixy::BaseUnit *) 0 ;
  bool result;
  
  SWIG_check_num_args("Pixy::BaseUnit::isUnblockable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseUnit::isUnblockable",1,"Pixy::BaseUnit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseUnit,0))){
    SWIG_fail_ptr("BaseUnit_isUnblockable",1,SWIGTYPE_p_Pixy__BaseUnit);
  }
  
  result = (bool)((Pixy::BaseUnit const *)arg1)->isUnblockable();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseUnit_isRestless(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseUnit *arg1 = (Pixy::BaseUnit *) 0 ;
  bool result;
  
  SWIG_check_num_args("Pixy::BaseUnit::isRestless",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseUnit::isRestless",1,"Pixy::BaseUnit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseUnit,0))){
    SWIG_fail_ptr("BaseUnit_isRestless",1,SWIGTYPE_p_Pixy__BaseUnit);
  }
  
  result = (bool)((Pixy::BaseUnit const *)arg1)->isRestless();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseUnit_hasFirstStrike(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseUnit *arg1 = (Pixy::BaseUnit *) 0 ;
  bool result;
  
  SWIG_check_num_args("Pixy::BaseUnit::hasFirstStrike",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseUnit::hasFirstStrike",1,"Pixy::BaseUnit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseUnit,0))){
    SWIG_fail_ptr("BaseUnit_hasFirstStrike",1,SWIGTYPE_p_Pixy__BaseUnit);
  }
  
  result = (bool)((Pixy::BaseUnit const *)arg1)->hasFirstStrike();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseUnit_hasLifetap(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseUnit *arg1 = (Pixy::BaseUnit *) 0 ;
  bool result;
  
  SWIG_check_num_args("Pixy::BaseUnit::hasLifetap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseUnit::hasLifetap",1,"Pixy::BaseUnit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseUnit,0))){
    SWIG_fail_ptr("BaseUnit_hasLifetap",1,SWIGTYPE_p_Pixy__BaseUnit);
  }
  
  result = (bool)((Pixy::BaseUnit const *)arg1)->hasLifetap();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseUnit_setIsFlying(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseUnit *arg1 = (Pixy::BaseUnit *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Pixy::BaseUnit::setIsFlying",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseUnit::setIsFlying",1,"Pixy::BaseUnit *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Pixy::BaseUnit::setIsFlying",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseUnit,0))){
    SWIG_fail_ptr("BaseUnit_setIsFlying",1,SWIGTYPE_p_Pixy__BaseUnit);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setIsFlying(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseUnit_setIsTrampling(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseUnit *arg1 = (Pixy::BaseUnit *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Pixy::BaseUnit::setIsTrampling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseUnit::setIsTrampling",1,"Pixy::BaseUnit *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Pixy::BaseUnit::setIsTrampling",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseUnit,0))){
    SWIG_fail_ptr("BaseUnit_setIsTrampling",1,SWIGTYPE_p_Pixy__BaseUnit);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setIsTrampling(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseUnit_setIsUnblockable(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseUnit *arg1 = (Pixy::BaseUnit *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Pixy::BaseUnit::setIsUnblockable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseUnit::setIsUnblockable",1,"Pixy::BaseUnit *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Pixy::BaseUnit::setIsUnblockable",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseUnit,0))){
    SWIG_fail_ptr("BaseUnit_setIsUnblockable",1,SWIGTYPE_p_Pixy__BaseUnit);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setIsUnblockable(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseUnit_setIsRestless(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseUnit *arg1 = (Pixy::BaseUnit *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Pixy::BaseUnit::setIsRestless",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseUnit::setIsRestless",1,"Pixy::BaseUnit *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Pixy::BaseUnit::setIsRestless",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseUnit,0))){
    SWIG_fail_ptr("BaseUnit_setIsRestless",1,SWIGTYPE_p_Pixy__BaseUnit);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setIsRestless(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseUnit_setHasFirstStrike(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseUnit *arg1 = (Pixy::BaseUnit *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Pixy::BaseUnit::setHasFirstStrike",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseUnit::setHasFirstStrike",1,"Pixy::BaseUnit *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Pixy::BaseUnit::setHasFirstStrike",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseUnit,0))){
    SWIG_fail_ptr("BaseUnit_setHasFirstStrike",1,SWIGTYPE_p_Pixy__BaseUnit);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setHasFirstStrike(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseUnit_setHasLifetap(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseUnit *arg1 = (Pixy::BaseUnit *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Pixy::BaseUnit::setHasLifetap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseUnit::setHasLifetap",1,"Pixy::BaseUnit *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Pixy::BaseUnit::setHasLifetap",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseUnit,0))){
    SWIG_fail_ptr("BaseUnit_setHasLifetap",1,SWIGTYPE_p_Pixy__BaseUnit);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setHasLifetap(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseUnit_setAP(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseUnit *arg1 = (Pixy::BaseUnit *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Pixy::BaseUnit::setAP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseUnit::setAP",1,"Pixy::BaseUnit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::BaseUnit::setAP",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseUnit,0))){
    SWIG_fail_ptr("BaseUnit_setAP",1,SWIGTYPE_p_Pixy__BaseUnit);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setAP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseUnit_getAP(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseUnit *arg1 = (Pixy::BaseUnit *) 0 ;
  int result;
  
  SWIG_check_num_args("Pixy::BaseUnit::getAP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseUnit::getAP",1,"Pixy::BaseUnit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseUnit,0))){
    SWIG_fail_ptr("BaseUnit_getAP",1,SWIGTYPE_p_Pixy__BaseUnit);
  }
  
  result = (int)((Pixy::BaseUnit const *)arg1)->getAP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseUnit_setBaseHP(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseUnit *arg1 = (Pixy::BaseUnit *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Pixy::BaseUnit::setBaseHP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseUnit::setBaseHP",1,"Pixy::BaseUnit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::BaseUnit::setBaseHP",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseUnit,0))){
    SWIG_fail_ptr("BaseUnit_setBaseHP",1,SWIGTYPE_p_Pixy__BaseUnit);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setBaseHP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseUnit_getBaseHP(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseUnit *arg1 = (Pixy::BaseUnit *) 0 ;
  int result;
  
  SWIG_check_num_args("Pixy::BaseUnit::getBaseHP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseUnit::getBaseHP",1,"Pixy::BaseUnit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseUnit,0))){
    SWIG_fail_ptr("BaseUnit_getBaseHP",1,SWIGTYPE_p_Pixy__BaseUnit);
  }
  
  result = (int)((Pixy::BaseUnit const *)arg1)->getBaseHP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseUnit_setBaseAP(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseUnit *arg1 = (Pixy::BaseUnit *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Pixy::BaseUnit::setBaseAP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseUnit::setBaseAP",1,"Pixy::BaseUnit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::BaseUnit::setBaseAP",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseUnit,0))){
    SWIG_fail_ptr("BaseUnit_setBaseAP",1,SWIGTYPE_p_Pixy__BaseUnit);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setBaseAP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseUnit_getBaseAP(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::BaseUnit *arg1 = (Pixy::BaseUnit *) 0 ;
  int result;
  
  SWIG_check_num_args("Pixy::BaseUnit::getBaseAP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::BaseUnit::getBaseAP",1,"Pixy::BaseUnit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__BaseUnit,0))){
    SWIG_fail_ptr("BaseUnit_getBaseAP",1,SWIGTYPE_p_Pixy__BaseUnit);
  }
  
  result = (int)((Pixy::BaseUnit const *)arg1)->getBaseAP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BaseUnit(void *obj) {
Pixy::BaseUnit *arg1 = (Pixy::BaseUnit *) obj;
delete arg1;
}
static swig_lua_method swig_Pixy_BaseUnit_methods[] = {
    {"attack", _wrap_BaseUnit_attack}, 
    {"rest", _wrap_BaseUnit_rest}, 
    {"getUp", _wrap_BaseUnit_getUp}, 
    {"reset", _wrap_BaseUnit_reset}, 
    {"hasSummoningSickness", _wrap_BaseUnit_hasSummoningSickness}, 
    {"canAttack", _wrap_BaseUnit_canAttack}, 
    {"isResting", _wrap_BaseUnit_isResting}, 
    {"isCharging", _wrap_BaseUnit_isCharging}, 
    {"isAttacking", _wrap_BaseUnit_isAttacking}, 
    {"isBlocking", _wrap_BaseUnit_isBlocking}, 
    {"isReady", _wrap_BaseUnit_isReady}, 
    {"isFlying", _wrap_BaseUnit_isFlying}, 
    {"isTrampling", _wrap_BaseUnit_isTrampling}, 
    {"isUnblockable", _wrap_BaseUnit_isUnblockable}, 
    {"isRestless", _wrap_BaseUnit_isRestless}, 
    {"hasFirstStrike", _wrap_BaseUnit_hasFirstStrike}, 
    {"hasLifetap", _wrap_BaseUnit_hasLifetap}, 
    {"setIsFlying", _wrap_BaseUnit_setIsFlying}, 
    {"setIsTrampling", _wrap_BaseUnit_setIsTrampling}, 
    {"setIsUnblockable", _wrap_BaseUnit_setIsUnblockable}, 
    {"setIsRestless", _wrap_BaseUnit_setIsRestless}, 
    {"setHasFirstStrike", _wrap_BaseUnit_setHasFirstStrike}, 
    {"setHasLifetap", _wrap_BaseUnit_setHasLifetap}, 
    {"setAP", _wrap_BaseUnit_setAP}, 
    {"getAP", _wrap_BaseUnit_getAP}, 
    {"setBaseHP", _wrap_BaseUnit_setBaseHP}, 
    {"getBaseHP", _wrap_BaseUnit_getBaseHP}, 
    {"setBaseAP", _wrap_BaseUnit_setBaseAP}, 
    {"getBaseAP", _wrap_BaseUnit_getBaseAP}, 
    {0,0}
};
static swig_lua_attribute swig_Pixy_BaseUnit_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Pixy_BaseUnit_bases[] = {0};
static const char *swig_Pixy_BaseUnit_base_names[] = {0};
static swig_lua_class _wrap_class_Pixy_BaseUnit = { "BaseUnit", &SWIGTYPE_p_Pixy__BaseUnit,0, swig_delete_BaseUnit, swig_Pixy_BaseUnit_methods, swig_Pixy_BaseUnit_attributes, swig_Pixy_BaseUnit_bases, swig_Pixy_BaseUnit_base_names };

static void swig_delete_GameState(void *obj) {
Pixy::GameState *arg1 = (Pixy::GameState *) obj;
delete arg1;
}
static swig_lua_method swig_Pixy_GameState_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_Pixy_GameState_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Pixy_GameState_bases[] = {0};
static const char *swig_Pixy_GameState_base_names[] = {0};
static swig_lua_class _wrap_class_Pixy_GameState = { "GameState", &SWIGTYPE_p_Pixy__GameState,0, swig_delete_GameState, swig_Pixy_GameState_methods, swig_Pixy_GameState_attributes, swig_Pixy_GameState_bases, swig_Pixy_GameState_base_names };

static int _wrap_Combat_getSingletonPtr(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Combat *result = 0 ;
  
  SWIG_check_num_args("Pixy::Combat::getSingletonPtr",0,0)
  result = (Pixy::Combat *)Pixy::Combat::getSingletonPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__Combat,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Combat_getSingleton(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Combat *result = 0 ;
  
  SWIG_check_num_args("Pixy::Combat::getSingleton",0,0)
  result = (Pixy::Combat *) &Pixy::Combat::getSingleton();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__Combat,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Combat_getPuppets(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Combat *arg1 = (Pixy::Combat *) 0 ;
  Pixy::Combat::puppets_t *result = 0 ;
  
  SWIG_check_num_args("Pixy::Combat::getPuppets",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Combat::getPuppets",1,"Pixy::Combat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Combat,0))){
    SWIG_fail_ptr("Combat_getPuppets",1,SWIGTYPE_p_Pixy__Combat);
  }
  
  result = (Pixy::Combat::puppets_t *) &(arg1)->getPuppets();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__listT_Pixy__Puppet_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Combat_getPuppet__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Combat *arg1 = (Pixy::Combat *) 0 ;
  Pixy::Puppet *result = 0 ;
  
  SWIG_check_num_args("Pixy::Combat::getPuppet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Combat::getPuppet",1,"Pixy::Combat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Combat,0))){
    SWIG_fail_ptr("Combat_getPuppet",1,SWIGTYPE_p_Pixy__Combat);
  }
  
  result = (Pixy::Puppet *)(arg1)->getPuppet();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__Puppet,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Combat_getEnemy(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Combat *arg1 = (Pixy::Combat *) 0 ;
  int arg2 ;
  Pixy::Puppet *result = 0 ;
  
  SWIG_check_num_args("Pixy::Combat::getEnemy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Combat::getEnemy",1,"Pixy::Combat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::Combat::getEnemy",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Combat,0))){
    SWIG_fail_ptr("Combat_getEnemy",1,SWIGTYPE_p_Pixy__Combat);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (Pixy::Puppet *)(arg1)->getEnemy(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__Puppet,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Combat_getPuppet__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Combat *arg1 = (Pixy::Combat *) 0 ;
  int arg2 ;
  Pixy::Puppet *result = 0 ;
  
  SWIG_check_num_args("Pixy::Combat::getPuppet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Combat::getPuppet",1,"Pixy::Combat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::Combat::getPuppet",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Combat,0))){
    SWIG_fail_ptr("Combat_getPuppet",1,SWIGTYPE_p_Pixy__Combat);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (Pixy::Puppet *)(arg1)->getPuppet(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__Puppet,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Combat_getPuppet(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__Combat, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Combat_getPuppet__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__Combat, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Combat_getPuppet__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Combat_getPuppet'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Pixy::Combat::getPuppet()\n"
    "    Pixy::Combat::getPuppet(int)\n");
  lua_error(L);return 0;
}


static int _wrap_Combat_getActivePuppet(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Combat *arg1 = (Pixy::Combat *) 0 ;
  Pixy::Puppet *result = 0 ;
  
  SWIG_check_num_args("Pixy::Combat::getActivePuppet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Combat::getActivePuppet",1,"Pixy::Combat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Combat,0))){
    SWIG_fail_ptr("Combat_getActivePuppet",1,SWIGTYPE_p_Pixy__Combat);
  }
  
  result = (Pixy::Puppet *)(arg1)->getActivePuppet();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__Puppet,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Combat_getUnit(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Combat *arg1 = (Pixy::Combat *) 0 ;
  int arg2 ;
  Pixy::Unit *result = 0 ;
  
  SWIG_check_num_args("Pixy::Combat::getUnit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Combat::getUnit",1,"Pixy::Combat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::Combat::getUnit",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Combat,0))){
    SWIG_fail_ptr("Combat_getUnit",1,SWIGTYPE_p_Pixy__Combat);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (Pixy::Unit *)(arg1)->getUnit(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__Unit,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Combat_setIsDebugging(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Combat *arg1 = (Pixy::Combat *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Pixy::Combat::__setIsDebugging",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Combat::__setIsDebugging",1,"Pixy::Combat *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Pixy::Combat::__setIsDebugging",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Combat,0))){
    SWIG_fail_ptr("Combat_setIsDebugging",1,SWIGTYPE_p_Pixy__Combat);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->__setIsDebugging(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Combat_isDebugging(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Combat *arg1 = (Pixy::Combat *) 0 ;
  bool result;
  
  SWIG_check_num_args("Pixy::Combat::__isDebugging",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Combat::__isDebugging",1,"Pixy::Combat const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Combat,0))){
    SWIG_fail_ptr("Combat_isDebugging",1,SWIGTYPE_p_Pixy__Combat);
  }
  
  result = (bool)((Pixy::Combat const *)arg1)->__isDebugging();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Combat(void *obj) {
Pixy::Combat *arg1 = (Pixy::Combat *) obj;
delete arg1;
}
static swig_lua_method swig_Pixy_Combat_methods[] = {
    {"getPuppets", _wrap_Combat_getPuppets}, 
    {"getEnemy", _wrap_Combat_getEnemy}, 
    {"getPuppet", _wrap_Combat_getPuppet}, 
    {"getActivePuppet", _wrap_Combat_getActivePuppet}, 
    {"getUnit", _wrap_Combat_getUnit}, 
    {"setIsDebugging", _wrap_Combat_setIsDebugging}, 
    {"isDebugging", _wrap_Combat_isDebugging}, 
    {0,0}
};
static swig_lua_attribute swig_Pixy_Combat_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Pixy_Combat_bases[] = {0,0};
static const char *swig_Pixy_Combat_base_names[] = {"Pixy::GameState *",0};
static swig_lua_class _wrap_class_Pixy_Combat = { "Combat", &SWIGTYPE_p_Pixy__Combat,0, swig_delete_Combat, swig_Pixy_Combat_methods, swig_Pixy_Combat_attributes, swig_Pixy_Combat_bases, swig_Pixy_Combat_base_names };

static int _wrap_Intro_getSingletonPtr(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Intro *result = 0 ;
  
  SWIG_check_num_args("Pixy::Intro::getSingletonPtr",0,0)
  result = (Pixy::Intro *)Pixy::Intro::getSingletonPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__Intro,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Intro_getSingleton(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Intro *result = 0 ;
  
  SWIG_check_num_args("Pixy::Intro::getSingleton",0,0)
  result = (Pixy::Intro *) &Pixy::Intro::getSingleton();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__Intro,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Intro_getPuppetName(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Intro *arg1 = (Pixy::Intro *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("Pixy::Intro::getPuppetName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Intro::getPuppetName",1,"Pixy::Intro const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Intro,0))){
    SWIG_fail_ptr("Intro_getPuppetName",1,SWIGTYPE_p_Pixy__Intro);
  }
  
  result = (std::string *) &((Pixy::Intro const *)arg1)->getPuppetName();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Intro_setPuppetName(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Intro *arg1 = (Pixy::Intro *) 0 ;
  std::string arg2 ;
  
  SWIG_check_num_args("Pixy::Intro::setPuppetName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Intro::setPuppetName",1,"Pixy::Intro *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Pixy::Intro::setPuppetName",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Intro,0))){
    SWIG_fail_ptr("Intro_setPuppetName",1,SWIGTYPE_p_Pixy__Intro);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  (arg1)->setPuppetName(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Intro_getPuppets(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Intro *arg1 = (Pixy::Intro *) 0 ;
  Pixy::Intro::puppets_t *result = 0 ;
  
  SWIG_check_num_args("Pixy::Intro::getPuppets",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Intro::getPuppets",1,"Pixy::Intro *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Intro,0))){
    SWIG_fail_ptr("Intro_getPuppets",1,SWIGTYPE_p_Pixy__Intro);
  }
  
  result = (Pixy::Intro::puppets_t *) &(arg1)->getPuppets();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__listT_Pixy__Puppet_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Intro_getPuppet(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Intro *arg1 = (Pixy::Intro *) 0 ;
  Pixy::Puppet *result = 0 ;
  
  SWIG_check_num_args("Pixy::Intro::getPuppet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Intro::getPuppet",1,"Pixy::Intro *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Intro,0))){
    SWIG_fail_ptr("Intro_getPuppet",1,SWIGTYPE_p_Pixy__Intro);
  }
  
  result = (Pixy::Puppet *)(arg1)->getPuppet();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__Puppet,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_Pixy_Intro_methods[] = {
    {"getPuppetName", _wrap_Intro_getPuppetName}, 
    {"setPuppetName", _wrap_Intro_setPuppetName}, 
    {"getPuppets", _wrap_Intro_getPuppets}, 
    {"getPuppet", _wrap_Intro_getPuppet}, 
    {0,0}
};
static swig_lua_attribute swig_Pixy_Intro_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Pixy_Intro_bases[] = {0};
static const char *swig_Pixy_Intro_base_names[] = {0};
static swig_lua_class _wrap_class_Pixy_Intro = { "Intro", &SWIGTYPE_p_Pixy__Intro,0,0, swig_Pixy_Intro_methods, swig_Pixy_Intro_attributes, swig_Pixy_Intro_bases, swig_Pixy_Intro_base_names };

static int _wrap_new_Animable__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Animable *result = 0 ;
  
  SWIG_check_num_args("Pixy::Animable::Animable",0,0)
  result = (Pixy::Animable *)new Pixy::Animable();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__Animable,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Animable__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Animable *arg1 = 0 ;
  Pixy::Animable *result = 0 ;
  
  SWIG_check_num_args("Pixy::Animable::Animable",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Pixy::Animable::Animable",1,"Pixy::Animable const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Animable,0))){
    SWIG_fail_ptr("new_Animable",1,SWIGTYPE_p_Pixy__Animable);
  }
  
  result = (Pixy::Animable *)new Pixy::Animable((Pixy::Animable const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__Animable,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Animable(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Animable__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__Animable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Animable__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Animable'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Pixy::Animable::Animable()\n"
    "    Pixy::Animable::Animable(Pixy::Animable const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Animable_registerAnimationState__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Animable *arg1 = (Pixy::Animable *) 0 ;
  Pixy::Animable::AnimID arg2 ;
  std::string arg3 ;
  bool arg4 ;
  
  SWIG_check_num_args("Pixy::Animable::registerAnimationState",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Animable::registerAnimationState",1,"Pixy::Animable *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::Animable::registerAnimationState",2,"Pixy::Animable::AnimID");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Pixy::Animable::registerAnimationState",3,"std::string");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Pixy::Animable::registerAnimationState",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Animable,0))){
    SWIG_fail_ptr("Animable_registerAnimationState",1,SWIGTYPE_p_Pixy__Animable);
  }
  
  arg2 = (Pixy::Animable::AnimID)(int)lua_tonumber(L, 2);
  (&arg3)->assign(lua_tostring(L,3),lua_strlen(L,3));
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->registerAnimationState(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Animable_registerAnimationState__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Animable *arg1 = (Pixy::Animable *) 0 ;
  Pixy::Animable::AnimID arg2 ;
  std::string arg3 ;
  
  SWIG_check_num_args("Pixy::Animable::registerAnimationState",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Animable::registerAnimationState",1,"Pixy::Animable *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::Animable::registerAnimationState",2,"Pixy::Animable::AnimID");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Pixy::Animable::registerAnimationState",3,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Animable,0))){
    SWIG_fail_ptr("Animable_registerAnimationState",1,SWIGTYPE_p_Pixy__Animable);
  }
  
  arg2 = (Pixy::Animable::AnimID)(int)lua_tonumber(L, 2);
  (&arg3)->assign(lua_tostring(L,3),lua_strlen(L,3));
  (arg1)->registerAnimationState(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Animable_registerAnimationState(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__Animable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Animable_registerAnimationState__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__Animable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_Animable_registerAnimationState__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Animable_registerAnimationState'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Pixy::Animable::registerAnimationState(Pixy::Animable::AnimID,std::string,bool)\n"
    "    Pixy::Animable::registerAnimationState(Pixy::Animable::AnimID,std::string)\n");
  lua_error(L);return 0;
}


static int _wrap_Animable_animateLive(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Animable *arg1 = (Pixy::Animable *) 0 ;
  float result;
  
  SWIG_check_num_args("Pixy::Animable::animateLive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Animable::animateLive",1,"Pixy::Animable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Animable,0))){
    SWIG_fail_ptr("Animable_animateLive",1,SWIGTYPE_p_Pixy__Animable);
  }
  
  result = (float)(arg1)->animateLive();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Animable_animateDie(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Animable *arg1 = (Pixy::Animable *) 0 ;
  float result;
  
  SWIG_check_num_args("Pixy::Animable::animateDie",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Animable::animateDie",1,"Pixy::Animable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Animable,0))){
    SWIG_fail_ptr("Animable_animateDie",1,SWIGTYPE_p_Pixy__Animable);
  }
  
  result = (float)(arg1)->animateDie();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Animable_animateIdle(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Animable *arg1 = (Pixy::Animable *) 0 ;
  float result;
  
  SWIG_check_num_args("Pixy::Animable::animateIdle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Animable::animateIdle",1,"Pixy::Animable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Animable,0))){
    SWIG_fail_ptr("Animable_animateIdle",1,SWIGTYPE_p_Pixy__Animable);
  }
  
  result = (float)(arg1)->animateIdle();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Animable_animateWalk(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Animable *arg1 = (Pixy::Animable *) 0 ;
  float result;
  
  SWIG_check_num_args("Pixy::Animable::animateWalk",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Animable::animateWalk",1,"Pixy::Animable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Animable,0))){
    SWIG_fail_ptr("Animable_animateWalk",1,SWIGTYPE_p_Pixy__Animable);
  }
  
  result = (float)(arg1)->animateWalk();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Animable_animateRun(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Animable *arg1 = (Pixy::Animable *) 0 ;
  float result;
  
  SWIG_check_num_args("Pixy::Animable::animateRun",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Animable::animateRun",1,"Pixy::Animable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Animable,0))){
    SWIG_fail_ptr("Animable_animateRun",1,SWIGTYPE_p_Pixy__Animable);
  }
  
  result = (float)(arg1)->animateRun();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Animable_animateAttack(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Animable *arg1 = (Pixy::Animable *) 0 ;
  float result;
  
  SWIG_check_num_args("Pixy::Animable::animateAttack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Animable::animateAttack",1,"Pixy::Animable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Animable,0))){
    SWIG_fail_ptr("Animable_animateAttack",1,SWIGTYPE_p_Pixy__Animable);
  }
  
  result = (float)(arg1)->animateAttack();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Animable_animateHit(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Animable *arg1 = (Pixy::Animable *) 0 ;
  float result;
  
  SWIG_check_num_args("Pixy::Animable::animateHit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Animable::animateHit",1,"Pixy::Animable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Animable,0))){
    SWIG_fail_ptr("Animable_animateHit",1,SWIGTYPE_p_Pixy__Animable);
  }
  
  result = (float)(arg1)->animateHit();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Animable_animateRest(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Animable *arg1 = (Pixy::Animable *) 0 ;
  float result;
  
  SWIG_check_num_args("Pixy::Animable::animateRest",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Animable::animateRest",1,"Pixy::Animable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Animable,0))){
    SWIG_fail_ptr("Animable_animateRest",1,SWIGTYPE_p_Pixy__Animable);
  }
  
  result = (float)(arg1)->animateRest();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Animable_animateGetUp(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Animable *arg1 = (Pixy::Animable *) 0 ;
  float result;
  
  SWIG_check_num_args("Pixy::Animable::animateGetUp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Animable::animateGetUp",1,"Pixy::Animable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Animable,0))){
    SWIG_fail_ptr("Animable_animateGetUp",1,SWIGTYPE_p_Pixy__Animable);
  }
  
  result = (float)(arg1)->animateGetUp();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Animable_setAnimFadeSpeed(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("Pixy::Animable::setAnimFadeSpeed",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Pixy::Animable::setAnimFadeSpeed",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  Pixy::Animable::setAnimFadeSpeed(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Animable_getAnimFadeSpeed(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("Pixy::Animable::getAnimFadeSpeed",0,0)
  result = (float)Pixy::Animable::getAnimFadeSpeed();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Animable(void *obj) {
Pixy::Animable *arg1 = (Pixy::Animable *) obj;
delete arg1;
}
static swig_lua_method swig_Pixy_Animable_methods[] = {
    {"registerAnimationState", _wrap_Animable_registerAnimationState}, 
    {"animateLive", _wrap_Animable_animateLive}, 
    {"animateDie", _wrap_Animable_animateDie}, 
    {"animateIdle", _wrap_Animable_animateIdle}, 
    {"animateWalk", _wrap_Animable_animateWalk}, 
    {"animateRun", _wrap_Animable_animateRun}, 
    {"animateAttack", _wrap_Animable_animateAttack}, 
    {"animateHit", _wrap_Animable_animateHit}, 
    {"animateRest", _wrap_Animable_animateRest}, 
    {"animateGetUp", _wrap_Animable_animateGetUp}, 
    {0,0}
};
static swig_lua_attribute swig_Pixy_Animable_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Pixy_Animable_bases[] = {0};
static const char *swig_Pixy_Animable_base_names[] = {0};
static swig_lua_class _wrap_class_Pixy_Animable = { "Animable", &SWIGTYPE_p_Pixy__Animable,_wrap_new_Animable, swig_delete_Animable, swig_Pixy_Animable_methods, swig_Pixy_Animable_attributes, swig_Pixy_Animable_bases, swig_Pixy_Animable_base_names };

static int _wrap_new_Mobile__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Mobile *result = 0 ;
  
  SWIG_check_num_args("Pixy::Mobile::Mobile",0,0)
  result = (Pixy::Mobile *)new Pixy::Mobile();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__Mobile,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Mobile__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Mobile *arg1 = 0 ;
  Pixy::Mobile *result = 0 ;
  
  SWIG_check_num_args("Pixy::Mobile::Mobile",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Pixy::Mobile::Mobile",1,"Pixy::Mobile const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Mobile,0))){
    SWIG_fail_ptr("new_Mobile",1,SWIGTYPE_p_Pixy__Mobile);
  }
  
  result = (Pixy::Mobile *)new Pixy::Mobile((Pixy::Mobile const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__Mobile,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Mobile(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Mobile__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__Mobile, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Mobile__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Mobile'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Pixy::Mobile::Mobile()\n"
    "    Pixy::Mobile::Mobile(Pixy::Mobile const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Mobile_move(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Mobile *arg1 = (Pixy::Mobile *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Pixy::Mobile::move",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Mobile::move",1,"Pixy::Mobile *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::Mobile::move",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Mobile,0))){
    SWIG_fail_ptr("Mobile_move",1,SWIGTYPE_p_Pixy__Mobile);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->move(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mobile_isMoving(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Mobile *arg1 = (Pixy::Mobile *) 0 ;
  bool result;
  
  SWIG_check_num_args("Pixy::Mobile::isMoving",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Mobile::isMoving",1,"Pixy::Mobile const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Mobile,0))){
    SWIG_fail_ptr("Mobile_isMoving",1,SWIGTYPE_p_Pixy__Mobile);
  }
  
  result = (bool)((Pixy::Mobile const *)arg1)->isMoving();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mobile_setWalkSpeed(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Mobile *arg1 = (Pixy::Mobile *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Pixy::Mobile::setWalkSpeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Mobile::setWalkSpeed",1,"Pixy::Mobile *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::Mobile::setWalkSpeed",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Mobile,0))){
    SWIG_fail_ptr("Mobile_setWalkSpeed",1,SWIGTYPE_p_Pixy__Mobile);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->setWalkSpeed(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mobile_getWalkSpeed(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Mobile *arg1 = (Pixy::Mobile *) 0 ;
  float result;
  
  SWIG_check_num_args("Pixy::Mobile::getWalkSpeed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Mobile::getWalkSpeed",1,"Pixy::Mobile const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Mobile,0))){
    SWIG_fail_ptr("Mobile_getWalkSpeed",1,SWIGTYPE_p_Pixy__Mobile);
  }
  
  result = (float)((Pixy::Mobile const *)arg1)->getWalkSpeed();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mobile_setDefaultWalkSpeed(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("Pixy::Mobile::setDefaultWalkSpeed",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Pixy::Mobile::setDefaultWalkSpeed",1,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  Pixy::Mobile::setDefaultWalkSpeed(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mobile_getDefaultWalkSpeed(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("Pixy::Mobile::getDefaultWalkSpeed",0,0)
  result = (float)Pixy::Mobile::getDefaultWalkSpeed();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mobile_rotateToEnemy(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Mobile *arg1 = (Pixy::Mobile *) 0 ;
  
  SWIG_check_num_args("Pixy::Mobile::rotateToEnemy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Mobile::rotateToEnemy",1,"Pixy::Mobile *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Mobile,0))){
    SWIG_fail_ptr("Mobile_rotateToEnemy",1,SWIGTYPE_p_Pixy__Mobile);
  }
  
  (arg1)->rotateToEnemy();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mobile_rotateTo(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Mobile *arg1 = (Pixy::Mobile *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Pixy::Mobile::rotateTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Mobile::rotateTo",1,"Pixy::Mobile *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Pixy::Mobile::rotateTo",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Mobile,0))){
    SWIG_fail_ptr("Mobile_rotateTo",1,SWIGTYPE_p_Pixy__Mobile);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Mobile_rotateTo",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  (arg1)->rotateTo((Ogre::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mobile_setRotationFactor(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("Pixy::Mobile::setRotationFactor",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Pixy::Mobile::setRotationFactor",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  Pixy::Mobile::setRotationFactor(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Mobile(void *obj) {
Pixy::Mobile *arg1 = (Pixy::Mobile *) obj;
delete arg1;
}
static swig_lua_method swig_Pixy_Mobile_methods[] = {
    {"move", _wrap_Mobile_move}, 
    {"isMoving", _wrap_Mobile_isMoving}, 
    {"setWalkSpeed", _wrap_Mobile_setWalkSpeed}, 
    {"getWalkSpeed", _wrap_Mobile_getWalkSpeed}, 
    {"rotateToEnemy", _wrap_Mobile_rotateToEnemy}, 
    {"rotateTo", _wrap_Mobile_rotateTo}, 
    {0,0}
};
static swig_lua_attribute swig_Pixy_Mobile_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Pixy_Mobile_bases[] = {0};
static const char *swig_Pixy_Mobile_base_names[] = {0};
static swig_lua_class _wrap_class_Pixy_Mobile = { "Mobile", &SWIGTYPE_p_Pixy__Mobile,_wrap_new_Mobile, swig_delete_Mobile, swig_Pixy_Mobile_methods, swig_Pixy_Mobile_attributes, swig_Pixy_Mobile_bases, swig_Pixy_Mobile_base_names };

static int _wrap_new_Renderable__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Renderable *result = 0 ;
  
  SWIG_check_num_args("Pixy::Renderable::Renderable",0,0)
  result = (Pixy::Renderable *)new Pixy::Renderable();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__Renderable,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Renderable__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Renderable *arg1 = 0 ;
  Pixy::Renderable *result = 0 ;
  
  SWIG_check_num_args("Pixy::Renderable::Renderable",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Pixy::Renderable::Renderable",1,"Pixy::Renderable const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Renderable,0))){
    SWIG_fail_ptr("new_Renderable",1,SWIGTYPE_p_Pixy__Renderable);
  }
  
  result = (Pixy::Renderable *)new Pixy::Renderable((Pixy::Renderable const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__Renderable,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Renderable(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Renderable__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__Renderable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Renderable__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Renderable'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Pixy::Renderable::Renderable()\n"
    "    Pixy::Renderable::Renderable(Pixy::Renderable const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Renderable_attachSceneNode(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Renderable *arg1 = (Pixy::Renderable *) 0 ;
  Ogre::SceneNode *arg2 = (Ogre::SceneNode *) 0 ;
  
  SWIG_check_num_args("Pixy::Renderable::attachSceneNode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Renderable::attachSceneNode",1,"Pixy::Renderable *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::Renderable::attachSceneNode",2,"Ogre::SceneNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Renderable,0))){
    SWIG_fail_ptr("Renderable_attachSceneNode",1,SWIGTYPE_p_Pixy__Renderable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("Renderable_attachSceneNode",2,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  (arg1)->attachSceneNode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Renderable_getSceneNode(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Renderable *arg1 = (Pixy::Renderable *) 0 ;
  Ogre::SceneNode *result = 0 ;
  
  SWIG_check_num_args("Pixy::Renderable::getSceneNode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Renderable::getSceneNode",1,"Pixy::Renderable const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Renderable,0))){
    SWIG_fail_ptr("Renderable_getSceneNode",1,SWIGTYPE_p_Pixy__Renderable);
  }
  
  result = (Ogre::SceneNode *)((Pixy::Renderable const *)arg1)->getSceneNode();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__SceneNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Renderable_attachSceneObject(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Renderable *arg1 = (Pixy::Renderable *) 0 ;
  Ogre::Entity *arg2 = (Ogre::Entity *) 0 ;
  
  SWIG_check_num_args("Pixy::Renderable::attachSceneObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Renderable::attachSceneObject",1,"Pixy::Renderable *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::Renderable::attachSceneObject",2,"Ogre::Entity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Renderable,0))){
    SWIG_fail_ptr("Renderable_attachSceneObject",1,SWIGTYPE_p_Pixy__Renderable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Entity,0))){
    SWIG_fail_ptr("Renderable_attachSceneObject",2,SWIGTYPE_p_Ogre__Entity);
  }
  
  (arg1)->attachSceneObject(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Renderable_getSceneObject(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Renderable *arg1 = (Pixy::Renderable *) 0 ;
  Ogre::Entity *result = 0 ;
  
  SWIG_check_num_args("Pixy::Renderable::getSceneObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Renderable::getSceneObject",1,"Pixy::Renderable const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Renderable,0))){
    SWIG_fail_ptr("Renderable_getSceneObject",1,SWIGTYPE_p_Pixy__Renderable);
  }
  
  result = (Ogre::Entity *)((Pixy::Renderable const *)arg1)->getSceneObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Entity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Renderable_attachExtension(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Renderable *arg1 = (Pixy::Renderable *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  Ogre::Entity *result = 0 ;
  
  SWIG_check_num_args("Pixy::Renderable::attachExtension",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Renderable::attachExtension",1,"Pixy::Renderable *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Pixy::Renderable::attachExtension",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Pixy::Renderable::attachExtension",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Renderable,0))){
    SWIG_fail_ptr("Renderable_attachExtension",1,SWIGTYPE_p_Pixy__Renderable);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  result = (Ogre::Entity *)(arg1)->attachExtension((std::string const &)*arg2,(std::string const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Entity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Renderable_getMesh(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Renderable *arg1 = (Pixy::Renderable *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("Pixy::Renderable::getMesh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Renderable::getMesh",1,"Pixy::Renderable const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Renderable,0))){
    SWIG_fail_ptr("Renderable_getMesh",1,SWIGTYPE_p_Pixy__Renderable);
  }
  
  result = (std::string *) &((Pixy::Renderable const *)arg1)->getMesh();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Renderable_getMaterial(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Renderable *arg1 = (Pixy::Renderable *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("Pixy::Renderable::getMaterial",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Renderable::getMaterial",1,"Pixy::Renderable const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Renderable,0))){
    SWIG_fail_ptr("Renderable_getMaterial",1,SWIGTYPE_p_Pixy__Renderable);
  }
  
  result = (std::string *) &((Pixy::Renderable const *)arg1)->getMaterial();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Renderable_setMaterial(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Renderable *arg1 = (Pixy::Renderable *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Pixy::Renderable::setMaterial",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Renderable::setMaterial",1,"Pixy::Renderable *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Pixy::Renderable::setMaterial",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Renderable,0))){
    SWIG_fail_ptr("Renderable_setMaterial",1,SWIGTYPE_p_Pixy__Renderable);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->setMaterial((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Renderable_setMesh(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Renderable *arg1 = (Pixy::Renderable *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Pixy::Renderable::setMesh",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Renderable::setMesh",1,"Pixy::Renderable *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Pixy::Renderable::setMesh",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Renderable,0))){
    SWIG_fail_ptr("Renderable_setMesh",1,SWIGTYPE_p_Pixy__Renderable);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->setMesh((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Renderable(void *obj) {
Pixy::Renderable *arg1 = (Pixy::Renderable *) obj;
delete arg1;
}
static swig_lua_method swig_Pixy_Renderable_methods[] = {
    {"attachSceneNode", _wrap_Renderable_attachSceneNode}, 
    {"getSceneNode", _wrap_Renderable_getSceneNode}, 
    {"attachSceneObject", _wrap_Renderable_attachSceneObject}, 
    {"getSceneObject", _wrap_Renderable_getSceneObject}, 
    {"attachExtension", _wrap_Renderable_attachExtension}, 
    {"getMesh", _wrap_Renderable_getMesh}, 
    {"getMaterial", _wrap_Renderable_getMaterial}, 
    {"setMaterial", _wrap_Renderable_setMaterial}, 
    {"setMesh", _wrap_Renderable_setMesh}, 
    {0,0}
};
static swig_lua_attribute swig_Pixy_Renderable_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Pixy_Renderable_bases[] = {0};
static const char *swig_Pixy_Renderable_base_names[] = {0};
static swig_lua_class _wrap_class_Pixy_Renderable = { "Renderable", &SWIGTYPE_p_Pixy__Renderable,_wrap_new_Renderable, swig_delete_Renderable, swig_Pixy_Renderable_methods, swig_Pixy_Renderable_attributes, swig_Pixy_Renderable_bases, swig_Pixy_Renderable_base_names };

static int _wrap_new_Caster__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Caster *result = 0 ;
  
  SWIG_check_num_args("Pixy::Caster::Caster",0,0)
  result = (Pixy::Caster *)new Pixy::Caster();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__Caster,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Caster__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Caster *arg1 = 0 ;
  Pixy::Caster *result = 0 ;
  
  SWIG_check_num_args("Pixy::Caster::Caster",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Pixy::Caster::Caster",1,"Pixy::Caster const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Caster,0))){
    SWIG_fail_ptr("new_Caster",1,SWIGTYPE_p_Pixy__Caster);
  }
  
  result = (Pixy::Caster *)new Pixy::Caster((Pixy::Caster const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__Caster,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Caster(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Caster__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__Caster, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Caster__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Caster'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Pixy::Caster::Caster()\n"
    "    Pixy::Caster::Caster(Pixy::Caster const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Caster_attachSpell(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Caster *arg1 = (Pixy::Caster *) 0 ;
  Pixy::BaseSpell *arg2 = (Pixy::BaseSpell *) 0 ;
  
  SWIG_check_num_args("Pixy::Caster::attachSpell",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Caster::attachSpell",1,"Pixy::Caster *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::Caster::attachSpell",2,"Pixy::BaseSpell *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Caster,0))){
    SWIG_fail_ptr("Caster_attachSpell",1,SWIGTYPE_p_Pixy__Caster);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Pixy__BaseSpell,0))){
    SWIG_fail_ptr("Caster_attachSpell",2,SWIGTYPE_p_Pixy__BaseSpell);
  }
  
  (arg1)->attachSpell(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Caster_attachBuff(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Caster *arg1 = (Pixy::Caster *) 0 ;
  Pixy::BaseSpell *arg2 = (Pixy::BaseSpell *) 0 ;
  
  SWIG_check_num_args("Pixy::Caster::attachBuff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Caster::attachBuff",1,"Pixy::Caster *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::Caster::attachBuff",2,"Pixy::BaseSpell *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Caster,0))){
    SWIG_fail_ptr("Caster_attachBuff",1,SWIGTYPE_p_Pixy__Caster);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Pixy__BaseSpell,0))){
    SWIG_fail_ptr("Caster_attachBuff",2,SWIGTYPE_p_Pixy__BaseSpell);
  }
  
  (arg1)->attachBuff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Caster_detachSpell__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Caster *arg1 = (Pixy::Caster *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("Pixy::Caster::detachSpell",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Caster::detachSpell",1,"Pixy::Caster *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::Caster::detachSpell",2,"int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Pixy::Caster::detachSpell",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Caster,0))){
    SWIG_fail_ptr("Caster_detachSpell",1,SWIGTYPE_p_Pixy__Caster);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->detachSpell(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Caster_detachSpell__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Caster *arg1 = (Pixy::Caster *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Pixy::Caster::detachSpell",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Caster::detachSpell",1,"Pixy::Caster *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::Caster::detachSpell",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Caster,0))){
    SWIG_fail_ptr("Caster_detachSpell",1,SWIGTYPE_p_Pixy__Caster);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->detachSpell(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Caster_detachSpell(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__Caster, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Caster_detachSpell__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__Caster, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Caster_detachSpell__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Caster_detachSpell'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Pixy::Caster::detachSpell(int,bool)\n"
    "    Pixy::Caster::detachSpell(int)\n");
  lua_error(L);return 0;
}


static int _wrap_Caster_detachBuff__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Caster *arg1 = (Pixy::Caster *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("Pixy::Caster::detachBuff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Caster::detachBuff",1,"Pixy::Caster *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::Caster::detachBuff",2,"int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Pixy::Caster::detachBuff",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Caster,0))){
    SWIG_fail_ptr("Caster_detachBuff",1,SWIGTYPE_p_Pixy__Caster);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->detachBuff(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Caster_detachBuff__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Caster *arg1 = (Pixy::Caster *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Pixy::Caster::detachBuff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Caster::detachBuff",1,"Pixy::Caster *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::Caster::detachBuff",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Caster,0))){
    SWIG_fail_ptr("Caster_detachBuff",1,SWIGTYPE_p_Pixy__Caster);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->detachBuff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Caster_detachBuff(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__Caster, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Caster_detachBuff__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__Caster, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Caster_detachBuff__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Caster_detachBuff'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Pixy::Caster::detachBuff(int,bool)\n"
    "    Pixy::Caster::detachBuff(int)\n");
  lua_error(L);return 0;
}


static int _wrap_Caster_getSpell(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Caster *arg1 = (Pixy::Caster *) 0 ;
  int arg2 ;
  Pixy::Caster::spell_t *result = 0 ;
  
  SWIG_check_num_args("Pixy::Caster::getSpell",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Caster::getSpell",1,"Pixy::Caster *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::Caster::getSpell",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Caster,0))){
    SWIG_fail_ptr("Caster_getSpell",1,SWIGTYPE_p_Pixy__Caster);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (Pixy::Caster::spell_t *)(arg1)->getSpell(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__Spell,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Caster_getBuff(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Caster *arg1 = (Pixy::Caster *) 0 ;
  int arg2 ;
  Pixy::Caster::spell_t *result = 0 ;
  
  SWIG_check_num_args("Pixy::Caster::getBuff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Caster::getBuff",1,"Pixy::Caster *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::Caster::getBuff",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Caster,0))){
    SWIG_fail_ptr("Caster_getBuff",1,SWIGTYPE_p_Pixy__Caster);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (Pixy::Caster::spell_t *)(arg1)->getBuff(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__Spell,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Caster_getSpells(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Caster *arg1 = (Pixy::Caster *) 0 ;
  Pixy::Caster::spells_t *result = 0 ;
  
  SWIG_check_num_args("Pixy::Caster::getSpells",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Caster::getSpells",1,"Pixy::Caster *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Caster,0))){
    SWIG_fail_ptr("Caster_getSpells",1,SWIGTYPE_p_Pixy__Caster);
  }
  
  result = (Pixy::Caster::spells_t *) &(arg1)->getSpells();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__listT_Pixy__Spell_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Caster_getBuffs(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Caster *arg1 = (Pixy::Caster *) 0 ;
  Pixy::Caster::spells_t *result = 0 ;
  
  SWIG_check_num_args("Pixy::Caster::getBuffs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Caster::getBuffs",1,"Pixy::Caster *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Caster,0))){
    SWIG_fail_ptr("Caster_getBuffs",1,SWIGTYPE_p_Pixy__Caster);
  }
  
  result = (Pixy::Caster::spells_t *) &(arg1)->getBuffs();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__listT_Pixy__Spell_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Caster_nrSpells(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Caster *arg1 = (Pixy::Caster *) 0 ;
  int result;
  
  SWIG_check_num_args("Pixy::Caster::nrSpells",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Caster::nrSpells",1,"Pixy::Caster *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Caster,0))){
    SWIG_fail_ptr("Caster_nrSpells",1,SWIGTYPE_p_Pixy__Caster);
  }
  
  result = (int)(arg1)->nrSpells();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Caster_nrBuffs(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Caster *arg1 = (Pixy::Caster *) 0 ;
  int result;
  
  SWIG_check_num_args("Pixy::Caster::nrBuffs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Caster::nrBuffs",1,"Pixy::Caster *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Caster,0))){
    SWIG_fail_ptr("Caster_nrBuffs",1,SWIGTYPE_p_Pixy__Caster);
  }
  
  result = (int)(arg1)->nrBuffs();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Caster_hasBuff(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Caster *arg1 = (Pixy::Caster *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("Pixy::Caster::hasBuff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Caster::hasBuff",1,"Pixy::Caster *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::Caster::hasBuff",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Caster,0))){
    SWIG_fail_ptr("Caster_hasBuff",1,SWIGTYPE_p_Pixy__Caster);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->hasBuff(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Caster_hasBuffWithName(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Caster *arg1 = (Pixy::Caster *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("Pixy::Caster::hasBuffWithName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Caster::hasBuffWithName",1,"Pixy::Caster *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Pixy::Caster::hasBuffWithName",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Caster,0))){
    SWIG_fail_ptr("Caster_hasBuffWithName",1,SWIGTYPE_p_Pixy__Caster);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->hasBuffWithName((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Caster(void *obj) {
Pixy::Caster *arg1 = (Pixy::Caster *) obj;
delete arg1;
}
static swig_lua_method swig_Pixy_Caster_methods[] = {
    {"attachSpell", _wrap_Caster_attachSpell}, 
    {"attachBuff", _wrap_Caster_attachBuff}, 
    {"detachSpell", _wrap_Caster_detachSpell}, 
    {"detachBuff", _wrap_Caster_detachBuff}, 
    {"getSpell", _wrap_Caster_getSpell}, 
    {"getBuff", _wrap_Caster_getBuff}, 
    {"getSpells", _wrap_Caster_getSpells}, 
    {"getBuffs", _wrap_Caster_getBuffs}, 
    {"nrSpells", _wrap_Caster_nrSpells}, 
    {"nrBuffs", _wrap_Caster_nrBuffs}, 
    {"hasBuff", _wrap_Caster_hasBuff}, 
    {"hasBuffWithName", _wrap_Caster_hasBuffWithName}, 
    {0,0}
};
static swig_lua_attribute swig_Pixy_Caster_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Pixy_Caster_bases[] = {0,0};
static const char *swig_Pixy_Caster_base_names[] = {"Pixy::BaseCaster *",0};
static swig_lua_class _wrap_class_Pixy_Caster = { "Caster", &SWIGTYPE_p_Pixy__Caster,_wrap_new_Caster, swig_delete_Caster, swig_Pixy_Caster_methods, swig_Pixy_Caster_attributes, swig_Pixy_Caster_bases, swig_Pixy_Caster_base_names };

static int _wrap_new_Deck(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Deck::caster_t *arg1 = (Pixy::Deck::caster_t *) 0 ;
  Pixy::Deck *result = 0 ;
  
  SWIG_check_num_args("Pixy::Deck::Deck",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Deck::Deck",1,"Pixy::Deck::caster_t const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Caster,0))){
    SWIG_fail_ptr("new_Deck",1,SWIGTYPE_p_Pixy__Caster);
  }
  
  result = (Pixy::Deck *)new Pixy::Deck((Pixy::Deck::caster_t const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__Deck,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Deck_getSpells(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Deck *arg1 = (Pixy::Deck *) 0 ;
  Pixy::Deck::spells_t *result = 0 ;
  
  SWIG_check_num_args("Pixy::Deck::getSpells",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Deck::getSpells",1,"Pixy::Deck const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Deck,0))){
    SWIG_fail_ptr("Deck_getSpells",1,SWIGTYPE_p_Pixy__Deck);
  }
  
  result = (Pixy::Deck::spells_t *) &((Pixy::Deck const *)arg1)->getSpells();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_Pixy__Spell_const_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Deck(void *obj) {
Pixy::Deck *arg1 = (Pixy::Deck *) obj;
delete arg1;
}
static swig_lua_method swig_Pixy_Deck_methods[] = {
    {"getSpells", _wrap_Deck_getSpells}, 
    {0,0}
};
static swig_lua_attribute swig_Pixy_Deck_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Pixy_Deck_bases[] = {0,0};
static const char *swig_Pixy_Deck_base_names[] = {"Pixy::BaseDeck *",0};
static swig_lua_class _wrap_class_Pixy_Deck = { "Deck", &SWIGTYPE_p_Pixy__Deck,_wrap_new_Deck, swig_delete_Deck, swig_Pixy_Deck_methods, swig_Pixy_Deck_attributes, swig_Pixy_Deck_bases, swig_Pixy_Deck_base_names };

static int _wrap_Entity_setup(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Entity *arg1 = (Pixy::Entity *) 0 ;
  Ogre::SceneManager *arg2 = (Ogre::SceneManager *) 0 ;
  
  SWIG_check_num_args("Pixy::Entity::setup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Entity::setup",1,"Pixy::Entity *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::Entity::setup",2,"Ogre::SceneManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Entity,0))){
    SWIG_fail_ptr("Entity_setup",1,SWIGTYPE_p_Pixy__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("Entity_setup",2,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  (arg1)->setup(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_live(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Entity *arg1 = (Pixy::Entity *) 0 ;
  bool result;
  
  SWIG_check_num_args("Pixy::Entity::live",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Entity::live",1,"Pixy::Entity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Entity,0))){
    SWIG_fail_ptr("Entity_live",1,SWIGTYPE_p_Pixy__Entity);
  }
  
  result = (bool)(arg1)->live();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_die(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Entity *arg1 = (Pixy::Entity *) 0 ;
  
  SWIG_check_num_args("Pixy::Entity::die",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Entity::die",1,"Pixy::Entity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Entity,0))){
    SWIG_fail_ptr("Entity_die",1,SWIGTYPE_p_Pixy__Entity);
  }
  
  (arg1)->die();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_attachSpell(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Entity *arg1 = (Pixy::Entity *) 0 ;
  Pixy::BaseSpell *arg2 = (Pixy::BaseSpell *) 0 ;
  
  SWIG_check_num_args("Pixy::Entity::attachSpell",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Entity::attachSpell",1,"Pixy::Entity *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::Entity::attachSpell",2,"Pixy::BaseSpell *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Entity,0))){
    SWIG_fail_ptr("Entity_attachSpell",1,SWIGTYPE_p_Pixy__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Pixy__BaseSpell,0))){
    SWIG_fail_ptr("Entity_attachSpell",2,SWIGTYPE_p_Pixy__BaseSpell);
  }
  
  (arg1)->attachSpell(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_attachBuff(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Entity *arg1 = (Pixy::Entity *) 0 ;
  Pixy::BaseSpell *arg2 = (Pixy::BaseSpell *) 0 ;
  
  SWIG_check_num_args("Pixy::Entity::attachBuff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Entity::attachBuff",1,"Pixy::Entity *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::Entity::attachBuff",2,"Pixy::BaseSpell *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Entity,0))){
    SWIG_fail_ptr("Entity_attachBuff",1,SWIGTYPE_p_Pixy__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Pixy__BaseSpell,0))){
    SWIG_fail_ptr("Entity_attachBuff",2,SWIGTYPE_p_Pixy__BaseSpell);
  }
  
  (arg1)->attachBuff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_getText(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Entity *arg1 = (Pixy::Entity *) 0 ;
  MovableTextOverlay *result = 0 ;
  
  SWIG_check_num_args("Pixy::Entity::getText",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Entity::getText",1,"Pixy::Entity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Entity,0))){
    SWIG_fail_ptr("Entity_getText",1,SWIGTYPE_p_Pixy__Entity);
  }
  
  result = (MovableTextOverlay *)((Pixy::Entity const *)arg1)->getText();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MovableTextOverlay,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_setText(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Entity *arg1 = (Pixy::Entity *) 0 ;
  MovableTextOverlay *arg2 = (MovableTextOverlay *) 0 ;
  
  SWIG_check_num_args("Pixy::Entity::setText",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Entity::setText",1,"Pixy::Entity *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::Entity::setText",2,"MovableTextOverlay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Entity,0))){
    SWIG_fail_ptr("Entity_setText",1,SWIGTYPE_p_Pixy__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MovableTextOverlay,0))){
    SWIG_fail_ptr("Entity_setText",2,SWIGTYPE_p_MovableTextOverlay);
  }
  
  (arg1)->setText(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_updateTextOverlay(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Entity *arg1 = (Pixy::Entity *) 0 ;
  
  SWIG_check_num_args("Pixy::Entity::updateTextOverlay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Entity::updateTextOverlay",1,"Pixy::Entity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Entity,0))){
    SWIG_fail_ptr("Entity_updateTextOverlay",1,SWIGTYPE_p_Pixy__Entity);
  }
  
  (arg1)->updateTextOverlay();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_hide(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Entity *arg1 = (Pixy::Entity *) 0 ;
  
  SWIG_check_num_args("Pixy::Entity::hide",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Entity::hide",1,"Pixy::Entity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Entity,0))){
    SWIG_fail_ptr("Entity_hide",1,SWIGTYPE_p_Pixy__Entity);
  }
  
  (arg1)->hide();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_show(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Entity *arg1 = (Pixy::Entity *) 0 ;
  
  SWIG_check_num_args("Pixy::Entity::show",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Entity::show",1,"Pixy::Entity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Entity,0))){
    SWIG_fail_ptr("Entity_show",1,SWIGTYPE_p_Pixy__Entity);
  }
  
  (arg1)->show();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_trackEnemyUnit(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Entity *arg1 = (Pixy::Entity *) 0 ;
  Pixy::Unit *arg2 = (Pixy::Unit *) 0 ;
  
  SWIG_check_num_args("Pixy::Entity::trackEnemyUnit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Entity::trackEnemyUnit",1,"Pixy::Entity *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::Entity::trackEnemyUnit",2,"Pixy::Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Entity,0))){
    SWIG_fail_ptr("Entity_trackEnemyUnit",1,SWIGTYPE_p_Pixy__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Pixy__Unit,0))){
    SWIG_fail_ptr("Entity_trackEnemyUnit",2,SWIGTYPE_p_Pixy__Unit);
  }
  
  (arg1)->trackEnemyUnit(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_setHP(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Entity *arg1 = (Pixy::Entity *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Pixy::Entity::setHP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Entity::setHP",1,"Pixy::Entity *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::Entity::setHP",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Entity,0))){
    SWIG_fail_ptr("Entity_setHP",1,SWIGTYPE_p_Pixy__Entity);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setHP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Entity(void *obj) {
Pixy::Entity *arg1 = (Pixy::Entity *) obj;
delete arg1;
}
static swig_lua_method swig_Pixy_Entity_methods[] = {
    {"setup", _wrap_Entity_setup}, 
    {"live", _wrap_Entity_live}, 
    {"die", _wrap_Entity_die}, 
    {"attachSpell", _wrap_Entity_attachSpell}, 
    {"attachBuff", _wrap_Entity_attachBuff}, 
    {"getText", _wrap_Entity_getText}, 
    {"setText", _wrap_Entity_setText}, 
    {"updateTextOverlay", _wrap_Entity_updateTextOverlay}, 
    {"hide", _wrap_Entity_hide}, 
    {"show", _wrap_Entity_show}, 
    {"trackEnemyUnit", _wrap_Entity_trackEnemyUnit}, 
    {"setHP", _wrap_Entity_setHP}, 
    {0,0}
};
static swig_lua_attribute swig_Pixy_Entity_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Pixy_Entity_bases[] = {0,0,0,0,0};
static const char *swig_Pixy_Entity_base_names[] = {"Pixy::BaseEntity *","Pixy::Caster *","Pixy::Animable *","Pixy::Renderable *",0};
static swig_lua_class _wrap_class_Pixy_Entity = { "Entity", &SWIGTYPE_p_Pixy__Entity,0, swig_delete_Entity, swig_Pixy_Entity_methods, swig_Pixy_Entity_attributes, swig_Pixy_Entity_bases, swig_Pixy_Entity_base_names };

static int _wrap_new_Puppet(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Puppet *result = 0 ;
  
  SWIG_check_num_args("Pixy::Puppet::Puppet",0,0)
  result = (Pixy::Puppet *)new Pixy::Puppet();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__Puppet,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Puppet_live(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Puppet *arg1 = (Pixy::Puppet *) 0 ;
  bool result;
  
  SWIG_check_num_args("Pixy::Puppet::live",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Puppet::live",1,"Pixy::Puppet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Puppet,0))){
    SWIG_fail_ptr("Puppet_live",1,SWIGTYPE_p_Pixy__Puppet);
  }
  
  result = (bool)(arg1)->live();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Puppet_attachDeck(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Puppet *arg1 = (Pixy::Puppet *) 0 ;
  Pixy::BaseDeck *arg2 = (Pixy::BaseDeck *) 0 ;
  
  SWIG_check_num_args("Pixy::Puppet::attachDeck",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Puppet::attachDeck",1,"Pixy::Puppet *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::Puppet::attachDeck",2,"Pixy::BaseDeck *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Puppet,0))){
    SWIG_fail_ptr("Puppet_attachDeck",1,SWIGTYPE_p_Pixy__Puppet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Pixy__BaseDeck,0))){
    SWIG_fail_ptr("Puppet_attachDeck",2,SWIGTYPE_p_Pixy__BaseDeck);
  }
  
  (arg1)->attachDeck(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Puppet_detachDeck(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Puppet *arg1 = (Pixy::Puppet *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Pixy::Puppet::detachDeck",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Puppet::detachDeck",1,"Pixy::Puppet *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Pixy::Puppet::detachDeck",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Puppet,0))){
    SWIG_fail_ptr("Puppet_detachDeck",1,SWIGTYPE_p_Pixy__Puppet);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->detachDeck((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Puppet__setDeck(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Puppet *arg1 = (Pixy::Puppet *) 0 ;
  Pixy::BaseDeck *arg2 = (Pixy::BaseDeck *) 0 ;
  
  SWIG_check_num_args("Pixy::Puppet::_setDeck",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Puppet::_setDeck",1,"Pixy::Puppet *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::Puppet::_setDeck",2,"Pixy::BaseDeck *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Puppet,0))){
    SWIG_fail_ptr("Puppet__setDeck",1,SWIGTYPE_p_Pixy__Puppet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Pixy__BaseDeck,0))){
    SWIG_fail_ptr("Puppet__setDeck",2,SWIGTYPE_p_Pixy__BaseDeck);
  }
  
  (arg1)->_setDeck(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Puppet_getDeck(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Puppet *arg1 = (Pixy::Puppet *) 0 ;
  Pixy::Puppet::deck_t *result = 0 ;
  
  SWIG_check_num_args("Pixy::Puppet::getDeck",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Puppet::getDeck",1,"Pixy::Puppet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Puppet,0))){
    SWIG_fail_ptr("Puppet_getDeck",1,SWIGTYPE_p_Pixy__Puppet);
  }
  
  result = (Pixy::Puppet::deck_t *)(arg1)->getDeck();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__Deck,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Puppet_getDecks(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Puppet *arg1 = (Pixy::Puppet *) 0 ;
  Pixy::Puppet::decks_t *result = 0 ;
  
  SWIG_check_num_args("Pixy::Puppet::getDecks",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Puppet::getDecks",1,"Pixy::Puppet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Puppet,0))){
    SWIG_fail_ptr("Puppet_getDecks",1,SWIGTYPE_p_Pixy__Puppet);
  }
  
  result = (Pixy::Puppet::decks_t *) &((Pixy::Puppet const *)arg1)->getDecks();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__listT_Pixy__Deck_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Puppet_hasDeck(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Puppet *arg1 = (Pixy::Puppet *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("Pixy::Puppet::hasDeck",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Puppet::hasDeck",1,"Pixy::Puppet const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Pixy::Puppet::hasDeck",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Puppet,0))){
    SWIG_fail_ptr("Puppet_hasDeck",1,SWIGTYPE_p_Pixy__Puppet);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (bool)((Pixy::Puppet const *)arg1)->hasDeck((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Puppet_nrDecks(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Puppet *arg1 = (Pixy::Puppet *) 0 ;
  int result;
  
  SWIG_check_num_args("Pixy::Puppet::nrDecks",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Puppet::nrDecks",1,"Pixy::Puppet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Puppet,0))){
    SWIG_fail_ptr("Puppet_nrDecks",1,SWIGTYPE_p_Pixy__Puppet);
  }
  
  result = (int)((Pixy::Puppet const *)arg1)->nrDecks();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Puppet_attachUnit(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Puppet *arg1 = (Pixy::Puppet *) 0 ;
  Pixy::Puppet::unit_t *arg2 = (Pixy::Puppet::unit_t *) 0 ;
  
  SWIG_check_num_args("Pixy::Puppet::attachUnit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Puppet::attachUnit",1,"Pixy::Puppet *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::Puppet::attachUnit",2,"Pixy::Puppet::unit_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Puppet,0))){
    SWIG_fail_ptr("Puppet_attachUnit",1,SWIGTYPE_p_Pixy__Puppet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Pixy__Unit,0))){
    SWIG_fail_ptr("Puppet_attachUnit",2,SWIGTYPE_p_Pixy__Unit);
  }
  
  (arg1)->attachUnit(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Puppet_detachUnit__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Puppet *arg1 = (Pixy::Puppet *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("Pixy::Puppet::detachUnit",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Puppet::detachUnit",1,"Pixy::Puppet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::Puppet::detachUnit",2,"int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Pixy::Puppet::detachUnit",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Puppet,0))){
    SWIG_fail_ptr("Puppet_detachUnit",1,SWIGTYPE_p_Pixy__Puppet);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->detachUnit(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Puppet_detachUnit__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Puppet *arg1 = (Pixy::Puppet *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Pixy::Puppet::detachUnit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Puppet::detachUnit",1,"Pixy::Puppet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::Puppet::detachUnit",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Puppet,0))){
    SWIG_fail_ptr("Puppet_detachUnit",1,SWIGTYPE_p_Pixy__Puppet);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->detachUnit(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Puppet_detachUnit(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__Puppet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Puppet_detachUnit__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__Puppet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Puppet_detachUnit__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Puppet_detachUnit'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Pixy::Puppet::detachUnit(int,bool)\n"
    "    Pixy::Puppet::detachUnit(int)\n");
  lua_error(L);return 0;
}


static int _wrap_Puppet_getUnit(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Puppet *arg1 = (Pixy::Puppet *) 0 ;
  int arg2 ;
  Pixy::Puppet::unit_t *result = 0 ;
  
  SWIG_check_num_args("Pixy::Puppet::getUnit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Puppet::getUnit",1,"Pixy::Puppet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::Puppet::getUnit",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Puppet,0))){
    SWIG_fail_ptr("Puppet_getUnit",1,SWIGTYPE_p_Pixy__Puppet);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (Pixy::Puppet::unit_t *)(arg1)->getUnit(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__Unit,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Puppet_getUnits(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Puppet *arg1 = (Pixy::Puppet *) 0 ;
  Pixy::Puppet::units_t *result = 0 ;
  
  SWIG_check_num_args("Pixy::Puppet::getUnits",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Puppet::getUnits",1,"Pixy::Puppet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Puppet,0))){
    SWIG_fail_ptr("Puppet_getUnits",1,SWIGTYPE_p_Pixy__Puppet);
  }
  
  result = (Pixy::Puppet::units_t *) &(arg1)->getUnits();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__listT_Pixy__Unit_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Puppet_hasUnitWithName(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Puppet *arg1 = (Pixy::Puppet *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("Pixy::Puppet::hasUnitWithName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Puppet::hasUnitWithName",1,"Pixy::Puppet const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Pixy::Puppet::hasUnitWithName",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Puppet,0))){
    SWIG_fail_ptr("Puppet_hasUnitWithName",1,SWIGTYPE_p_Pixy__Puppet);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (bool)((Pixy::Puppet const *)arg1)->hasUnitWithName((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Puppet_updateTextOverlay(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Puppet *arg1 = (Pixy::Puppet *) 0 ;
  
  SWIG_check_num_args("Pixy::Puppet::updateTextOverlay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Puppet::updateTextOverlay",1,"Pixy::Puppet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Puppet,0))){
    SWIG_fail_ptr("Puppet_updateTextOverlay",1,SWIGTYPE_p_Pixy__Puppet);
  }
  
  (arg1)->updateTextOverlay();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Puppet(void *obj) {
Pixy::Puppet *arg1 = (Pixy::Puppet *) obj;
delete arg1;
}
static swig_lua_method swig_Pixy_Puppet_methods[] = {
    {"live", _wrap_Puppet_live}, 
    {"attachDeck", _wrap_Puppet_attachDeck}, 
    {"detachDeck", _wrap_Puppet_detachDeck}, 
    {"_setDeck", _wrap_Puppet__setDeck}, 
    {"getDeck", _wrap_Puppet_getDeck}, 
    {"getDecks", _wrap_Puppet_getDecks}, 
    {"hasDeck", _wrap_Puppet_hasDeck}, 
    {"nrDecks", _wrap_Puppet_nrDecks}, 
    {"attachUnit", _wrap_Puppet_attachUnit}, 
    {"detachUnit", _wrap_Puppet_detachUnit}, 
    {"getUnit", _wrap_Puppet_getUnit}, 
    {"getUnits", _wrap_Puppet_getUnits}, 
    {"hasUnitWithName", _wrap_Puppet_hasUnitWithName}, 
    {"updateTextOverlay", _wrap_Puppet_updateTextOverlay}, 
    {0,0}
};
static swig_lua_attribute swig_Pixy_Puppet_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Pixy_Puppet_bases[] = {0,0,0};
static const char *swig_Pixy_Puppet_base_names[] = {"Pixy::Entity *","Pixy::BasePuppet *",0};
static swig_lua_class _wrap_class_Pixy_Puppet = { "Puppet", &SWIGTYPE_p_Pixy__Puppet,_wrap_new_Puppet, swig_delete_Puppet, swig_Pixy_Puppet_methods, swig_Pixy_Puppet_attributes, swig_Pixy_Puppet_bases, swig_Pixy_Puppet_base_names };

static int _wrap_new_Spell__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Spell *result = 0 ;
  
  SWIG_check_num_args("Pixy::Spell::Spell",0,0)
  result = (Pixy::Spell *)new Pixy::Spell();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__Spell,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Spell__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Spell *arg1 = 0 ;
  Pixy::Spell *result = 0 ;
  
  SWIG_check_num_args("Pixy::Spell::Spell",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Pixy::Spell::Spell",1,"Pixy::Spell const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Spell,0))){
    SWIG_fail_ptr("new_Spell",1,SWIGTYPE_p_Pixy__Spell);
  }
  
  result = (Pixy::Spell *)new Pixy::Spell((Pixy::Spell const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__Spell,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Spell(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Spell__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__Spell, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Spell__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Spell'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Pixy::Spell::Spell()\n"
    "    Pixy::Spell::Spell(Pixy::Spell const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Spell_setImageSet(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Spell *arg1 = (Pixy::Spell *) 0 ;
  std::string arg2 ;
  
  SWIG_check_num_args("Pixy::Spell::setImageSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Spell::setImageSet",1,"Pixy::Spell *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Pixy::Spell::setImageSet",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Spell,0))){
    SWIG_fail_ptr("Spell_setImageSet",1,SWIGTYPE_p_Pixy__Spell);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  (arg1)->setImageSet(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Spell_setImageName(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Spell *arg1 = (Pixy::Spell *) 0 ;
  std::string arg2 ;
  
  SWIG_check_num_args("Pixy::Spell::setImageName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Spell::setImageName",1,"Pixy::Spell *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Pixy::Spell::setImageName",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Spell,0))){
    SWIG_fail_ptr("Spell_setImageName",1,SWIGTYPE_p_Pixy__Spell);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  (arg1)->setImageName(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Spell_setButton(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Spell *arg1 = (Pixy::Spell *) 0 ;
  CEGUI::Window *arg2 = (CEGUI::Window *) 0 ;
  
  SWIG_check_num_args("Pixy::Spell::setButton",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Spell::setButton",1,"Pixy::Spell *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::Spell::setButton",2,"CEGUI::Window *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Spell,0))){
    SWIG_fail_ptr("Spell_setButton",1,SWIGTYPE_p_Pixy__Spell);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CEGUI__Window,0))){
    SWIG_fail_ptr("Spell_setButton",2,SWIGTYPE_p_CEGUI__Window);
  }
  
  (arg1)->setButton(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Spell_getImageSet(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Spell *arg1 = (Pixy::Spell *) 0 ;
  string result;
  
  SWIG_check_num_args("Pixy::Spell::getImageSet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Spell::getImageSet",1,"Pixy::Spell *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Spell,0))){
    SWIG_fail_ptr("Spell_getImageSet",1,SWIGTYPE_p_Pixy__Spell);
  }
  
  result = (arg1)->getImageSet();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Spell_getImageName(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Spell *arg1 = (Pixy::Spell *) 0 ;
  string result;
  
  SWIG_check_num_args("Pixy::Spell::getImageName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Spell::getImageName",1,"Pixy::Spell *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Spell,0))){
    SWIG_fail_ptr("Spell_getImageName",1,SWIGTYPE_p_Pixy__Spell);
  }
  
  result = (arg1)->getImageName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Spell_getButton(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Spell *arg1 = (Pixy::Spell *) 0 ;
  CEGUI::Window *result = 0 ;
  
  SWIG_check_num_args("Pixy::Spell::getButton",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Spell::getButton",1,"Pixy::Spell *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Spell,0))){
    SWIG_fail_ptr("Spell_getButton",1,SWIGTYPE_p_Pixy__Spell);
  }
  
  result = (CEGUI::Window *)(arg1)->getButton();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CEGUI__Window,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Spell_getTooltip(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Spell *arg1 = (Pixy::Spell *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Pixy::Spell::getTooltip",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Spell::getTooltip",1,"Pixy::Spell const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Spell,0))){
    SWIG_fail_ptr("Spell_getTooltip",1,SWIGTYPE_p_Pixy__Spell);
  }
  
  result = ((Pixy::Spell const *)arg1)->getTooltip();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Spell_updateTooltip(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Spell *arg1 = (Pixy::Spell *) 0 ;
  
  SWIG_check_num_args("Pixy::Spell::updateTooltip",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Spell::updateTooltip",1,"Pixy::Spell *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Spell,0))){
    SWIG_fail_ptr("Spell_updateTooltip",1,SWIGTYPE_p_Pixy__Spell);
  }
  
  (arg1)->updateTooltip();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Spell(void *obj) {
Pixy::Spell *arg1 = (Pixy::Spell *) obj;
delete arg1;
}
static swig_lua_method swig_Pixy_Spell_methods[] = {
    {"setImageSet", _wrap_Spell_setImageSet}, 
    {"setImageName", _wrap_Spell_setImageName}, 
    {"setButton", _wrap_Spell_setButton}, 
    {"getImageSet", _wrap_Spell_getImageSet}, 
    {"getImageName", _wrap_Spell_getImageName}, 
    {"getButton", _wrap_Spell_getButton}, 
    {"getTooltip", _wrap_Spell_getTooltip}, 
    {"updateTooltip", _wrap_Spell_updateTooltip}, 
    {0,0}
};
static swig_lua_attribute swig_Pixy_Spell_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Pixy_Spell_bases[] = {0,0};
static const char *swig_Pixy_Spell_base_names[] = {"Pixy::BaseSpell *",0};
static swig_lua_class _wrap_class_Pixy_Spell = { "Spell", &SWIGTYPE_p_Pixy__Spell,_wrap_new_Spell, swig_delete_Spell, swig_Pixy_Spell_methods, swig_Pixy_Spell_attributes, swig_Pixy_Spell_bases, swig_Pixy_Spell_base_names };

static int _wrap_new_Unit__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Unit *result = 0 ;
  
  SWIG_check_num_args("Pixy::Unit::Unit",0,0)
  result = (Pixy::Unit *)new Pixy::Unit();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__Unit,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Unit__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Unit *arg1 = 0 ;
  Pixy::Unit *result = 0 ;
  
  SWIG_check_num_args("Pixy::Unit::Unit",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Pixy::Unit::Unit",1,"Pixy::Unit const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Unit,0))){
    SWIG_fail_ptr("new_Unit",1,SWIGTYPE_p_Pixy__Unit);
  }
  
  result = (Pixy::Unit *)new Pixy::Unit((Pixy::Unit const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__Unit,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Unit(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Unit__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__Unit, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Unit__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Unit'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Pixy::Unit::Unit()\n"
    "    Pixy::Unit::Unit(Pixy::Unit const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Unit_live(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Unit *arg1 = (Pixy::Unit *) 0 ;
  bool result;
  
  SWIG_check_num_args("Pixy::Unit::live",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Unit::live",1,"Pixy::Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Unit,0))){
    SWIG_fail_ptr("Unit_live",1,SWIGTYPE_p_Pixy__Unit);
  }
  
  result = (bool)(arg1)->live();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_die(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Unit *arg1 = (Pixy::Unit *) 0 ;
  
  SWIG_check_num_args("Pixy::Unit::die",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Unit::die",1,"Pixy::Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Unit,0))){
    SWIG_fail_ptr("Unit_die",1,SWIGTYPE_p_Pixy__Unit);
  }
  
  (arg1)->die();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_attack__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Unit *arg1 = (Pixy::Unit *) 0 ;
  Pixy::Puppet *arg2 = (Pixy::Puppet *) 0 ;
  bool result;
  
  SWIG_check_num_args("Pixy::Unit::attack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Unit::attack",1,"Pixy::Unit *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::Unit::attack",2,"Pixy::Puppet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Unit,0))){
    SWIG_fail_ptr("Unit_attack",1,SWIGTYPE_p_Pixy__Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Pixy__Puppet,0))){
    SWIG_fail_ptr("Unit_attack",2,SWIGTYPE_p_Pixy__Puppet);
  }
  
  result = (bool)(arg1)->attack(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_attack__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Unit *arg1 = (Pixy::Unit *) 0 ;
  Pixy::Unit *arg2 = (Pixy::Unit *) 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("Pixy::Unit::attack",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Unit::attack",1,"Pixy::Unit *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::Unit::attack",2,"Pixy::Unit *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Pixy::Unit::attack",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Unit,0))){
    SWIG_fail_ptr("Unit_attack",1,SWIGTYPE_p_Pixy__Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Pixy__Unit,0))){
    SWIG_fail_ptr("Unit_attack",2,SWIGTYPE_p_Pixy__Unit);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)(arg1)->attack(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_attack__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Unit *arg1 = (Pixy::Unit *) 0 ;
  Pixy::Unit *arg2 = (Pixy::Unit *) 0 ;
  bool result;
  
  SWIG_check_num_args("Pixy::Unit::attack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Unit::attack",1,"Pixy::Unit *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::Unit::attack",2,"Pixy::Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Unit,0))){
    SWIG_fail_ptr("Unit_attack",1,SWIGTYPE_p_Pixy__Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Pixy__Unit,0))){
    SWIG_fail_ptr("Unit_attack",2,SWIGTYPE_p_Pixy__Unit);
  }
  
  result = (bool)(arg1)->attack(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_attack(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__Unit, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Pixy__Puppet, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Unit_attack__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__Unit, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Pixy__Unit, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Unit_attack__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__Unit, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Pixy__Unit, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Unit_attack__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Unit_attack'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Pixy::Unit::attack(Pixy::Puppet *)\n"
    "    Pixy::Unit::attack(Pixy::Unit *,bool)\n"
    "    Pixy::Unit::attack(Pixy::Unit *)\n");
  lua_error(L);return 0;
}


static int _wrap_Unit_getOwner(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Unit *arg1 = (Pixy::Unit *) 0 ;
  Pixy::Puppet *result = 0 ;
  
  SWIG_check_num_args("Pixy::Unit::getOwner",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Unit::getOwner",1,"Pixy::Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Unit,0))){
    SWIG_fail_ptr("Unit_getOwner",1,SWIGTYPE_p_Pixy__Unit);
  }
  
  result = (Pixy::Puppet *)((Pixy::Unit const *)arg1)->getOwner();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__Puppet,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_getAttackOrder(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Unit *arg1 = (Pixy::Unit *) 0 ;
  int result;
  
  SWIG_check_num_args("Pixy::Unit::getAttackOrder",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Unit::getAttackOrder",1,"Pixy::Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Unit,0))){
    SWIG_fail_ptr("Unit_getAttackOrder",1,SWIGTYPE_p_Pixy__Unit);
  }
  
  result = (int)((Pixy::Unit const *)arg1)->getAttackOrder();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_setAttackOrder(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Unit *arg1 = (Pixy::Unit *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Pixy::Unit::setAttackOrder",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Unit::setAttackOrder",1,"Pixy::Unit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::Unit::setAttackOrder",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Unit,0))){
    SWIG_fail_ptr("Unit_setAttackOrder",1,SWIGTYPE_p_Pixy__Unit);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setAttackOrder(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_getBlockTarget(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Unit *arg1 = (Pixy::Unit *) 0 ;
  Pixy::Unit *result = 0 ;
  
  SWIG_check_num_args("Pixy::Unit::getBlockTarget",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Unit::getBlockTarget",1,"Pixy::Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Unit,0))){
    SWIG_fail_ptr("Unit_getBlockTarget",1,SWIGTYPE_p_Pixy__Unit);
  }
  
  result = (Pixy::Unit *)((Pixy::Unit const *)arg1)->getBlockTarget();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__Unit,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_setBlockTarget(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Unit *arg1 = (Pixy::Unit *) 0 ;
  Pixy::Unit *arg2 = (Pixy::Unit *) (Pixy::Unit *)0 ;
  
  SWIG_check_num_args("Pixy::Unit::setBlockTarget",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Unit::setBlockTarget",1,"Pixy::Unit *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::Unit::setBlockTarget",2,"Pixy::Unit *const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Unit,0))){
    SWIG_fail_ptr("Unit_setBlockTarget",1,SWIGTYPE_p_Pixy__Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Pixy__Unit,0))){
    SWIG_fail_ptr("Unit_setBlockTarget",2,SWIGTYPE_p_Pixy__Unit);
  }
  
  (arg1)->setBlockTarget(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_getAttackTarget(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Unit *arg1 = (Pixy::Unit *) 0 ;
  Pixy::Entity *result = 0 ;
  
  SWIG_check_num_args("Pixy::Unit::getAttackTarget",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Unit::getAttackTarget",1,"Pixy::Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Unit,0))){
    SWIG_fail_ptr("Unit_getAttackTarget",1,SWIGTYPE_p_Pixy__Unit);
  }
  
  result = (Pixy::Entity *)((Pixy::Unit const *)arg1)->getAttackTarget();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__Entity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_setAttackTarget(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Unit *arg1 = (Pixy::Unit *) 0 ;
  Pixy::Entity *arg2 = (Pixy::Entity *) (Pixy::Entity *)0 ;
  
  SWIG_check_num_args("Pixy::Unit::setAttackTarget",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Unit::setAttackTarget",1,"Pixy::Unit *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::Unit::setAttackTarget",2,"Pixy::Entity *const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Unit,0))){
    SWIG_fail_ptr("Unit_setAttackTarget",1,SWIGTYPE_p_Pixy__Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Pixy__Entity,0))){
    SWIG_fail_ptr("Unit_setAttackTarget",2,SWIGTYPE_p_Pixy__Entity);
  }
  
  (arg1)->setAttackTarget(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_setAP(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Unit *arg1 = (Pixy::Unit *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Pixy::Unit::setAP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Unit::setAP",1,"Pixy::Unit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::Unit::setAP",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Unit,0))){
    SWIG_fail_ptr("Unit_setAP",1,SWIGTYPE_p_Pixy__Unit);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setAP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_setHP(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Unit *arg1 = (Pixy::Unit *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Pixy::Unit::setHP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Unit::setHP",1,"Pixy::Unit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::Unit::setHP",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Unit,0))){
    SWIG_fail_ptr("Unit_setHP",1,SWIGTYPE_p_Pixy__Unit);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setHP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_updateTextOverlay(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Unit *arg1 = (Pixy::Unit *) 0 ;
  
  SWIG_check_num_args("Pixy::Unit::updateTextOverlay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Unit::updateTextOverlay",1,"Pixy::Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Unit,0))){
    SWIG_fail_ptr("Unit_updateTextOverlay",1,SWIGTYPE_p_Pixy__Unit);
  }
  
  (arg1)->updateTextOverlay();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_reset(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Unit *arg1 = (Pixy::Unit *) 0 ;
  
  SWIG_check_num_args("Pixy::Unit::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Unit::reset",1,"Pixy::Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Unit,0))){
    SWIG_fail_ptr("Unit_reset",1,SWIGTYPE_p_Pixy__Unit);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_rest(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Unit *arg1 = (Pixy::Unit *) 0 ;
  
  SWIG_check_num_args("Pixy::Unit::rest",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Unit::rest",1,"Pixy::Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Unit,0))){
    SWIG_fail_ptr("Unit_rest",1,SWIGTYPE_p_Pixy__Unit);
  }
  
  (arg1)->rest();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_getUp(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Unit *arg1 = (Pixy::Unit *) 0 ;
  
  SWIG_check_num_args("Pixy::Unit::getUp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Unit::getUp",1,"Pixy::Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Unit,0))){
    SWIG_fail_ptr("Unit_getUp",1,SWIGTYPE_p_Pixy__Unit);
  }
  
  (arg1)->getUp();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_isDying(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::Unit *arg1 = (Pixy::Unit *) 0 ;
  bool result;
  
  SWIG_check_num_args("Pixy::Unit::isDying",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::Unit::isDying",1,"Pixy::Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__Unit,0))){
    SWIG_fail_ptr("Unit_isDying",1,SWIGTYPE_p_Pixy__Unit);
  }
  
  result = (bool)((Pixy::Unit const *)arg1)->isDying();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Unit(void *obj) {
Pixy::Unit *arg1 = (Pixy::Unit *) obj;
delete arg1;
}
static swig_lua_method swig_Pixy_Unit_methods[] = {
    {"live", _wrap_Unit_live}, 
    {"die", _wrap_Unit_die}, 
    {"attack", _wrap_Unit_attack}, 
    {"getOwner", _wrap_Unit_getOwner}, 
    {"getAttackOrder", _wrap_Unit_getAttackOrder}, 
    {"setAttackOrder", _wrap_Unit_setAttackOrder}, 
    {"getBlockTarget", _wrap_Unit_getBlockTarget}, 
    {"setBlockTarget", _wrap_Unit_setBlockTarget}, 
    {"getAttackTarget", _wrap_Unit_getAttackTarget}, 
    {"setAttackTarget", _wrap_Unit_setAttackTarget}, 
    {"setAP", _wrap_Unit_setAP}, 
    {"setHP", _wrap_Unit_setHP}, 
    {"updateTextOverlay", _wrap_Unit_updateTextOverlay}, 
    {"reset", _wrap_Unit_reset}, 
    {"rest", _wrap_Unit_rest}, 
    {"getUp", _wrap_Unit_getUp}, 
    {"isDying", _wrap_Unit_isDying}, 
    {0,0}
};
static swig_lua_attribute swig_Pixy_Unit_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Pixy_Unit_bases[] = {0,0,0,0};
static const char *swig_Pixy_Unit_base_names[] = {"Pixy::Entity *","Pixy::BaseUnit *","Pixy::Mobile *",0};
static swig_lua_class _wrap_class_Pixy_Unit = { "Unit", &SWIGTYPE_p_Pixy__Unit,_wrap_new_Unit, swig_delete_Unit, swig_Pixy_Unit_methods, swig_Pixy_Unit_attributes, swig_Pixy_Unit_bases, swig_Pixy_Unit_base_names };

static int _wrap_GameManager_getSingleton(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GameManager *result = 0 ;
  
  SWIG_check_num_args("Pixy::GameManager::getSingleton",0,0)
  result = (Pixy::GameManager *) &Pixy::GameManager::getSingleton();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__GameManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameManager_getSingletonPtr(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GameManager *result = 0 ;
  
  SWIG_check_num_args("Pixy::GameManager::getSingletonPtr",0,0)
  result = (Pixy::GameManager *)Pixy::GameManager::getSingletonPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__GameManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameManager_changeState(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GameManager *arg1 = (Pixy::GameManager *) 0 ;
  Pixy::GameState *arg2 = (Pixy::GameState *) 0 ;
  
  SWIG_check_num_args("Pixy::GameManager::changeState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GameManager::changeState",1,"Pixy::GameManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::GameManager::changeState",2,"Pixy::GameState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GameManager,0))){
    SWIG_fail_ptr("GameManager_changeState",1,SWIGTYPE_p_Pixy__GameManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Pixy__GameState,0))){
    SWIG_fail_ptr("GameManager_changeState",2,SWIGTYPE_p_Pixy__GameState);
  }
  
  (arg1)->changeState(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameManager_requestShutdown(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GameManager *arg1 = (Pixy::GameManager *) 0 ;
  
  SWIG_check_num_args("Pixy::GameManager::requestShutdown",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GameManager::requestShutdown",1,"Pixy::GameManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GameManager,0))){
    SWIG_fail_ptr("GameManager_requestShutdown",1,SWIGTYPE_p_Pixy__GameManager);
  }
  
  (arg1)->requestShutdown();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GameManager(void *obj) {
Pixy::GameManager *arg1 = (Pixy::GameManager *) obj;
delete arg1;
}
static swig_lua_method swig_Pixy_GameManager_methods[] = {
    {"changeState", _wrap_GameManager_changeState}, 
    {"requestShutdown", _wrap_GameManager_requestShutdown}, 
    {0,0}
};
static swig_lua_attribute swig_Pixy_GameManager_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Pixy_GameManager_bases[] = {0};
static const char *swig_Pixy_GameManager_base_names[] = {0};
static swig_lua_class _wrap_class_Pixy_GameManager = { "GameManager", &SWIGTYPE_p_Pixy__GameManager,0, swig_delete_GameManager, swig_Pixy_GameManager_methods, swig_Pixy_GameManager_attributes, swig_Pixy_GameManager_bases, swig_Pixy_GameManager_base_names };

static int _wrap_InputManager_getSingletonPtr(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::InputManager *result = 0 ;
  
  SWIG_check_num_args("Pixy::InputManager::getSingletonPtr",0,0)
  result = (Pixy::InputManager *)Pixy::InputManager::getSingletonPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__InputManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputManager_getMouse(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::InputManager *arg1 = (Pixy::InputManager *) 0 ;
  OIS::Mouse *result = 0 ;
  
  SWIG_check_num_args("Pixy::InputManager::getMouse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::InputManager::getMouse",1,"Pixy::InputManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__InputManager,0))){
    SWIG_fail_ptr("InputManager_getMouse",1,SWIGTYPE_p_Pixy__InputManager);
  }
  
  result = (OIS::Mouse *)(arg1)->getMouse();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OIS__Mouse,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputManager_getKeyboard(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::InputManager *arg1 = (Pixy::InputManager *) 0 ;
  OIS::Keyboard *result = 0 ;
  
  SWIG_check_num_args("Pixy::InputManager::getKeyboard",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::InputManager::getKeyboard",1,"Pixy::InputManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__InputManager,0))){
    SWIG_fail_ptr("InputManager_getKeyboard",1,SWIGTYPE_p_Pixy__InputManager);
  }
  
  result = (OIS::Keyboard *)(arg1)->getKeyboard();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OIS__Keyboard,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InputManager(void *obj) {
Pixy::InputManager *arg1 = (Pixy::InputManager *) obj;
delete arg1;
}
static swig_lua_method swig_Pixy_InputManager_methods[] = {
    {"getMouse", _wrap_InputManager_getMouse}, 
    {"getKeyboard", _wrap_InputManager_getKeyboard}, 
    {0,0}
};
static swig_lua_attribute swig_Pixy_InputManager_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Pixy_InputManager_bases[] = {0};
static const char *swig_Pixy_InputManager_base_names[] = {0};
static swig_lua_class _wrap_class_Pixy_InputManager = { "InputManager", &SWIGTYPE_p_Pixy__InputManager,0, swig_delete_InputManager, swig_Pixy_InputManager_methods, swig_Pixy_InputManager_attributes, swig_Pixy_InputManager_bases, swig_Pixy_InputManager_base_names };

static int _wrap_NetworkManager_getSingletonPtr(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::NetworkManager *result = 0 ;
  
  SWIG_check_num_args("Pixy::NetworkManager::getSingletonPtr",0,0)
  result = (Pixy::NetworkManager *)Pixy::NetworkManager::getSingletonPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__NetworkManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_getSingleton(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::NetworkManager *result = 0 ;
  
  SWIG_check_num_args("Pixy::NetworkManager::getSingleton",0,0)
  result = (Pixy::NetworkManager *) &Pixy::NetworkManager::getSingleton();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__NetworkManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_connect(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::NetworkManager *arg1 = (Pixy::NetworkManager *) 0 ;
  bool result;
  
  SWIG_check_num_args("Pixy::NetworkManager::connect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::NetworkManager::connect",1,"Pixy::NetworkManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_connect",1,SWIGTYPE_p_Pixy__NetworkManager);
  }
  
  result = (bool)(arg1)->connect();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_disconnect(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::NetworkManager *arg1 = (Pixy::NetworkManager *) 0 ;
  bool result;
  
  SWIG_check_num_args("Pixy::NetworkManager::disconnect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::NetworkManager::disconnect",1,"Pixy::NetworkManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_disconnect",1,SWIGTYPE_p_Pixy__NetworkManager);
  }
  
  result = (bool)(arg1)->disconnect();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_send(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::NetworkManager *arg1 = (Pixy::NetworkManager *) 0 ;
  Pixy::Event *arg2 = 0 ;
  
  SWIG_check_num_args("Pixy::NetworkManager::send",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::NetworkManager::send",1,"Pixy::NetworkManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Pixy::NetworkManager::send",2,"Pixy::Event const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_send",1,SWIGTYPE_p_Pixy__NetworkManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Pixy__Event,0))){
    SWIG_fail_ptr("NetworkManager_send",2,SWIGTYPE_p_Pixy__Event);
  }
  
  (arg1)->send((Pixy::Event const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_isConnected(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::NetworkManager *arg1 = (Pixy::NetworkManager *) 0 ;
  bool result;
  
  SWIG_check_num_args("Pixy::NetworkManager::isConnected",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::NetworkManager::isConnected",1,"Pixy::NetworkManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_isConnected",1,SWIGTYPE_p_Pixy__NetworkManager);
  }
  
  result = (bool)((Pixy::NetworkManager const *)arg1)->isConnected();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NetworkManager(void *obj) {
Pixy::NetworkManager *arg1 = (Pixy::NetworkManager *) obj;
delete arg1;
}
static swig_lua_method swig_Pixy_NetworkManager_methods[] = {
    {"connect", _wrap_NetworkManager_connect}, 
    {"disconnect", _wrap_NetworkManager_disconnect}, 
    {"send", _wrap_NetworkManager_send}, 
    {"isConnected", _wrap_NetworkManager_isConnected}, 
    {0,0}
};
static swig_lua_attribute swig_Pixy_NetworkManager_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Pixy_NetworkManager_bases[] = {0};
static const char *swig_Pixy_NetworkManager_base_names[] = {0};
static swig_lua_class _wrap_class_Pixy_NetworkManager = { "NetworkManager", &SWIGTYPE_p_Pixy__NetworkManager,0, swig_delete_NetworkManager, swig_Pixy_NetworkManager_methods, swig_Pixy_NetworkManager_attributes, swig_Pixy_NetworkManager_bases, swig_Pixy_NetworkManager_base_names };

static int _wrap_GfxEngine_getSingletonPtr(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *result = 0 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::getSingletonPtr",0,0)
  result = (Pixy::GfxEngine *)Pixy::GfxEngine::getSingletonPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__GfxEngine,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_mMTOFontColor_set(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  Ogre::ColourValue *arg2 = (Ogre::ColourValue *) 0 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::mMTOFontColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::mMTOFontColor",1,"Pixy::GfxEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::GfxEngine::mMTOFontColor",2,"Ogre::ColourValue *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_mMTOFontColor_set",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__ColourValue,0))){
    SWIG_fail_ptr("GfxEngine_mMTOFontColor_set",2,SWIGTYPE_p_Ogre__ColourValue);
  }
  
  if (arg1) (arg1)->mMTOFontColor = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_mMTOFontColor_get(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  Ogre::ColourValue *result = 0 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::mMTOFontColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::mMTOFontColor",1,"Pixy::GfxEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_mMTOFontColor_get",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  result = (Ogre::ColourValue *)& ((arg1)->mMTOFontColor);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__ColourValue,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_mMTOFontName_set(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::mMTOFontName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::mMTOFontName",1,"Pixy::GfxEngine *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Pixy::GfxEngine::mMTOFontName",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_mMTOFontName_set",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->mMTOFontName = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_mMTOFontName_get(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  Ogre::String *result = 0 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::mMTOFontName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::mMTOFontName",1,"Pixy::GfxEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_mMTOFontName_get",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  result = (Ogre::String *) & ((arg1)->mMTOFontName);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_mMTOFontSize_set(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::mMTOFontSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::mMTOFontSize",1,"Pixy::GfxEngine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::GfxEngine::mMTOFontSize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_mMTOFontSize_set",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->mMTOFontSize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_mMTOFontSize_get(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  int result;
  
  SWIG_check_num_args("Pixy::GfxEngine::mMTOFontSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::mMTOFontSize",1,"Pixy::GfxEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_mMTOFontSize_get",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  result = (int) ((arg1)->mMTOFontSize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_mMTOMaterialName_set(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::mMTOMaterialName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::mMTOMaterialName",1,"Pixy::GfxEngine *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Pixy::GfxEngine::mMTOMaterialName",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_mMTOMaterialName_set",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->mMTOMaterialName = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_mMTOMaterialName_get(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  Ogre::String *result = 0 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::mMTOMaterialName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::mMTOMaterialName",1,"Pixy::GfxEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_mMTOMaterialName_get",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  result = (Ogre::String *) & ((arg1)->mMTOMaterialName);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_mPuppetPos_set(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  Vector3 *arg2 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::mPuppetPos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::mPuppetPos",1,"Pixy::GfxEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::GfxEngine::mPuppetPos",2,"Vector3 [2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_mPuppetPos_set",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("GfxEngine_mPuppetPos_set",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  {
    size_t ii;
    Vector3 *b = (Vector3 *) arg1->mPuppetPos;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((Vector3 *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_mPuppetPos_get(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  Vector3 *result = 0 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::mPuppetPos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::mPuppetPos",1,"Pixy::GfxEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_mPuppetPos_get",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  result = (Vector3 *)(Vector3 *) ((arg1)->mPuppetPos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_mPuppetScale_set(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::mPuppetScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::mPuppetScale",1,"Pixy::GfxEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::GfxEngine::mPuppetScale",2,"Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_mPuppetScale_set",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("GfxEngine_mPuppetScale_set",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  if (arg1) (arg1)->mPuppetScale = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_mPuppetScale_get(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  Vector3 *result = 0 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::mPuppetScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::mPuppetScale",1,"Pixy::GfxEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_mPuppetScale_get",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  result = (Vector3 *)& ((arg1)->mPuppetScale);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_mUnitScale_set(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::mUnitScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::mUnitScale",1,"Pixy::GfxEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::GfxEngine::mUnitScale",2,"Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_mUnitScale_set",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("GfxEngine_mUnitScale_set",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  if (arg1) (arg1)->mUnitScale = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_mUnitScale_get(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  Vector3 *result = 0 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::mUnitScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::mUnitScale",1,"Pixy::GfxEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_mUnitScale_get",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  result = (Vector3 *)& ((arg1)->mUnitScale);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_mUnitMargin_set(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::mUnitMargin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::mUnitMargin",1,"Pixy::GfxEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::GfxEngine::mUnitMargin",2,"Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_mUnitMargin_set",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("GfxEngine_mUnitMargin_set",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  if (arg1) (arg1)->mUnitMargin = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_mUnitMargin_get(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  Vector3 *result = 0 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::mUnitMargin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::mUnitMargin",1,"Pixy::GfxEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_mUnitMargin_get",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  result = (Vector3 *)& ((arg1)->mUnitMargin);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_mPuppetMargin_set(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::mPuppetMargin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::mPuppetMargin",1,"Pixy::GfxEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::GfxEngine::mPuppetMargin",2,"Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_mPuppetMargin_set",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("GfxEngine_mPuppetMargin_set",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  if (arg1) (arg1)->mPuppetMargin = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_mPuppetMargin_get(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  Vector3 *result = 0 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::mPuppetMargin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::mPuppetMargin",1,"Pixy::GfxEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_mPuppetMargin_get",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  result = (Vector3 *)& ((arg1)->mPuppetMargin);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_mPackSpacing_set(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::mPackSpacing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::mPackSpacing",1,"Pixy::GfxEngine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::GfxEngine::mPackSpacing",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_mPackSpacing_set",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->mPackSpacing = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_mPackSpacing_get(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  int result;
  
  SWIG_check_num_args("Pixy::GfxEngine::mPackSpacing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::mPackSpacing",1,"Pixy::GfxEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_mPackSpacing_get",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  result = (int) ((arg1)->mPackSpacing);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_mCameraYawPitchDist_set(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::mCameraYawPitchDist",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::mCameraYawPitchDist",1,"Pixy::GfxEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::GfxEngine::mCameraYawPitchDist",2,"Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_mCameraYawPitchDist_set",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("GfxEngine_mCameraYawPitchDist_set",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  if (arg1) (arg1)->mCameraYawPitchDist = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_mCameraYawPitchDist_get(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  Vector3 *result = 0 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::mCameraYawPitchDist",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::mCameraYawPitchDist",1,"Pixy::GfxEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_mCameraYawPitchDist_get",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  result = (Vector3 *)& ((arg1)->mCameraYawPitchDist);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_disableMouseCaptureOverUIElement(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::disableMouseCaptureOverUIElement",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::disableMouseCaptureOverUIElement",1,"Pixy::GfxEngine *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Pixy::GfxEngine::disableMouseCaptureOverUIElement",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_disableMouseCaptureOverUIElement",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->disableMouseCaptureOverUIElement((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_enableMouseCaptureOverUIElement(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::enableMouseCaptureOverUIElement",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::enableMouseCaptureOverUIElement",1,"Pixy::GfxEngine *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Pixy::GfxEngine::enableMouseCaptureOverUIElement",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_enableMouseCaptureOverUIElement",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->enableMouseCaptureOverUIElement((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_setCamera(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::setCamera",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::setCamera",1,"Pixy::GfxEngine *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Pixy::GfxEngine::setCamera",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_setCamera",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->setCamera((Ogre::String const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_createSphere__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  std::string *arg2 = 0 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::createSphere",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::createSphere",1,"Pixy::GfxEngine *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Pixy::GfxEngine::createSphere",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Pixy::GfxEngine::createSphere",3,"float const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Pixy::GfxEngine::createSphere",4,"int const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Pixy::GfxEngine::createSphere",5,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_createSphere",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  arg3 = (float const)lua_tonumber(L, 3);
  arg4 = (int const)lua_tonumber(L, 4);
  arg5 = (int const)lua_tonumber(L, 5);
  (arg1)->createSphere((std::string const &)*arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_createSphere__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  std::string *arg2 = 0 ;
  float arg3 ;
  int arg4 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::createSphere",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::createSphere",1,"Pixy::GfxEngine *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Pixy::GfxEngine::createSphere",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Pixy::GfxEngine::createSphere",3,"float const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Pixy::GfxEngine::createSphere",4,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_createSphere",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  arg3 = (float const)lua_tonumber(L, 3);
  arg4 = (int const)lua_tonumber(L, 4);
  (arg1)->createSphere((std::string const &)*arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_createSphere__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  std::string *arg2 = 0 ;
  float arg3 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::createSphere",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::createSphere",1,"Pixy::GfxEngine *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Pixy::GfxEngine::createSphere",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Pixy::GfxEngine::createSphere",3,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_createSphere",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  arg3 = (float const)lua_tonumber(L, 3);
  (arg1)->createSphere((std::string const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_createSphere(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__GfxEngine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_GfxEngine_createSphere__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__GfxEngine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_GfxEngine_createSphere__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__GfxEngine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_GfxEngine_createSphere__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'GfxEngine_createSphere'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Pixy::GfxEngine::createSphere(std::string const &,float const,int const,int const)\n"
    "    Pixy::GfxEngine::createSphere(std::string const &,float const,int const)\n"
    "    Pixy::GfxEngine::createSphere(std::string const &,float const)\n");
  lua_error(L);return 0;
}


static int _wrap_GfxEngine_switchMousePickingMode(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::switchMousePickingMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::switchMousePickingMode",1,"Pixy::GfxEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_switchMousePickingMode",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  (arg1)->switchMousePickingMode();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_getMousePickingMode(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  int result;
  
  SWIG_check_num_args("Pixy::GfxEngine::getMousePickingMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::getMousePickingMode",1,"Pixy::GfxEngine const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_getMousePickingMode",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  result = (int)((Pixy::GfxEngine const *)arg1)->getMousePickingMode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_attachToScene(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  Pixy::Entity *arg2 = (Pixy::Entity *) 0 ;
  bool result;
  
  SWIG_check_num_args("Pixy::GfxEngine::attachToScene",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::attachToScene",1,"Pixy::GfxEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::GfxEngine::attachToScene",2,"Pixy::Entity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_attachToScene",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Pixy__Entity,0))){
    SWIG_fail_ptr("GfxEngine_attachToScene",2,SWIGTYPE_p_Pixy__Entity);
  }
  
  result = (bool)(arg1)->attachToScene(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_detachFromScene(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  Pixy::Entity *arg2 = (Pixy::Entity *) 0 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::detachFromScene",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::detachFromScene",1,"Pixy::GfxEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::GfxEngine::detachFromScene",2,"Pixy::Entity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_detachFromScene",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Pixy__Entity,0))){
    SWIG_fail_ptr("GfxEngine_detachFromScene",2,SWIGTYPE_p_Pixy__Entity);
  }
  
  (arg1)->detachFromScene(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_setupMovableTextOverlays(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::setupMovableTextOverlays",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::setupMovableTextOverlays",1,"Pixy::GfxEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_setupMovableTextOverlays",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  (arg1)->setupMovableTextOverlays();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_getCameraMan(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  SdkCameraMan *result = 0 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::getCameraMan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::getCameraMan",1,"Pixy::GfxEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_getCameraMan",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  result = (SdkCameraMan *)(arg1)->getCameraMan();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OgreBites__SdkCameraMan,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_getCamera(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  Ogre::Camera *result = 0 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::getCamera",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::getCamera",1,"Pixy::GfxEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_getCamera",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  result = (Ogre::Camera *)(arg1)->getCamera();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Camera,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_getRoot(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  Ogre::Root *result = 0 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::getRoot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::getRoot",1,"Pixy::GfxEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_getRoot",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  result = (Ogre::Root *)(arg1)->getRoot();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Root,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_getSceneMgr(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  Ogre::SceneManager *result = 0 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::getSceneMgr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::getSceneMgr",1,"Pixy::GfxEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_getSceneMgr",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  result = (Ogre::SceneManager *)(arg1)->getSceneMgr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__SceneManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_getWindow(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  Ogre::RenderWindow *result = 0 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::getWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::getWindow",1,"Pixy::GfxEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_getWindow",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  result = (Ogre::RenderWindow *)(arg1)->getWindow();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__RenderWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_getViewport(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  Ogre::Viewport *result = 0 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::getViewport",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::getViewport",1,"Pixy::GfxEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_getViewport",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  result = (Ogre::Viewport *)(arg1)->getViewport();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Viewport,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_getSelected(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  Pixy::Entity *result = 0 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::getSelected",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::getSelected",1,"Pixy::GfxEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_getSelected",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  result = (Pixy::Entity *)(arg1)->getSelected();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__Entity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_updateMe(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  Pixy::Mobile *arg2 = (Pixy::Mobile *) 0 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::updateMe",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::updateMe",1,"Pixy::GfxEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::GfxEngine::updateMe",2,"Pixy::Mobile *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_updateMe",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Pixy__Mobile,0))){
    SWIG_fail_ptr("GfxEngine_updateMe",2,SWIGTYPE_p_Pixy__Mobile);
  }
  
  (arg1)->updateMe(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_stopUpdatingMe(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  Pixy::Mobile *arg2 = (Pixy::Mobile *) 0 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::stopUpdatingMe",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::stopUpdatingMe",1,"Pixy::GfxEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::GfxEngine::stopUpdatingMe",2,"Pixy::Mobile *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_stopUpdatingMe",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Pixy__Mobile,0))){
    SWIG_fail_ptr("GfxEngine_stopUpdatingMe",2,SWIGTYPE_p_Pixy__Mobile);
  }
  
  (arg1)->stopUpdatingMe(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_changeOwnership(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  Pixy::Unit *arg2 = (Pixy::Unit *) 0 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::changeOwnership",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::changeOwnership",1,"Pixy::GfxEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::GfxEngine::changeOwnership",2,"Pixy::Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_changeOwnership",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Pixy__Unit,0))){
    SWIG_fail_ptr("GfxEngine_changeOwnership",2,SWIGTYPE_p_Pixy__Unit);
  }
  
  (arg1)->changeOwnership(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_loadScene(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  std::string arg2 ;
  OgreMax::OgreMaxScene *result = 0 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::loadScene",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::loadScene",1,"Pixy::GfxEngine *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Pixy::GfxEngine::loadScene",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_loadScene",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  result = (OgreMax::OgreMaxScene *)(arg1)->loadScene(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OgreMax__OgreMaxScene,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_unloadScene(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  OgreMax::OgreMaxScene *arg2 = (OgreMax::OgreMaxScene *) 0 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::unloadScene",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::unloadScene",1,"Pixy::GfxEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::GfxEngine::unloadScene",2,"OgreMax::OgreMaxScene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_unloadScene",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OgreMax__OgreMaxScene,0))){
    SWIG_fail_ptr("GfxEngine_unloadScene",2,SWIGTYPE_p_OgreMax__OgreMaxScene);
  }
  
  (arg1)->unloadScene(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_enableCompositorEffect(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  std::string arg2 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::enableCompositorEffect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::enableCompositorEffect",1,"Pixy::GfxEngine *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Pixy::GfxEngine::enableCompositorEffect",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_enableCompositorEffect",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  (arg1)->enableCompositorEffect(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_loadDotScene(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::loadDotScene",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::loadDotScene",1,"Pixy::GfxEngine *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Pixy::GfxEngine::loadDotScene",2,"std::string");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Pixy::GfxEngine::loadDotScene",3,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_loadDotScene",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  (&arg3)->assign(lua_tostring(L,3),lua_strlen(L,3));
  (arg1)->loadDotScene(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_getScreenCoords(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  Ogre::MovableObject *arg2 = (Ogre::MovableObject *) 0 ;
  SwigValueWrapper< Ogre::Vector2 > result;
  
  SWIG_check_num_args("Pixy::GfxEngine::getScreenCoords",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::getScreenCoords",1,"Pixy::GfxEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::GfxEngine::getScreenCoords",2,"Ogre::MovableObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_getScreenCoords",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__MovableObject,0))){
    SWIG_fail_ptr("GfxEngine_getScreenCoords",2,SWIGTYPE_p_Ogre__MovableObject);
  }
  
  result = (arg1)->getScreenCoords(arg2);
  {
    Ogre::Vector2 * resultptr = new Ogre::Vector2((const Ogre::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_setYawPitchDist(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  SwigValueWrapper< Ogre::Vector3 > arg2 ;
  Ogre::Vector3 *argp2 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::setYawPitchDist",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::setYawPitchDist",1,"Pixy::GfxEngine *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Pixy::GfxEngine::setYawPitchDist",2,"Ogre::Vector3");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_setYawPitchDist",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("GfxEngine_setYawPitchDist",2,SWIGTYPE_p_Ogre__Vector3);
  }
  arg2 = *argp2;
  
  (arg1)->setYawPitchDist(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_trackNode(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  Ogre::SceneNode *arg2 = (Ogre::SceneNode *) 0 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::trackNode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::trackNode",1,"Pixy::GfxEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::GfxEngine::trackNode",2,"Ogre::SceneNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_trackNode",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("GfxEngine_trackNode",2,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  (arg1)->trackNode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine__setUserAny(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  Ogre::MovableObject *arg2 = (Ogre::MovableObject *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::_setUserAny",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::_setUserAny",1,"Pixy::GfxEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::GfxEngine::_setUserAny",2,"Ogre::MovableObject *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Pixy::GfxEngine::_setUserAny",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine__setUserAny",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__MovableObject,0))){
    SWIG_fail_ptr("GfxEngine__setUserAny",2,SWIGTYPE_p_Ogre__MovableObject);
  }
  
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"GfxEngine__setUserAny");
  (arg1)->_setUserAny(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_attachRTT(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  Pixy::OgreRTT *arg2 = (Pixy::OgreRTT *) 0 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::attachRTT",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::attachRTT",1,"Pixy::GfxEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::GfxEngine::attachRTT",2,"Pixy::OgreRTT *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_attachRTT",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Pixy__OgreRTT,0))){
    SWIG_fail_ptr("GfxEngine_attachRTT",2,SWIGTYPE_p_Pixy__OgreRTT);
  }
  
  (arg1)->attachRTT(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GfxEngine_detachRTT(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) 0 ;
  Pixy::OgreRTT *arg2 = (Pixy::OgreRTT *) 0 ;
  
  SWIG_check_num_args("Pixy::GfxEngine::detachRTT",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::GfxEngine::detachRTT",1,"Pixy::GfxEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::GfxEngine::detachRTT",2,"Pixy::OgreRTT *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__GfxEngine,0))){
    SWIG_fail_ptr("GfxEngine_detachRTT",1,SWIGTYPE_p_Pixy__GfxEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Pixy__OgreRTT,0))){
    SWIG_fail_ptr("GfxEngine_detachRTT",2,SWIGTYPE_p_Pixy__OgreRTT);
  }
  
  (arg1)->detachRTT(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GfxEngine(void *obj) {
Pixy::GfxEngine *arg1 = (Pixy::GfxEngine *) obj;
delete arg1;
}
static swig_lua_method swig_Pixy_GfxEngine_methods[] = {
    {"disableMouseCaptureOverUIElement", _wrap_GfxEngine_disableMouseCaptureOverUIElement}, 
    {"enableMouseCaptureOverUIElement", _wrap_GfxEngine_enableMouseCaptureOverUIElement}, 
    {"setCamera", _wrap_GfxEngine_setCamera}, 
    {"createSphere", _wrap_GfxEngine_createSphere}, 
    {"switchMousePickingMode", _wrap_GfxEngine_switchMousePickingMode}, 
    {"getMousePickingMode", _wrap_GfxEngine_getMousePickingMode}, 
    {"attachToScene", _wrap_GfxEngine_attachToScene}, 
    {"detachFromScene", _wrap_GfxEngine_detachFromScene}, 
    {"setupMovableTextOverlays", _wrap_GfxEngine_setupMovableTextOverlays}, 
    {"getCameraMan", _wrap_GfxEngine_getCameraMan}, 
    {"getCamera", _wrap_GfxEngine_getCamera}, 
    {"getRoot", _wrap_GfxEngine_getRoot}, 
    {"getSceneMgr", _wrap_GfxEngine_getSceneMgr}, 
    {"getWindow", _wrap_GfxEngine_getWindow}, 
    {"getViewport", _wrap_GfxEngine_getViewport}, 
    {"getSelected", _wrap_GfxEngine_getSelected}, 
    {"updateMe", _wrap_GfxEngine_updateMe}, 
    {"stopUpdatingMe", _wrap_GfxEngine_stopUpdatingMe}, 
    {"changeOwnership", _wrap_GfxEngine_changeOwnership}, 
    {"loadScene", _wrap_GfxEngine_loadScene}, 
    {"unloadScene", _wrap_GfxEngine_unloadScene}, 
    {"enableCompositorEffect", _wrap_GfxEngine_enableCompositorEffect}, 
    {"loadDotScene", _wrap_GfxEngine_loadDotScene}, 
    {"getScreenCoords", _wrap_GfxEngine_getScreenCoords}, 
    {"setYawPitchDist", _wrap_GfxEngine_setYawPitchDist}, 
    {"trackNode", _wrap_GfxEngine_trackNode}, 
    {"_setUserAny", _wrap_GfxEngine__setUserAny}, 
    {"attachRTT", _wrap_GfxEngine_attachRTT}, 
    {"detachRTT", _wrap_GfxEngine_detachRTT}, 
    {0,0}
};
static swig_lua_attribute swig_Pixy_GfxEngine_attributes[] = {
    { "mMTOFontColor", _wrap_GfxEngine_mMTOFontColor_get, _wrap_GfxEngine_mMTOFontColor_set},
    { "mMTOFontName", _wrap_GfxEngine_mMTOFontName_get, _wrap_GfxEngine_mMTOFontName_set},
    { "mMTOFontSize", _wrap_GfxEngine_mMTOFontSize_get, _wrap_GfxEngine_mMTOFontSize_set},
    { "mMTOMaterialName", _wrap_GfxEngine_mMTOMaterialName_get, _wrap_GfxEngine_mMTOMaterialName_set},
    { "mPuppetPos", _wrap_GfxEngine_mPuppetPos_get, _wrap_GfxEngine_mPuppetPos_set},
    { "mPuppetScale", _wrap_GfxEngine_mPuppetScale_get, _wrap_GfxEngine_mPuppetScale_set},
    { "mUnitScale", _wrap_GfxEngine_mUnitScale_get, _wrap_GfxEngine_mUnitScale_set},
    { "mUnitMargin", _wrap_GfxEngine_mUnitMargin_get, _wrap_GfxEngine_mUnitMargin_set},
    { "mPuppetMargin", _wrap_GfxEngine_mPuppetMargin_get, _wrap_GfxEngine_mPuppetMargin_set},
    { "mPackSpacing", _wrap_GfxEngine_mPackSpacing_get, _wrap_GfxEngine_mPackSpacing_set},
    { "mCameraYawPitchDist", _wrap_GfxEngine_mCameraYawPitchDist_get, _wrap_GfxEngine_mCameraYawPitchDist_set},
    {0,0,0}
};
static swig_lua_class *swig_Pixy_GfxEngine_bases[] = {0};
static const char *swig_Pixy_GfxEngine_base_names[] = {0};
static swig_lua_class _wrap_class_Pixy_GfxEngine = { "GfxEngine", &SWIGTYPE_p_Pixy__GfxEngine,0, swig_delete_GfxEngine, swig_Pixy_GfxEngine_methods, swig_Pixy_GfxEngine_attributes, swig_Pixy_GfxEngine_bases, swig_Pixy_GfxEngine_base_names };

static int _wrap_FxEngine_getSingleton(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::FxEngine *result = 0 ;
  
  SWIG_check_num_args("Pixy::FxEngine::getSingleton",0,0)
  result = (Pixy::FxEngine *) &Pixy::FxEngine::getSingleton();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__FxEngine,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FxEngine_getSingletonPtr(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::FxEngine *result = 0 ;
  
  SWIG_check_num_args("Pixy::FxEngine::getSingletonPtr",0,0)
  result = (Pixy::FxEngine *)Pixy::FxEngine::getSingletonPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__FxEngine,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FxEngine_loadEffect(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::FxEngine *arg1 = (Pixy::FxEngine *) 0 ;
  std::string arg2 ;
  ParticleUniverse::ParticleSystem *result = 0 ;
  
  SWIG_check_num_args("Pixy::FxEngine::loadEffect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::FxEngine::loadEffect",1,"Pixy::FxEngine *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Pixy::FxEngine::loadEffect",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__FxEngine,0))){
    SWIG_fail_ptr("FxEngine_loadEffect",1,SWIGTYPE_p_Pixy__FxEngine);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  result = (ParticleUniverse::ParticleSystem *)(arg1)->loadEffect(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ParticleUniverse__ParticleSystem,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FxEngine_playEffect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::FxEngine *arg1 = (Pixy::FxEngine *) 0 ;
  std::string arg2 ;
  Pixy::Entity *arg3 = (Pixy::Entity *) 0 ;
  bool arg4 ;
  ParticleUniverse::ParticleSystem *result = 0 ;
  
  SWIG_check_num_args("Pixy::FxEngine::playEffect",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::FxEngine::playEffect",1,"Pixy::FxEngine *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Pixy::FxEngine::playEffect",2,"std::string");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Pixy::FxEngine::playEffect",3,"Pixy::Entity *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Pixy::FxEngine::playEffect",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__FxEngine,0))){
    SWIG_fail_ptr("FxEngine_playEffect",1,SWIGTYPE_p_Pixy__FxEngine);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Pixy__Entity,0))){
    SWIG_fail_ptr("FxEngine_playEffect",3,SWIGTYPE_p_Pixy__Entity);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (ParticleUniverse::ParticleSystem *)(arg1)->playEffect(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ParticleUniverse__ParticleSystem,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FxEngine_playEffect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::FxEngine *arg1 = (Pixy::FxEngine *) 0 ;
  std::string arg2 ;
  Pixy::Entity *arg3 = (Pixy::Entity *) 0 ;
  ParticleUniverse::ParticleSystem *result = 0 ;
  
  SWIG_check_num_args("Pixy::FxEngine::playEffect",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::FxEngine::playEffect",1,"Pixy::FxEngine *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Pixy::FxEngine::playEffect",2,"std::string");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Pixy::FxEngine::playEffect",3,"Pixy::Entity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__FxEngine,0))){
    SWIG_fail_ptr("FxEngine_playEffect",1,SWIGTYPE_p_Pixy__FxEngine);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Pixy__Entity,0))){
    SWIG_fail_ptr("FxEngine_playEffect",3,SWIGTYPE_p_Pixy__Entity);
  }
  
  result = (ParticleUniverse::ParticleSystem *)(arg1)->playEffect(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ParticleUniverse__ParticleSystem,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FxEngine_playEffect__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::FxEngine *arg1 = (Pixy::FxEngine *) 0 ;
  ParticleUniverse::ParticleSystem *arg2 = (ParticleUniverse::ParticleSystem *) 0 ;
  Pixy::Entity *arg3 = (Pixy::Entity *) 0 ;
  ParticleUniverse::ParticleSystem *result = 0 ;
  
  SWIG_check_num_args("Pixy::FxEngine::playEffect",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::FxEngine::playEffect",1,"Pixy::FxEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::FxEngine::playEffect",2,"ParticleUniverse::ParticleSystem *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Pixy::FxEngine::playEffect",3,"Pixy::Entity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__FxEngine,0))){
    SWIG_fail_ptr("FxEngine_playEffect",1,SWIGTYPE_p_Pixy__FxEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ParticleUniverse__ParticleSystem,0))){
    SWIG_fail_ptr("FxEngine_playEffect",2,SWIGTYPE_p_ParticleUniverse__ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Pixy__Entity,0))){
    SWIG_fail_ptr("FxEngine_playEffect",3,SWIGTYPE_p_Pixy__Entity);
  }
  
  result = (ParticleUniverse::ParticleSystem *)(arg1)->playEffect(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ParticleUniverse__ParticleSystem,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FxEngine_playEffect__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::FxEngine *arg1 = (Pixy::FxEngine *) 0 ;
  std::string arg2 ;
  SwigValueWrapper< Ogre::Vector3 > arg3 ;
  bool arg4 ;
  Ogre::Vector3 *argp3 ;
  ParticleUniverse::ParticleSystem *result = 0 ;
  
  SWIG_check_num_args("Pixy::FxEngine::playEffect",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::FxEngine::playEffect",1,"Pixy::FxEngine *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Pixy::FxEngine::playEffect",2,"std::string");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Pixy::FxEngine::playEffect",3,"Ogre::Vector3 const");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Pixy::FxEngine::playEffect",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__FxEngine,0))){
    SWIG_fail_ptr("FxEngine_playEffect",1,SWIGTYPE_p_Pixy__FxEngine);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("FxEngine_playEffect",3,SWIGTYPE_p_Ogre__Vector3);
  }
  arg3 = *argp3;
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (ParticleUniverse::ParticleSystem *)(arg1)->playEffect(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ParticleUniverse__ParticleSystem,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FxEngine_playEffect__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::FxEngine *arg1 = (Pixy::FxEngine *) 0 ;
  std::string arg2 ;
  SwigValueWrapper< Ogre::Vector3 > arg3 ;
  Ogre::Vector3 *argp3 ;
  ParticleUniverse::ParticleSystem *result = 0 ;
  
  SWIG_check_num_args("Pixy::FxEngine::playEffect",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::FxEngine::playEffect",1,"Pixy::FxEngine *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Pixy::FxEngine::playEffect",2,"std::string");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Pixy::FxEngine::playEffect",3,"Ogre::Vector3 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__FxEngine,0))){
    SWIG_fail_ptr("FxEngine_playEffect",1,SWIGTYPE_p_Pixy__FxEngine);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("FxEngine_playEffect",3,SWIGTYPE_p_Ogre__Vector3);
  }
  arg3 = *argp3;
  
  result = (ParticleUniverse::ParticleSystem *)(arg1)->playEffect(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ParticleUniverse__ParticleSystem,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FxEngine_playEffect(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__FxEngine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ParticleUniverse__ParticleSystem, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Pixy__Entity, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FxEngine_playEffect__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__FxEngine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Pixy__Entity, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FxEngine_playEffect__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__FxEngine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FxEngine_playEffect__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__FxEngine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_FxEngine_playEffect__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Pixy__FxEngine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Pixy__Entity, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_FxEngine_playEffect__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'FxEngine_playEffect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Pixy::FxEngine::playEffect(std::string,Pixy::Entity *,bool)\n"
    "    Pixy::FxEngine::playEffect(std::string,Pixy::Entity *)\n"
    "    Pixy::FxEngine::playEffect(ParticleUniverse::ParticleSystem *,Pixy::Entity *)\n"
    "    Pixy::FxEngine::playEffect(std::string,Ogre::Vector3 const,bool)\n"
    "    Pixy::FxEngine::playEffect(std::string,Ogre::Vector3 const)\n");
  lua_error(L);return 0;
}


static int _wrap_FxEngine_unloadAllEffects(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::FxEngine *arg1 = (Pixy::FxEngine *) 0 ;
  
  SWIG_check_num_args("Pixy::FxEngine::unloadAllEffects",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::FxEngine::unloadAllEffects",1,"Pixy::FxEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__FxEngine,0))){
    SWIG_fail_ptr("FxEngine_unloadAllEffects",1,SWIGTYPE_p_Pixy__FxEngine);
  }
  
  (arg1)->unloadAllEffects();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FxEngine(void *obj) {
Pixy::FxEngine *arg1 = (Pixy::FxEngine *) obj;
delete arg1;
}
static swig_lua_method swig_Pixy_FxEngine_methods[] = {
    {"loadEffect", _wrap_FxEngine_loadEffect}, 
    {"playEffect", _wrap_FxEngine_playEffect}, 
    {"unloadAllEffects", _wrap_FxEngine_unloadAllEffects}, 
    {0,0}
};
static swig_lua_attribute swig_Pixy_FxEngine_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Pixy_FxEngine_bases[] = {0};
static const char *swig_Pixy_FxEngine_base_names[] = {0};
static swig_lua_class _wrap_class_Pixy_FxEngine = { "FxEngine", &SWIGTYPE_p_Pixy__FxEngine,0, swig_delete_FxEngine, swig_Pixy_FxEngine_methods, swig_Pixy_FxEngine_attributes, swig_Pixy_FxEngine_bases, swig_Pixy_FxEngine_base_names };

static swig_lua_method swig_CEGUI_Window_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_CEGUI_Window_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_CEGUI_Window_bases[] = {0};
static const char *swig_CEGUI_Window_base_names[] = {0};
static swig_lua_class _wrap_class_CEGUI_Window = { "Window", &SWIGTYPE_p_CEGUI__Window,0,0, swig_CEGUI_Window_methods, swig_CEGUI_Window_attributes, swig_CEGUI_Window_bases, swig_CEGUI_Window_base_names };

static swig_lua_method swig_CEGUI_UBox_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_CEGUI_UBox_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_CEGUI_UBox_bases[] = {0};
static const char *swig_CEGUI_UBox_base_names[] = {0};
static swig_lua_class _wrap_class_CEGUI_UBox = { "UBox", &SWIGTYPE_p_CEGUI__UBox,0,0, swig_CEGUI_UBox_methods, swig_CEGUI_UBox_attributes, swig_CEGUI_UBox_bases, swig_CEGUI_UBox_base_names };

static int _wrap_UIEngine_getSingletonPtr(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::UIEngine *result = 0 ;
  
  SWIG_check_num_args("Pixy::UIEngine::getSingletonPtr",0,0)
  result = (Pixy::UIEngine *)Pixy::UIEngine::getSingletonPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__UIEngine,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIEngine_setMargin(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::UIEngine *arg1 = (Pixy::UIEngine *) 0 ;
  CEGUI::Window *arg2 = (CEGUI::Window *) 0 ;
  CEGUI::UBox *arg3 = 0 ;
  
  SWIG_check_num_args("Pixy::UIEngine::setMargin",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::UIEngine::setMargin",1,"Pixy::UIEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::UIEngine::setMargin",2,"CEGUI::Window *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Pixy::UIEngine::setMargin",3,"CEGUI::UBox &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__UIEngine,0))){
    SWIG_fail_ptr("UIEngine_setMargin",1,SWIGTYPE_p_Pixy__UIEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CEGUI__Window,0))){
    SWIG_fail_ptr("UIEngine_setMargin",2,SWIGTYPE_p_CEGUI__Window);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CEGUI__UBox,0))){
    SWIG_fail_ptr("UIEngine_setMargin",3,SWIGTYPE_p_CEGUI__UBox);
  }
  
  (arg1)->setMargin(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIEngine_refreshSize(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::UIEngine *arg1 = (Pixy::UIEngine *) 0 ;
  
  SWIG_check_num_args("Pixy::UIEngine::refreshSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::UIEngine::refreshSize",1,"Pixy::UIEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__UIEngine,0))){
    SWIG_fail_ptr("UIEngine_refreshSize",1,SWIGTYPE_p_Pixy__UIEngine);
  }
  
  (arg1)->refreshSize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIEngine_connectAnimation(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::UIEngine *arg1 = (Pixy::UIEngine *) 0 ;
  CEGUI::Window *arg2 = (CEGUI::Window *) 0 ;
  std::string arg3 ;
  
  SWIG_check_num_args("Pixy::UIEngine::connectAnimation",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::UIEngine::connectAnimation",1,"Pixy::UIEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::UIEngine::connectAnimation",2,"CEGUI::Window *");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Pixy::UIEngine::connectAnimation",3,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__UIEngine,0))){
    SWIG_fail_ptr("UIEngine_connectAnimation",1,SWIGTYPE_p_Pixy__UIEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CEGUI__Window,0))){
    SWIG_fail_ptr("UIEngine_connectAnimation",2,SWIGTYPE_p_CEGUI__Window);
  }
  
  (&arg3)->assign(lua_tostring(L,3),lua_strlen(L,3));
  (arg1)->connectAnimation(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIEngine_refreshTooltipSize(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::UIEngine *arg1 = (Pixy::UIEngine *) 0 ;
  CEGUI::Window *arg2 = (CEGUI::Window *) 0 ;
  Pixy::Spell *arg3 = (Pixy::Spell *) 0 ;
  
  SWIG_check_num_args("Pixy::UIEngine::refreshTooltipSize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::UIEngine::refreshTooltipSize",1,"Pixy::UIEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::UIEngine::refreshTooltipSize",2,"CEGUI::Window *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Pixy::UIEngine::refreshTooltipSize",3,"Pixy::Spell *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__UIEngine,0))){
    SWIG_fail_ptr("UIEngine_refreshTooltipSize",1,SWIGTYPE_p_Pixy__UIEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CEGUI__Window,0))){
    SWIG_fail_ptr("UIEngine_refreshTooltipSize",2,SWIGTYPE_p_CEGUI__Window);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Pixy__Spell,0))){
    SWIG_fail_ptr("UIEngine_refreshTooltipSize",3,SWIGTYPE_p_Pixy__Spell);
  }
  
  (arg1)->refreshTooltipSize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIEngine_reportLuaError(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::UIEngine *arg1 = (Pixy::UIEngine *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Pixy::UIEngine::reportLuaError",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::UIEngine::reportLuaError",1,"Pixy::UIEngine *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Pixy::UIEngine::reportLuaError",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__UIEngine,0))){
    SWIG_fail_ptr("UIEngine_reportLuaError",1,SWIGTYPE_p_Pixy__UIEngine);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->reportLuaError((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UIEngine(void *obj) {
Pixy::UIEngine *arg1 = (Pixy::UIEngine *) obj;
delete arg1;
}
static swig_lua_method swig_Pixy_UIEngine_methods[] = {
    {"setMargin", _wrap_UIEngine_setMargin}, 
    {"refreshSize", _wrap_UIEngine_refreshSize}, 
    {"connectAnimation", _wrap_UIEngine_connectAnimation}, 
    {"refreshTooltipSize", _wrap_UIEngine_refreshTooltipSize}, 
    {"reportLuaError", _wrap_UIEngine_reportLuaError}, 
    {0,0}
};
static swig_lua_attribute swig_Pixy_UIEngine_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Pixy_UIEngine_bases[] = {0};
static const char *swig_Pixy_UIEngine_base_names[] = {0};
static swig_lua_class _wrap_class_Pixy_UIEngine = { "UIEngine", &SWIGTYPE_p_Pixy__UIEngine,0, swig_delete_UIEngine, swig_Pixy_UIEngine_methods, swig_Pixy_UIEngine_attributes, swig_Pixy_UIEngine_bases, swig_Pixy_UIEngine_base_names };

static int _wrap_ScriptEngine_getSingletonPtr(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::ScriptEngine *result = 0 ;
  
  SWIG_check_num_args("Pixy::ScriptEngine::getSingletonPtr",0,0)
  result = (Pixy::ScriptEngine *)Pixy::ScriptEngine::getSingletonPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__ScriptEngine,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptEngine_getSingleton(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::ScriptEngine *result = 0 ;
  
  SWIG_check_num_args("Pixy::ScriptEngine::getSingleton",0,0)
  result = (Pixy::ScriptEngine *) &Pixy::ScriptEngine::getSingleton();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__ScriptEngine,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptEngine_getScriptPathPrefix(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::ScriptEngine *arg1 = (Pixy::ScriptEngine *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Pixy::ScriptEngine::getScriptPathPrefix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::ScriptEngine::getScriptPathPrefix",1,"Pixy::ScriptEngine const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__ScriptEngine,0))){
    SWIG_fail_ptr("ScriptEngine_getScriptPathPrefix",1,SWIGTYPE_p_Pixy__ScriptEngine);
  }
  
  result = ((Pixy::ScriptEngine const *)arg1)->getScriptPathPrefix();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptEngine_getModulePathPrefix(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::ScriptEngine *arg1 = (Pixy::ScriptEngine *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Pixy::ScriptEngine::getModulePathPrefix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::ScriptEngine::getModulePathPrefix",1,"Pixy::ScriptEngine const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__ScriptEngine,0))){
    SWIG_fail_ptr("ScriptEngine_getModulePathPrefix",1,SWIGTYPE_p_Pixy__ScriptEngine);
  }
  
  result = ((Pixy::ScriptEngine const *)arg1)->getModulePathPrefix();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptEngine_callMeAfter(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::ScriptEngine *arg1 = (Pixy::ScriptEngine *) 0 ;
  int arg2 ;
  std::string arg3 ;
  
  SWIG_check_num_args("Pixy::ScriptEngine::callMeAfter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::ScriptEngine::callMeAfter",1,"Pixy::ScriptEngine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::ScriptEngine::callMeAfter",2,"int");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Pixy::ScriptEngine::callMeAfter",3,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__ScriptEngine,0))){
    SWIG_fail_ptr("ScriptEngine_callMeAfter",1,SWIGTYPE_p_Pixy__ScriptEngine);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (&arg3)->assign(lua_tostring(L,3),lua_strlen(L,3));
  (arg1)->callMeAfter(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptEngine_Log(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  
  SWIG_check_num_args("Pixy::ScriptEngine::luaLog",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Pixy::ScriptEngine::luaLog",1,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_strlen(L,1));
  Pixy::ScriptEngine::luaLog(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptEngine__passGameData(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::ScriptEngine *arg1 = (Pixy::ScriptEngine *) 0 ;
  int result;
  
  SWIG_check_num_args("Pixy::ScriptEngine::_passGameData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::ScriptEngine::_passGameData",1,"Pixy::ScriptEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__ScriptEngine,0))){
    SWIG_fail_ptr("ScriptEngine__passGameData",1,SWIGTYPE_p_Pixy__ScriptEngine);
  }
  
  result = (int)(arg1)->_passGameData();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptEngine__passPuppetListing(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::ScriptEngine *arg1 = (Pixy::ScriptEngine *) 0 ;
  int result;
  
  SWIG_check_num_args("Pixy::ScriptEngine::_passPuppetListing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::ScriptEngine::_passPuppetListing",1,"Pixy::ScriptEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__ScriptEngine,0))){
    SWIG_fail_ptr("ScriptEngine__passPuppetListing",1,SWIGTYPE_p_Pixy__ScriptEngine);
  }
  
  result = (int)(arg1)->_passPuppetListing();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptEngine__passPuppet(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::ScriptEngine *arg1 = (Pixy::ScriptEngine *) 0 ;
  int result;
  
  SWIG_check_num_args("Pixy::ScriptEngine::_passPuppet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::ScriptEngine::_passPuppet",1,"Pixy::ScriptEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__ScriptEngine,0))){
    SWIG_fail_ptr("ScriptEngine__passPuppet",1,SWIGTYPE_p_Pixy__ScriptEngine);
  }
  
  result = (int)(arg1)->_passPuppet();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptEngine__reportAccepted(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::ScriptEngine *arg1 = (Pixy::ScriptEngine *) 0 ;
  
  SWIG_check_num_args("Pixy::ScriptEngine::_reportAccepted",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::ScriptEngine::_reportAccepted",1,"Pixy::ScriptEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__ScriptEngine,0))){
    SWIG_fail_ptr("ScriptEngine__reportAccepted",1,SWIGTYPE_p_Pixy__ScriptEngine);
  }
  
  (arg1)->_reportAccepted();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ScriptEngine(void *obj) {
Pixy::ScriptEngine *arg1 = (Pixy::ScriptEngine *) obj;
delete arg1;
}
static swig_lua_method swig_Pixy_ScriptEngine_methods[] = {
    {"getScriptPathPrefix", _wrap_ScriptEngine_getScriptPathPrefix}, 
    {"getModulePathPrefix", _wrap_ScriptEngine_getModulePathPrefix}, 
    {"callMeAfter", _wrap_ScriptEngine_callMeAfter}, 
    {"_passGameData", _wrap_ScriptEngine__passGameData}, 
    {"_passPuppetListing", _wrap_ScriptEngine__passPuppetListing}, 
    {"_passPuppet", _wrap_ScriptEngine__passPuppet}, 
    {"_reportAccepted", _wrap_ScriptEngine__reportAccepted}, 
    {0,0}
};
static swig_lua_attribute swig_Pixy_ScriptEngine_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Pixy_ScriptEngine_bases[] = {0};
static const char *swig_Pixy_ScriptEngine_base_names[] = {0};
static swig_lua_class _wrap_class_Pixy_ScriptEngine = { "ScriptEngine", &SWIGTYPE_p_Pixy__ScriptEngine,0, swig_delete_ScriptEngine, swig_Pixy_ScriptEngine_methods, swig_Pixy_ScriptEngine_attributes, swig_Pixy_ScriptEngine_bases, swig_Pixy_ScriptEngine_base_names };

static int _wrap_new_OgreRTT(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::OgreRTT *result = 0 ;
  
  SWIG_check_num_args("Pixy::OgreRTT::OgreRTT",0,0)
  result = (Pixy::OgreRTT *)new Pixy::OgreRTT();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__OgreRTT,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OgreRTT_setup(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::OgreRTT *arg1 = (Pixy::OgreRTT *) 0 ;
  Ogre::SceneManager *arg2 = (Ogre::SceneManager *) 0 ;
  Ogre::RenderWindow *arg3 = (Ogre::RenderWindow *) 0 ;
  Ogre::Camera *arg4 = (Ogre::Camera *) 0 ;
  
  SWIG_check_num_args("Pixy::OgreRTT::setup",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::OgreRTT::setup",1,"Pixy::OgreRTT *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pixy::OgreRTT::setup",2,"Ogre::SceneManager *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Pixy::OgreRTT::setup",3,"Ogre::RenderWindow *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Pixy::OgreRTT::setup",4,"Ogre::Camera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__OgreRTT,0))){
    SWIG_fail_ptr("OgreRTT_setup",1,SWIGTYPE_p_Pixy__OgreRTT);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("OgreRTT_setup",2,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Ogre__RenderWindow,0))){
    SWIG_fail_ptr("OgreRTT_setup",3,SWIGTYPE_p_Ogre__RenderWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Ogre__Camera,0))){
    SWIG_fail_ptr("OgreRTT_setup",4,SWIGTYPE_p_Ogre__Camera);
  }
  
  (arg1)->setup(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OgreRTT_setCorners(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::OgreRTT *arg1 = (Pixy::OgreRTT *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::Real arg4 ;
  Ogre::Real arg5 ;
  
  SWIG_check_num_args("Pixy::OgreRTT::setCorners",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::OgreRTT::setCorners",1,"Pixy::OgreRTT *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pixy::OgreRTT::setCorners",2,"Ogre::Real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Pixy::OgreRTT::setCorners",3,"Ogre::Real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Pixy::OgreRTT::setCorners",4,"Ogre::Real");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Pixy::OgreRTT::setCorners",5,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__OgreRTT,0))){
    SWIG_fail_ptr("OgreRTT_setCorners",1,SWIGTYPE_p_Pixy__OgreRTT);
  }
  
  arg2 = (Ogre::Real)lua_tonumber(L, 2);
  arg3 = (Ogre::Real)lua_tonumber(L, 3);
  arg4 = (Ogre::Real)lua_tonumber(L, 4);
  arg5 = (Ogre::Real)lua_tonumber(L, 5);
  (arg1)->setCorners(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OgreRTT_enable(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::OgreRTT *arg1 = (Pixy::OgreRTT *) 0 ;
  
  SWIG_check_num_args("Pixy::OgreRTT::enable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::OgreRTT::enable",1,"Pixy::OgreRTT *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__OgreRTT,0))){
    SWIG_fail_ptr("OgreRTT_enable",1,SWIGTYPE_p_Pixy__OgreRTT);
  }
  
  (arg1)->enable();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OgreRTT_disable(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::OgreRTT *arg1 = (Pixy::OgreRTT *) 0 ;
  
  SWIG_check_num_args("Pixy::OgreRTT::disable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::OgreRTT::disable",1,"Pixy::OgreRTT *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__OgreRTT,0))){
    SWIG_fail_ptr("OgreRTT_disable",1,SWIGTYPE_p_Pixy__OgreRTT);
  }
  
  (arg1)->disable();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OgreRTT_isEnabled(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::OgreRTT *arg1 = (Pixy::OgreRTT *) 0 ;
  bool result;
  
  SWIG_check_num_args("Pixy::OgreRTT::isEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::OgreRTT::isEnabled",1,"Pixy::OgreRTT const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__OgreRTT,0))){
    SWIG_fail_ptr("OgreRTT_isEnabled",1,SWIGTYPE_p_Pixy__OgreRTT);
  }
  
  result = (bool)((Pixy::OgreRTT const *)arg1)->isEnabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OgreRTT_hide(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::OgreRTT *arg1 = (Pixy::OgreRTT *) 0 ;
  
  SWIG_check_num_args("Pixy::OgreRTT::hide",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::OgreRTT::hide",1,"Pixy::OgreRTT *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__OgreRTT,0))){
    SWIG_fail_ptr("OgreRTT_hide",1,SWIGTYPE_p_Pixy__OgreRTT);
  }
  
  (arg1)->hide();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OgreRTT_show(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::OgreRTT *arg1 = (Pixy::OgreRTT *) 0 ;
  
  SWIG_check_num_args("Pixy::OgreRTT::show",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::OgreRTT::show",1,"Pixy::OgreRTT *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__OgreRTT,0))){
    SWIG_fail_ptr("OgreRTT_show",1,SWIGTYPE_p_Pixy__OgreRTT);
  }
  
  (arg1)->show();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OgreRTT(void *obj) {
Pixy::OgreRTT *arg1 = (Pixy::OgreRTT *) obj;
delete arg1;
}
static swig_lua_method swig_Pixy_OgreRTT_methods[] = {
    {"setup", _wrap_OgreRTT_setup}, 
    {"setCorners", _wrap_OgreRTT_setCorners}, 
    {"enable", _wrap_OgreRTT_enable}, 
    {"disable", _wrap_OgreRTT_disable}, 
    {"isEnabled", _wrap_OgreRTT_isEnabled}, 
    {"hide", _wrap_OgreRTT_hide}, 
    {"show", _wrap_OgreRTT_show}, 
    {0,0}
};
static swig_lua_attribute swig_Pixy_OgreRTT_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Pixy_OgreRTT_bases[] = {0};
static const char *swig_Pixy_OgreRTT_base_names[] = {0};
static swig_lua_class _wrap_class_Pixy_OgreRTT = { "OgreRTT", &SWIGTYPE_p_Pixy__OgreRTT,_wrap_new_OgreRTT, swig_delete_OgreRTT, swig_Pixy_OgreRTT_methods, swig_Pixy_OgreRTT_attributes, swig_Pixy_OgreRTT_bases, swig_Pixy_OgreRTT_base_names };

static int _wrap_new_SpellListExporter(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::LuaExporter< std::list< Pixy::Spell * > > *result = 0 ;
  
  SWIG_check_num_args("Pixy::LuaExporter< std::list< Pixy::Spell * > >::LuaExporter",0,0)
  result = (Pixy::LuaExporter< std::list< Pixy::Spell * > > *)new Pixy::LuaExporter< std::list< Pixy::Spell * > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__LuaExporterT_std__listT_Pixy__Spell_p_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpellListExporter_export(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::LuaExporter< std::list< Pixy::Spell * > > *arg1 = (Pixy::LuaExporter< std::list< Pixy::Spell * > > *) 0 ;
  std::list< Pixy::Spell * > *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  SWIG_check_num_args("Pixy::LuaExporter< std::list< Pixy::Spell * > >::__export",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::LuaExporter< std::list< Pixy::Spell * > >::__export",1,"Pixy::LuaExporter< std::list< Pixy::Spell * > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Pixy::LuaExporter< std::list< Pixy::Spell * > >::__export",2,"std::list< Pixy::Spell * > const &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Pixy::LuaExporter< std::list< Pixy::Spell * > >::__export",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Pixy::LuaExporter< std::list< Pixy::Spell * > >::__export",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__LuaExporterT_std__listT_Pixy__Spell_p_t_t,0))){
    SWIG_fail_ptr("SpellListExporter_export",1,SWIGTYPE_p_Pixy__LuaExporterT_std__listT_Pixy__Spell_p_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__listT_Pixy__Spell_p_t,0))){
    SWIG_fail_ptr("SpellListExporter_export",2,SWIGTYPE_p_std__listT_Pixy__Spell_p_t);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  (arg1)->__export((std::list< Pixy::Spell * > const &)*arg2,(char const *)arg3,(char const *)arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SpellListExporter(void *obj) {
Pixy::LuaExporter< std::list< Pixy::Spell * > > *arg1 = (Pixy::LuaExporter< std::list< Pixy::Spell * > > *) obj;
delete arg1;
}
static swig_lua_method swig_Pixy_LuaExporter_Sl_std_list_Sl_Pixy_Spell_Sm__Sg__Sg__methods[] = {
    {"export", _wrap_SpellListExporter_export}, 
    {0,0}
};
static swig_lua_attribute swig_Pixy_LuaExporter_Sl_std_list_Sl_Pixy_Spell_Sm__Sg__Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Pixy_LuaExporter_Sl_std_list_Sl_Pixy_Spell_Sm__Sg__Sg__bases[] = {0};
static const char *swig_Pixy_LuaExporter_Sl_std_list_Sl_Pixy_Spell_Sm__Sg__Sg__base_names[] = {0};
static swig_lua_class _wrap_class_Pixy_LuaExporter_Sl_std_list_Sl_Pixy_Spell_Sm__Sg__Sg_ = { "SpellListExporter", &SWIGTYPE_p_Pixy__LuaExporterT_std__listT_Pixy__Spell_p_t_t,_wrap_new_SpellListExporter, swig_delete_SpellListExporter, swig_Pixy_LuaExporter_Sl_std_list_Sl_Pixy_Spell_Sm__Sg__Sg__methods, swig_Pixy_LuaExporter_Sl_std_list_Sl_Pixy_Spell_Sm__Sg__Sg__attributes, swig_Pixy_LuaExporter_Sl_std_list_Sl_Pixy_Spell_Sm__Sg__Sg__bases, swig_Pixy_LuaExporter_Sl_std_list_Sl_Pixy_Spell_Sm__Sg__Sg__base_names };

static int _wrap_new_UnitListExporter(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::LuaExporter< std::list< Pixy::Unit * > > *result = 0 ;
  
  SWIG_check_num_args("Pixy::LuaExporter< std::list< Pixy::Unit * > >::LuaExporter",0,0)
  result = (Pixy::LuaExporter< std::list< Pixy::Unit * > > *)new Pixy::LuaExporter< std::list< Pixy::Unit * > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__LuaExporterT_std__listT_Pixy__Unit_p_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UnitListExporter_export(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::LuaExporter< std::list< Pixy::Unit * > > *arg1 = (Pixy::LuaExporter< std::list< Pixy::Unit * > > *) 0 ;
  std::list< Pixy::Unit * > *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  SWIG_check_num_args("Pixy::LuaExporter< std::list< Pixy::Unit * > >::__export",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::LuaExporter< std::list< Pixy::Unit * > >::__export",1,"Pixy::LuaExporter< std::list< Pixy::Unit * > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Pixy::LuaExporter< std::list< Pixy::Unit * > >::__export",2,"std::list< Pixy::Unit * > const &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Pixy::LuaExporter< std::list< Pixy::Unit * > >::__export",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Pixy::LuaExporter< std::list< Pixy::Unit * > >::__export",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__LuaExporterT_std__listT_Pixy__Unit_p_t_t,0))){
    SWIG_fail_ptr("UnitListExporter_export",1,SWIGTYPE_p_Pixy__LuaExporterT_std__listT_Pixy__Unit_p_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__listT_Pixy__Unit_p_t,0))){
    SWIG_fail_ptr("UnitListExporter_export",2,SWIGTYPE_p_std__listT_Pixy__Unit_p_t);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  (arg1)->__export((std::list< Pixy::Unit * > const &)*arg2,(char const *)arg3,(char const *)arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UnitListExporter(void *obj) {
Pixy::LuaExporter< std::list< Pixy::Unit * > > *arg1 = (Pixy::LuaExporter< std::list< Pixy::Unit * > > *) obj;
delete arg1;
}
static swig_lua_method swig_Pixy_LuaExporter_Sl_std_list_Sl_Pixy_Unit_Sm__Sg__Sg__methods[] = {
    {"export", _wrap_UnitListExporter_export}, 
    {0,0}
};
static swig_lua_attribute swig_Pixy_LuaExporter_Sl_std_list_Sl_Pixy_Unit_Sm__Sg__Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Pixy_LuaExporter_Sl_std_list_Sl_Pixy_Unit_Sm__Sg__Sg__bases[] = {0};
static const char *swig_Pixy_LuaExporter_Sl_std_list_Sl_Pixy_Unit_Sm__Sg__Sg__base_names[] = {0};
static swig_lua_class _wrap_class_Pixy_LuaExporter_Sl_std_list_Sl_Pixy_Unit_Sm__Sg__Sg_ = { "UnitListExporter", &SWIGTYPE_p_Pixy__LuaExporterT_std__listT_Pixy__Unit_p_t_t,_wrap_new_UnitListExporter, swig_delete_UnitListExporter, swig_Pixy_LuaExporter_Sl_std_list_Sl_Pixy_Unit_Sm__Sg__Sg__methods, swig_Pixy_LuaExporter_Sl_std_list_Sl_Pixy_Unit_Sm__Sg__Sg__attributes, swig_Pixy_LuaExporter_Sl_std_list_Sl_Pixy_Unit_Sm__Sg__Sg__bases, swig_Pixy_LuaExporter_Sl_std_list_Sl_Pixy_Unit_Sm__Sg__Sg__base_names };

static int _wrap_new_PuppetListExporter(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::LuaExporter< std::list< Pixy::Puppet * > > *result = 0 ;
  
  SWIG_check_num_args("Pixy::LuaExporter< std::list< Pixy::Puppet * > >::LuaExporter",0,0)
  result = (Pixy::LuaExporter< std::list< Pixy::Puppet * > > *)new Pixy::LuaExporter< std::list< Pixy::Puppet * > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__LuaExporterT_std__listT_Pixy__Puppet_p_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PuppetListExporter_export(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::LuaExporter< std::list< Pixy::Puppet * > > *arg1 = (Pixy::LuaExporter< std::list< Pixy::Puppet * > > *) 0 ;
  std::list< Pixy::Puppet * > *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  SWIG_check_num_args("Pixy::LuaExporter< std::list< Pixy::Puppet * > >::__export",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::LuaExporter< std::list< Pixy::Puppet * > >::__export",1,"Pixy::LuaExporter< std::list< Pixy::Puppet * > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Pixy::LuaExporter< std::list< Pixy::Puppet * > >::__export",2,"std::list< Pixy::Puppet * > const &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Pixy::LuaExporter< std::list< Pixy::Puppet * > >::__export",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Pixy::LuaExporter< std::list< Pixy::Puppet * > >::__export",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__LuaExporterT_std__listT_Pixy__Puppet_p_t_t,0))){
    SWIG_fail_ptr("PuppetListExporter_export",1,SWIGTYPE_p_Pixy__LuaExporterT_std__listT_Pixy__Puppet_p_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__listT_Pixy__Puppet_p_t,0))){
    SWIG_fail_ptr("PuppetListExporter_export",2,SWIGTYPE_p_std__listT_Pixy__Puppet_p_t);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  (arg1)->__export((std::list< Pixy::Puppet * > const &)*arg2,(char const *)arg3,(char const *)arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PuppetListExporter(void *obj) {
Pixy::LuaExporter< std::list< Pixy::Puppet * > > *arg1 = (Pixy::LuaExporter< std::list< Pixy::Puppet * > > *) obj;
delete arg1;
}
static swig_lua_method swig_Pixy_LuaExporter_Sl_std_list_Sl_Pixy_Puppet_Sm__Sg__Sg__methods[] = {
    {"export", _wrap_PuppetListExporter_export}, 
    {0,0}
};
static swig_lua_attribute swig_Pixy_LuaExporter_Sl_std_list_Sl_Pixy_Puppet_Sm__Sg__Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Pixy_LuaExporter_Sl_std_list_Sl_Pixy_Puppet_Sm__Sg__Sg__bases[] = {0};
static const char *swig_Pixy_LuaExporter_Sl_std_list_Sl_Pixy_Puppet_Sm__Sg__Sg__base_names[] = {0};
static swig_lua_class _wrap_class_Pixy_LuaExporter_Sl_std_list_Sl_Pixy_Puppet_Sm__Sg__Sg_ = { "PuppetListExporter", &SWIGTYPE_p_Pixy__LuaExporterT_std__listT_Pixy__Puppet_p_t_t,_wrap_new_PuppetListExporter, swig_delete_PuppetListExporter, swig_Pixy_LuaExporter_Sl_std_list_Sl_Pixy_Puppet_Sm__Sg__Sg__methods, swig_Pixy_LuaExporter_Sl_std_list_Sl_Pixy_Puppet_Sm__Sg__Sg__attributes, swig_Pixy_LuaExporter_Sl_std_list_Sl_Pixy_Puppet_Sm__Sg__Sg__bases, swig_Pixy_LuaExporter_Sl_std_list_Sl_Pixy_Puppet_Sm__Sg__Sg__base_names };

static int _wrap_new_DeckListExporter(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::LuaExporter< std::list< Pixy::Deck * > > *result = 0 ;
  
  SWIG_check_num_args("Pixy::LuaExporter< std::list< Pixy::Deck * > >::LuaExporter",0,0)
  result = (Pixy::LuaExporter< std::list< Pixy::Deck * > > *)new Pixy::LuaExporter< std::list< Pixy::Deck * > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pixy__LuaExporterT_std__listT_Pixy__Deck_p_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeckListExporter_export(lua_State* L) {
  int SWIG_arg = 0;
  Pixy::LuaExporter< std::list< Pixy::Deck * > > *arg1 = (Pixy::LuaExporter< std::list< Pixy::Deck * > > *) 0 ;
  std::list< Pixy::Deck * > *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  SWIG_check_num_args("Pixy::LuaExporter< std::list< Pixy::Deck * > >::__export",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pixy::LuaExporter< std::list< Pixy::Deck * > >::__export",1,"Pixy::LuaExporter< std::list< Pixy::Deck * > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Pixy::LuaExporter< std::list< Pixy::Deck * > >::__export",2,"std::list< Pixy::Deck * > const &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Pixy::LuaExporter< std::list< Pixy::Deck * > >::__export",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Pixy::LuaExporter< std::list< Pixy::Deck * > >::__export",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Pixy__LuaExporterT_std__listT_Pixy__Deck_p_t_t,0))){
    SWIG_fail_ptr("DeckListExporter_export",1,SWIGTYPE_p_Pixy__LuaExporterT_std__listT_Pixy__Deck_p_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__listT_Pixy__Deck_p_t,0))){
    SWIG_fail_ptr("DeckListExporter_export",2,SWIGTYPE_p_std__listT_Pixy__Deck_p_t);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  (arg1)->__export((std::list< Pixy::Deck * > const &)*arg2,(char const *)arg3,(char const *)arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DeckListExporter(void *obj) {
Pixy::LuaExporter< std::list< Pixy::Deck * > > *arg1 = (Pixy::LuaExporter< std::list< Pixy::Deck * > > *) obj;
delete arg1;
}
static swig_lua_method swig_Pixy_LuaExporter_Sl_std_list_Sl_Pixy_Deck_Sm__Sg__Sg__methods[] = {
    {"export", _wrap_DeckListExporter_export}, 
    {0,0}
};
static swig_lua_attribute swig_Pixy_LuaExporter_Sl_std_list_Sl_Pixy_Deck_Sm__Sg__Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Pixy_LuaExporter_Sl_std_list_Sl_Pixy_Deck_Sm__Sg__Sg__bases[] = {0};
static const char *swig_Pixy_LuaExporter_Sl_std_list_Sl_Pixy_Deck_Sm__Sg__Sg__base_names[] = {0};
static swig_lua_class _wrap_class_Pixy_LuaExporter_Sl_std_list_Sl_Pixy_Deck_Sm__Sg__Sg_ = { "DeckListExporter", &SWIGTYPE_p_Pixy__LuaExporterT_std__listT_Pixy__Deck_p_t_t,_wrap_new_DeckListExporter, swig_delete_DeckListExporter, swig_Pixy_LuaExporter_Sl_std_list_Sl_Pixy_Deck_Sm__Sg__Sg__methods, swig_Pixy_LuaExporter_Sl_std_list_Sl_Pixy_Deck_Sm__Sg__Sg__attributes, swig_Pixy_LuaExporter_Sl_std_list_Sl_Pixy_Deck_Sm__Sg__Sg__bases, swig_Pixy_LuaExporter_Sl_std_list_Sl_Pixy_Deck_Sm__Sg__Sg__base_names };

#ifdef __cplusplus
}
#endif

static const struct luaL_reg swig_commands[] = {
    { "Event_UIDToString", _wrap_Event_UIDToString},
    { "EventManager_getSingletonPtr", _wrap_EventManager_getSingletonPtr},
    { "EventManager_getSingleton", _wrap_EventManager_getSingleton},
    { "Combat_getSingletonPtr", _wrap_Combat_getSingletonPtr},
    { "Combat_getSingleton", _wrap_Combat_getSingleton},
    { "Intro_getSingletonPtr", _wrap_Intro_getSingletonPtr},
    { "Intro_getSingleton", _wrap_Intro_getSingleton},
    { "Animable_setAnimFadeSpeed", _wrap_Animable_setAnimFadeSpeed},
    { "Animable_getAnimFadeSpeed", _wrap_Animable_getAnimFadeSpeed},
    { "Mobile_setDefaultWalkSpeed", _wrap_Mobile_setDefaultWalkSpeed},
    { "Mobile_getDefaultWalkSpeed", _wrap_Mobile_getDefaultWalkSpeed},
    { "Mobile_setRotationFactor", _wrap_Mobile_setRotationFactor},
    { "GameManager_getSingleton", _wrap_GameManager_getSingleton},
    { "GameManager_getSingletonPtr", _wrap_GameManager_getSingletonPtr},
    { "InputManager_getSingletonPtr", _wrap_InputManager_getSingletonPtr},
    { "NetworkManager_getSingletonPtr", _wrap_NetworkManager_getSingletonPtr},
    { "NetworkManager_getSingleton", _wrap_NetworkManager_getSingleton},
    { "GfxEngine_getSingletonPtr", _wrap_GfxEngine_getSingletonPtr},
    { "FxEngine_getSingleton", _wrap_FxEngine_getSingleton},
    { "FxEngine_getSingletonPtr", _wrap_FxEngine_getSingletonPtr},
    { "UIEngine_getSingletonPtr", _wrap_UIEngine_getSingletonPtr},
    { "ScriptEngine_getSingletonPtr", _wrap_ScriptEngine_getSingletonPtr},
    { "ScriptEngine_getSingleton", _wrap_ScriptEngine_getSingleton},
    { "ScriptEngine_Log", _wrap_ScriptEngine_Log},
    {0,0}
};

static swig_lua_var_info swig_variables[] = {
    {0,0,0}
};

static swig_lua_const_info swig_constants[] = {
{ SWIG_LUA_INT,     (char *)"BaseSpell_Casting", (long) Pixy::BaseSpell::Casting, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BaseSpell_Blocking", (long) Pixy::BaseSpell::Blocking, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BaseSpell_All", (long) Pixy::BaseSpell::All, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BaseSpell_Mind", (long) Pixy::BaseSpell::Mind, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BaseSpell_Matter", (long) Pixy::BaseSpell::Matter, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Animable_ANIM_NONE", (long) Pixy::Animable::ANIM_NONE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Animable_ANIM_LIVE", (long) Pixy::Animable::ANIM_LIVE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Animable_ANIM_IDLE", (long) Pixy::Animable::ANIM_IDLE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Animable_ANIM_WALK", (long) Pixy::Animable::ANIM_WALK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Animable_ANIM_RUN", (long) Pixy::Animable::ANIM_RUN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Animable_ANIM_ATTACK", (long) Pixy::Animable::ANIM_ATTACK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Animable_ANIM_HIT", (long) Pixy::Animable::ANIM_HIT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Animable_ANIM_REST", (long) Pixy::Animable::ANIM_REST, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Animable_ANIM_GETUP", (long) Pixy::Animable::ANIM_GETUP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Animable_ANIM_DIE", (long) Pixy::Animable::ANIM_DIE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"GfxEngine_TERRAIN_MASK", (long) Pixy::GfxEngine::TERRAIN_MASK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"GfxEngine_ENTITY_MASK", (long) Pixy::GfxEngine::ENTITY_MASK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"GfxEngine_GENERIC", (long) Pixy::GfxEngine::GENERIC, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"GfxEngine_POLY", (long) Pixy::GfxEngine::POLY, 0, 0, 0},
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_Pixy__EntityTo_p_Pixy__Caster(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Pixy::Caster *)  ((Pixy::Entity *) x));
}
static void *_p_Pixy__PuppetTo_p_Pixy__Caster(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Pixy::Caster *) (Pixy::Entity *) ((Pixy::Puppet *) x));
}
static void *_p_Pixy__UnitTo_p_Pixy__Caster(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Pixy::Caster *) (Pixy::Entity *) ((Pixy::Unit *) x));
}
static void *_p_Pixy__SpellTo_p_Pixy__Identifiable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Pixy::Identifiable *) (Pixy::BaseSpell *) ((Pixy::Spell *) x));
}
static void *_p_Pixy__EntityTo_p_Pixy__Identifiable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Pixy::Identifiable *) (Pixy::BaseEntity *) ((Pixy::Entity *) x));
}
static void *_p_Pixy__BaseEntityTo_p_Pixy__Identifiable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Pixy::Identifiable *)  ((Pixy::BaseEntity *) x));
}
static void *_p_Pixy__PuppetTo_p_Pixy__Identifiable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Pixy::Identifiable *) (Pixy::BaseEntity *)(Pixy::Entity *) ((Pixy::Puppet *) x));
}
static void *_p_Pixy__UnitTo_p_Pixy__Identifiable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Pixy::Identifiable *) (Pixy::BaseEntity *)(Pixy::Entity *) ((Pixy::Unit *) x));
}
static void *_p_Pixy__BaseSpellTo_p_Pixy__Identifiable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Pixy::Identifiable *)  ((Pixy::BaseSpell *) x));
}
static void *_p_Pixy__UnitTo_p_Pixy__BaseUnit(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Pixy::BaseUnit *)  ((Pixy::Unit *) x));
}
static void *_p_Pixy__CombatTo_p_Pixy__GameState(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Pixy::GameState *)  ((Pixy::Combat *) x));
}
static void *_p_Pixy__EntityTo_p_Pixy__Renderable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Pixy::Renderable *)  ((Pixy::Entity *) x));
}
static void *_p_Pixy__PuppetTo_p_Pixy__Renderable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Pixy::Renderable *) (Pixy::Entity *) ((Pixy::Puppet *) x));
}
static void *_p_Pixy__UnitTo_p_Pixy__Renderable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Pixy::Renderable *) (Pixy::Entity *) ((Pixy::Unit *) x));
}
static void *_p_Pixy__EntityTo_p_Pixy__Animable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Pixy::Animable *)  ((Pixy::Entity *) x));
}
static void *_p_Pixy__PuppetTo_p_Pixy__Animable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Pixy::Animable *) (Pixy::Entity *) ((Pixy::Puppet *) x));
}
static void *_p_Pixy__UnitTo_p_Pixy__Animable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Pixy::Animable *) (Pixy::Entity *) ((Pixy::Unit *) x));
}
static void *_p_Pixy__PuppetTo_p_Pixy__Entity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Pixy::Entity *)  ((Pixy::Puppet *) x));
}
static void *_p_Pixy__UnitTo_p_Pixy__Entity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Pixy::Entity *)  ((Pixy::Unit *) x));
}
static void *_p_Pixy__PuppetTo_p_Pixy__BasePuppet(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Pixy::BasePuppet *)  ((Pixy::Puppet *) x));
}
static void *_p_Ogre__EntityTo_p_Ogre__MovableObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Ogre::MovableObject *)  ((Ogre::Entity *) x));
}
static void *_p_Ogre__LightTo_p_Ogre__MovableObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Ogre::MovableObject *)  ((Ogre::Light *) x));
}
static void *_p_Ogre__BillboardSetTo_p_Ogre__MovableObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Ogre::MovableObject *)  ((Ogre::BillboardSet *) x));
}
static void *_p_Pixy__SpellTo_p_Pixy__Loggable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Pixy::Loggable *) (Pixy::BaseSpell *) ((Pixy::Spell *) x));
}
static void *_p_Pixy__EntityTo_p_Pixy__Loggable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Pixy::Loggable *) (Pixy::BaseEntity *) ((Pixy::Entity *) x));
}
static void *_p_Pixy__BaseEntityTo_p_Pixy__Loggable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Pixy::Loggable *)  ((Pixy::BaseEntity *) x));
}
static void *_p_Pixy__PuppetTo_p_Pixy__Loggable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Pixy::Loggable *) (Pixy::BaseEntity *)(Pixy::Entity *) ((Pixy::Puppet *) x));
}
static void *_p_Pixy__UnitTo_p_Pixy__Loggable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Pixy::Loggable *) (Pixy::BaseEntity *)(Pixy::Entity *) ((Pixy::Unit *) x));
}
static void *_p_Pixy__BaseSpellTo_p_Pixy__Loggable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Pixy::Loggable *)  ((Pixy::BaseSpell *) x));
}
static void *_p_Pixy__DeckTo_p_Pixy__BaseDeck(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Pixy::BaseDeck *)  ((Pixy::Deck *) x));
}
static void *_p_Pixy__EntityTo_p_Pixy__BaseCaster(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Pixy::BaseCaster *) (Pixy::Caster *) ((Pixy::Entity *) x));
}
static void *_p_Pixy__PuppetTo_p_Pixy__BaseCaster(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Pixy::BaseCaster *) (Pixy::Caster *)(Pixy::Entity *) ((Pixy::Puppet *) x));
}
static void *_p_Pixy__UnitTo_p_Pixy__BaseCaster(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Pixy::BaseCaster *) (Pixy::Caster *)(Pixy::Entity *) ((Pixy::Unit *) x));
}
static void *_p_Pixy__CasterTo_p_Pixy__BaseCaster(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Pixy::BaseCaster *)  ((Pixy::Caster *) x));
}
static void *_p_Pixy__SpellTo_p_Pixy__BaseSpell(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Pixy::BaseSpell *)  ((Pixy::Spell *) x));
}
static void *_p_Pixy__EntityTo_p_Pixy__BaseEntity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Pixy::BaseEntity *)  ((Pixy::Entity *) x));
}
static void *_p_Pixy__PuppetTo_p_Pixy__BaseEntity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Pixy::BaseEntity *) (Pixy::Entity *) ((Pixy::Puppet *) x));
}
static void *_p_Pixy__UnitTo_p_Pixy__BaseEntity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Pixy::BaseEntity *) (Pixy::Entity *) ((Pixy::Unit *) x));
}
static void *_p_Pixy__UnitTo_p_Pixy__Mobile(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Pixy::Mobile *)  ((Pixy::Unit *) x));
}
static swig_type_info _swigt__p_CEGUI__UBox = {"_p_CEGUI__UBox", "CEGUI::UBox *", 0, 0, (void*)&_wrap_class_CEGUI_UBox, 0};
static swig_type_info _swigt__p_CEGUI__Window = {"_p_CEGUI__Window", "CEGUI::Window *", 0, 0, (void*)&_wrap_class_CEGUI_Window, 0};
static swig_type_info _swigt__p_CornerEnum = {"_p_CornerEnum", "CornerEnum *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MovableTextOverlay = {"_p_MovableTextOverlay", "MovableTextOverlay *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OIS__Keyboard = {"_p_OIS__Keyboard", "OIS::Keyboard *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OIS__Mouse = {"_p_OIS__Mouse", "OIS::Mouse *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OgreBites__SdkCameraMan = {"_p_OgreBites__SdkCameraMan", "OgreBites::SdkCameraMan *|SdkCameraMan *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OgreMax__OgreMaxScene = {"_p_OgreMax__OgreMaxScene", "OgreMax::OgreMaxScene *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__Camera = {"_p_Ogre__Camera", "Ogre::Camera *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__ColourValue = {"_p_Ogre__ColourValue", "Ogre::ColourValue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__Entity = {"_p_Ogre__Entity", "Ogre::Entity *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__MovableObject = {"_p_Ogre__MovableObject", "Ogre::MovableObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__Light = {"_p_Ogre__Light", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Ogre__BillboardSet = {"_p_Ogre__BillboardSet", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Ogre__RenderWindow = {"_p_Ogre__RenderWindow", "Ogre::RenderWindow *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__Root = {"_p_Ogre__Root", "Ogre::Root *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__SceneManager = {"_p_Ogre__SceneManager", "Ogre::SceneManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__SceneNode = {"_p_Ogre__SceneNode", "Ogre::SceneNode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__SharedPtrT_Ogre__Resource_t = {"_p_Ogre__SharedPtrT_Ogre__Resource_t", "Ogre::SharedPtr< Ogre::Resource > *|Ogre::ResourcePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__Vector2 = {"_p_Ogre__Vector2", "Ogre::Vector2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__Vector3 = {"_p_Ogre__Vector3", "Ogre::Vector3 *|Vector3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__Viewport = {"_p_Ogre__Viewport", "Ogre::Viewport *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ParticleUniverse__ParticleSystem = {"_p_ParticleUniverse__ParticleSystem", "ParticleUniverse::ParticleSystem *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Pixy__Animable = {"_p_Pixy__Animable", "Pixy::Animable *", 0, 0, (void*)&_wrap_class_Pixy_Animable, 0};
static swig_type_info _swigt__p_Pixy__BaseCaster = {"_p_Pixy__BaseCaster", "Pixy::BaseCaster *", 0, 0, (void*)&_wrap_class_Pixy_BaseCaster, 0};
static swig_type_info _swigt__p_Pixy__BaseDeck = {"_p_Pixy__BaseDeck", "Pixy::BaseDeck *|Pixy::BasePuppet::deck_t *", 0, 0, (void*)&_wrap_class_Pixy_BaseDeck, 0};
static swig_type_info _swigt__p_Pixy__BaseEntity = {"_p_Pixy__BaseEntity", "Pixy::BaseEntity *|Pixy::BaseSpell::owner_t *", 0, 0, (void*)&_wrap_class_Pixy_BaseEntity, 0};
static swig_type_info _swigt__p_Pixy__BasePuppet = {"_p_Pixy__BasePuppet", "Pixy::BasePuppet *", 0, 0, (void*)&_wrap_class_Pixy_BasePuppet, 0};
static swig_type_info _swigt__p_Pixy__BaseSpell = {"_p_Pixy__BaseSpell", "Pixy::BaseCaster::spell_t *|Pixy::BaseSpell *", 0, 0, (void*)&_wrap_class_Pixy_BaseSpell, 0};
static swig_type_info _swigt__p_Pixy__BaseUnit = {"_p_Pixy__BaseUnit", "Pixy::BaseUnit *", 0, 0, (void*)&_wrap_class_Pixy_BaseUnit, 0};
static swig_type_info _swigt__p_Pixy__Caster = {"_p_Pixy__Caster", "Pixy::Caster *|Pixy::Deck::caster_t *", 0, 0, (void*)&_wrap_class_Pixy_Caster, 0};
static swig_type_info _swigt__p_Pixy__Combat = {"_p_Pixy__Combat", "Pixy::Combat *", 0, 0, (void*)&_wrap_class_Pixy_Combat, 0};
static swig_type_info _swigt__p_Pixy__Deck = {"_p_Pixy__Deck", "Pixy::Puppet::deck_t *|Pixy::Deck *", 0, 0, (void*)&_wrap_class_Pixy_Deck, 0};
static swig_type_info _swigt__p_Pixy__Entity = {"_p_Pixy__Entity", "Pixy::Entity *", 0, 0, (void*)&_wrap_class_Pixy_Entity, 0};
static swig_type_info _swigt__p_Pixy__Event = {"_p_Pixy__Event", "Pixy::Event *", 0, 0, (void*)&_wrap_class_Pixy_Event, 0};
static swig_type_info _swigt__p_Pixy__EventManager = {"_p_Pixy__EventManager", "Pixy::EventManager *", 0, 0, (void*)&_wrap_class_Pixy_EventManager, 0};
static swig_type_info _swigt__p_Pixy__FxEngine = {"_p_Pixy__FxEngine", "Pixy::FxEngine *", 0, 0, (void*)&_wrap_class_Pixy_FxEngine, 0};
static swig_type_info _swigt__p_Pixy__GameManager = {"_p_Pixy__GameManager", "Pixy::GameManager *", 0, 0, (void*)&_wrap_class_Pixy_GameManager, 0};
static swig_type_info _swigt__p_Pixy__GameState = {"_p_Pixy__GameState", "Pixy::GameState *", 0, 0, (void*)&_wrap_class_Pixy_GameState, 0};
static swig_type_info _swigt__p_Pixy__GfxEngine = {"_p_Pixy__GfxEngine", "Pixy::GfxEngine *", 0, 0, (void*)&_wrap_class_Pixy_GfxEngine, 0};
static swig_type_info _swigt__p_Pixy__Identifiable = {"_p_Pixy__Identifiable", "Pixy::Identifiable *", 0, 0, (void*)&_wrap_class_Pixy_Identifiable, 0};
static swig_type_info _swigt__p_Pixy__InputManager = {"_p_Pixy__InputManager", "Pixy::InputManager *", 0, 0, (void*)&_wrap_class_Pixy_InputManager, 0};
static swig_type_info _swigt__p_Pixy__Intro = {"_p_Pixy__Intro", "Pixy::Intro *", 0, 0, (void*)&_wrap_class_Pixy_Intro, 0};
static swig_type_info _swigt__p_Pixy__Loggable = {"_p_Pixy__Loggable", "Pixy::Loggable *", 0, 0, (void*)&_wrap_class_Pixy_Loggable, 0};
static swig_type_info _swigt__p_Pixy__LuaExporterT_std__listT_Pixy__Deck_p_t_t = {"_p_Pixy__LuaExporterT_std__listT_Pixy__Deck_p_t_t", "Pixy::LuaExporter< std::list< Pixy::Deck * > > *", 0, 0, (void*)&_wrap_class_Pixy_LuaExporter_Sl_std_list_Sl_Pixy_Deck_Sm__Sg__Sg_, 0};
static swig_type_info _swigt__p_Pixy__LuaExporterT_std__listT_Pixy__Puppet_p_t_t = {"_p_Pixy__LuaExporterT_std__listT_Pixy__Puppet_p_t_t", "Pixy::LuaExporter< std::list< Pixy::Puppet * > > *", 0, 0, (void*)&_wrap_class_Pixy_LuaExporter_Sl_std_list_Sl_Pixy_Puppet_Sm__Sg__Sg_, 0};
static swig_type_info _swigt__p_Pixy__LuaExporterT_std__listT_Pixy__Spell_p_t_t = {"_p_Pixy__LuaExporterT_std__listT_Pixy__Spell_p_t_t", "Pixy::LuaExporter< std::list< Pixy::Spell * > > *", 0, 0, (void*)&_wrap_class_Pixy_LuaExporter_Sl_std_list_Sl_Pixy_Spell_Sm__Sg__Sg_, 0};
static swig_type_info _swigt__p_Pixy__LuaExporterT_std__listT_Pixy__Unit_p_t_t = {"_p_Pixy__LuaExporterT_std__listT_Pixy__Unit_p_t_t", "Pixy::LuaExporter< std::list< Pixy::Unit * > > *", 0, 0, (void*)&_wrap_class_Pixy_LuaExporter_Sl_std_list_Sl_Pixy_Unit_Sm__Sg__Sg_, 0};
static swig_type_info _swigt__p_Pixy__Mobile = {"_p_Pixy__Mobile", "Pixy::Mobile *", 0, 0, (void*)&_wrap_class_Pixy_Mobile, 0};
static swig_type_info _swigt__p_Pixy__NetworkManager = {"_p_Pixy__NetworkManager", "Pixy::NetworkManager *", 0, 0, (void*)&_wrap_class_Pixy_NetworkManager, 0};
static swig_type_info _swigt__p_Pixy__OgreRTT = {"_p_Pixy__OgreRTT", "Pixy::OgreRTT *", 0, 0, (void*)&_wrap_class_Pixy_OgreRTT, 0};
static swig_type_info _swigt__p_Pixy__Puppet = {"_p_Pixy__Puppet", "Pixy::Puppet *", 0, 0, (void*)&_wrap_class_Pixy_Puppet, 0};
static swig_type_info _swigt__p_Pixy__Renderable = {"_p_Pixy__Renderable", "Pixy::Renderable *", 0, 0, (void*)&_wrap_class_Pixy_Renderable, 0};
static swig_type_info _swigt__p_Pixy__ScriptEngine = {"_p_Pixy__ScriptEngine", "Pixy::ScriptEngine *", 0, 0, (void*)&_wrap_class_Pixy_ScriptEngine, 0};
static swig_type_info _swigt__p_Pixy__Spell = {"_p_Pixy__Spell", "Pixy::Caster::spell_t *|Pixy::Spell *", 0, 0, (void*)&_wrap_class_Pixy_Spell, 0};
static swig_type_info _swigt__p_Pixy__Talent = {"_p_Pixy__Talent", "Pixy::Talent *|Pixy::BasePuppet::talent_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Pixy__UIEngine = {"_p_Pixy__UIEngine", "Pixy::UIEngine *", 0, 0, (void*)&_wrap_class_Pixy_UIEngine, 0};
static swig_type_info _swigt__p_Pixy__Unit = {"_p_Pixy__Unit", "Pixy::BasePuppet::unit_t *|Pixy::Puppet::unit_t *|Pixy::Unit *", 0, 0, (void*)&_wrap_class_Pixy_Unit, 0};
static swig_type_info _swigt__p_caster_t = {"_p_caster_t", "caster_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_deck_t = {"_p_deck_t", "deck_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_decks_t = {"_p_decks_t", "decks_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *|Ogre::Real *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|Ogre::uint8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mapT_std__string_std__string_t = {"_p_mapT_std__string_std__string_t", "Ogre::NameValuePairList *|map< std::string,std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_owner_t = {"_p_owner_t", "owner_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_property_t = {"_p_property_t", "property_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_puppets_t = {"_p_puppets_t", "puppets_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_spell_t = {"_p_spell_t", "spell_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_spells_t = {"_p_spells_t", "spells_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_Pixy__Deck_p_t = {"_p_std__listT_Pixy__Deck_p_t", "std::list< Pixy::Deck * > *|Pixy::Puppet::decks_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_Pixy__Puppet_p_t = {"_p_std__listT_Pixy__Puppet_p_t", "Pixy::Combat::puppets_t *|Pixy::Intro::puppets_t *|std::list< Pixy::Puppet * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_Pixy__Spell_p_t = {"_p_std__listT_Pixy__Spell_p_t", "Pixy::Caster::spells_t *|std::list< Pixy::Spell * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_Pixy__Talent_const_p_t = {"_p_std__listT_Pixy__Talent_const_p_t", "Pixy::BasePuppet::talents_t *|std::list< Pixy::Talent const * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_Pixy__Unit_p_t = {"_p_std__listT_Pixy__Unit_p_t", "Pixy::Puppet::units_t *|std::list< Pixy::Unit * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ostream = {"_p_std__ostream", "std::ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *|Ogre::String *", 0, 0, (void*)&_wrap_class_std_string, 0};
static swig_type_info _swigt__p_std__vectorT_Pixy__Spell_const_p_t = {"_p_std__vectorT_Pixy__Spell_const_p_t", "Pixy::Deck::spells_t *|std::vector< Pixy::Spell const * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_talent_t = {"_p_talent_t", "talent_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_talents_t = {"_p_talents_t", "talents_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint32 = {"_p_uint32", "Ogre::RGBA *|uint32 *|Ogre::ARGB *|Ogre::BGRA *|Ogre::ABGR *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unit_t = {"_p_unit_t", "unit_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_units_t = {"_p_units_t", "units_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "Ogre::uchar *|unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *|Ogre::uint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "Ogre::ulong *|unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|Ogre::ushort *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vectorT_Ogre__PixelFormat_t__type = {"_p_vectorT_Ogre__PixelFormat_t__type", "vector< Ogre::PixelFormat >::type *|Ogre::PixelFormatList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_CEGUI__UBox,
  &_swigt__p_CEGUI__Window,
  &_swigt__p_CornerEnum,
  &_swigt__p_MovableTextOverlay,
  &_swigt__p_OIS__Keyboard,
  &_swigt__p_OIS__Mouse,
  &_swigt__p_OgreBites__SdkCameraMan,
  &_swigt__p_OgreMax__OgreMaxScene,
  &_swigt__p_Ogre__BillboardSet,
  &_swigt__p_Ogre__Camera,
  &_swigt__p_Ogre__ColourValue,
  &_swigt__p_Ogre__Entity,
  &_swigt__p_Ogre__Light,
  &_swigt__p_Ogre__MovableObject,
  &_swigt__p_Ogre__RenderWindow,
  &_swigt__p_Ogre__Root,
  &_swigt__p_Ogre__SceneManager,
  &_swigt__p_Ogre__SceneNode,
  &_swigt__p_Ogre__SharedPtrT_Ogre__Resource_t,
  &_swigt__p_Ogre__Vector2,
  &_swigt__p_Ogre__Vector3,
  &_swigt__p_Ogre__Viewport,
  &_swigt__p_ParticleUniverse__ParticleSystem,
  &_swigt__p_Pixy__Animable,
  &_swigt__p_Pixy__BaseCaster,
  &_swigt__p_Pixy__BaseDeck,
  &_swigt__p_Pixy__BaseEntity,
  &_swigt__p_Pixy__BasePuppet,
  &_swigt__p_Pixy__BaseSpell,
  &_swigt__p_Pixy__BaseUnit,
  &_swigt__p_Pixy__Caster,
  &_swigt__p_Pixy__Combat,
  &_swigt__p_Pixy__Deck,
  &_swigt__p_Pixy__Entity,
  &_swigt__p_Pixy__Event,
  &_swigt__p_Pixy__EventManager,
  &_swigt__p_Pixy__FxEngine,
  &_swigt__p_Pixy__GameManager,
  &_swigt__p_Pixy__GameState,
  &_swigt__p_Pixy__GfxEngine,
  &_swigt__p_Pixy__Identifiable,
  &_swigt__p_Pixy__InputManager,
  &_swigt__p_Pixy__Intro,
  &_swigt__p_Pixy__Loggable,
  &_swigt__p_Pixy__LuaExporterT_std__listT_Pixy__Deck_p_t_t,
  &_swigt__p_Pixy__LuaExporterT_std__listT_Pixy__Puppet_p_t_t,
  &_swigt__p_Pixy__LuaExporterT_std__listT_Pixy__Spell_p_t_t,
  &_swigt__p_Pixy__LuaExporterT_std__listT_Pixy__Unit_p_t_t,
  &_swigt__p_Pixy__Mobile,
  &_swigt__p_Pixy__NetworkManager,
  &_swigt__p_Pixy__OgreRTT,
  &_swigt__p_Pixy__Puppet,
  &_swigt__p_Pixy__Renderable,
  &_swigt__p_Pixy__ScriptEngine,
  &_swigt__p_Pixy__Spell,
  &_swigt__p_Pixy__Talent,
  &_swigt__p_Pixy__UIEngine,
  &_swigt__p_Pixy__Unit,
  &_swigt__p_caster_t,
  &_swigt__p_deck_t,
  &_swigt__p_decks_t,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_mapT_std__string_std__string_t,
  &_swigt__p_owner_t,
  &_swigt__p_property_t,
  &_swigt__p_puppets_t,
  &_swigt__p_spell_t,
  &_swigt__p_spells_t,
  &_swigt__p_std__listT_Pixy__Deck_p_t,
  &_swigt__p_std__listT_Pixy__Puppet_p_t,
  &_swigt__p_std__listT_Pixy__Spell_p_t,
  &_swigt__p_std__listT_Pixy__Talent_const_p_t,
  &_swigt__p_std__listT_Pixy__Unit_p_t,
  &_swigt__p_std__ostream,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_Pixy__Spell_const_p_t,
  &_swigt__p_talent_t,
  &_swigt__p_talents_t,
  &_swigt__p_uint32,
  &_swigt__p_unit_t,
  &_swigt__p_units_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_vectorT_Ogre__PixelFormat_t__type,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_CEGUI__UBox[] = {  {&_swigt__p_CEGUI__UBox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CEGUI__Window[] = {  {&_swigt__p_CEGUI__Window, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CornerEnum[] = {  {&_swigt__p_CornerEnum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MovableTextOverlay[] = {  {&_swigt__p_MovableTextOverlay, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OIS__Keyboard[] = {  {&_swigt__p_OIS__Keyboard, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OIS__Mouse[] = {  {&_swigt__p_OIS__Mouse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OgreBites__SdkCameraMan[] = {  {&_swigt__p_OgreBites__SdkCameraMan, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OgreMax__OgreMaxScene[] = {  {&_swigt__p_OgreMax__OgreMaxScene, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Camera[] = {  {&_swigt__p_Ogre__Camera, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__ColourValue[] = {  {&_swigt__p_Ogre__ColourValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Entity[] = {  {&_swigt__p_Ogre__Entity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Light[] = {{&_swigt__p_Ogre__Light, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__BillboardSet[] = {{&_swigt__p_Ogre__BillboardSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__MovableObject[] = {  {&_swigt__p_Ogre__MovableObject, 0, 0, 0},  {&_swigt__p_Ogre__Entity, _p_Ogre__EntityTo_p_Ogre__MovableObject, 0, 0},  {&_swigt__p_Ogre__Light, _p_Ogre__LightTo_p_Ogre__MovableObject, 0, 0},  {&_swigt__p_Ogre__BillboardSet, _p_Ogre__BillboardSetTo_p_Ogre__MovableObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__RenderWindow[] = {  {&_swigt__p_Ogre__RenderWindow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Root[] = {  {&_swigt__p_Ogre__Root, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__SceneManager[] = {  {&_swigt__p_Ogre__SceneManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__SceneNode[] = {  {&_swigt__p_Ogre__SceneNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__SharedPtrT_Ogre__Resource_t[] = {  {&_swigt__p_Ogre__SharedPtrT_Ogre__Resource_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Vector2[] = {  {&_swigt__p_Ogre__Vector2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Vector3[] = {  {&_swigt__p_Ogre__Vector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Viewport[] = {  {&_swigt__p_Ogre__Viewport, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ParticleUniverse__ParticleSystem[] = {  {&_swigt__p_ParticleUniverse__ParticleSystem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pixy__Animable[] = {  {&_swigt__p_Pixy__Animable, 0, 0, 0},  {&_swigt__p_Pixy__Unit, _p_Pixy__UnitTo_p_Pixy__Animable, 0, 0},  {&_swigt__p_Pixy__Entity, _p_Pixy__EntityTo_p_Pixy__Animable, 0, 0},  {&_swigt__p_Pixy__Puppet, _p_Pixy__PuppetTo_p_Pixy__Animable, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pixy__BaseCaster[] = {  {&_swigt__p_Pixy__BaseCaster, 0, 0, 0},  {&_swigt__p_Pixy__Caster, _p_Pixy__CasterTo_p_Pixy__BaseCaster, 0, 0},  {&_swigt__p_Pixy__Unit, _p_Pixy__UnitTo_p_Pixy__BaseCaster, 0, 0},  {&_swigt__p_Pixy__Entity, _p_Pixy__EntityTo_p_Pixy__BaseCaster, 0, 0},  {&_swigt__p_Pixy__Puppet, _p_Pixy__PuppetTo_p_Pixy__BaseCaster, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pixy__BaseDeck[] = {  {&_swigt__p_Pixy__Deck, _p_Pixy__DeckTo_p_Pixy__BaseDeck, 0, 0},  {&_swigt__p_Pixy__BaseDeck, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pixy__BaseEntity[] = {  {&_swigt__p_Pixy__Unit, _p_Pixy__UnitTo_p_Pixy__BaseEntity, 0, 0},  {&_swigt__p_Pixy__BaseEntity, 0, 0, 0},  {&_swigt__p_Pixy__Entity, _p_Pixy__EntityTo_p_Pixy__BaseEntity, 0, 0},  {&_swigt__p_Pixy__Puppet, _p_Pixy__PuppetTo_p_Pixy__BaseEntity, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pixy__BasePuppet[] = {  {&_swigt__p_Pixy__BasePuppet, 0, 0, 0},  {&_swigt__p_Pixy__Puppet, _p_Pixy__PuppetTo_p_Pixy__BasePuppet, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pixy__BaseSpell[] = {  {&_swigt__p_Pixy__Spell, _p_Pixy__SpellTo_p_Pixy__BaseSpell, 0, 0},  {&_swigt__p_Pixy__BaseSpell, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pixy__BaseUnit[] = {  {&_swigt__p_Pixy__Unit, _p_Pixy__UnitTo_p_Pixy__BaseUnit, 0, 0},  {&_swigt__p_Pixy__BaseUnit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pixy__Caster[] = {  {&_swigt__p_Pixy__Caster, 0, 0, 0},  {&_swigt__p_Pixy__Unit, _p_Pixy__UnitTo_p_Pixy__Caster, 0, 0},  {&_swigt__p_Pixy__Entity, _p_Pixy__EntityTo_p_Pixy__Caster, 0, 0},  {&_swigt__p_Pixy__Puppet, _p_Pixy__PuppetTo_p_Pixy__Caster, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pixy__Combat[] = {  {&_swigt__p_Pixy__Combat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pixy__Deck[] = {  {&_swigt__p_Pixy__Deck, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pixy__Entity[] = {  {&_swigt__p_Pixy__Unit, _p_Pixy__UnitTo_p_Pixy__Entity, 0, 0},  {&_swigt__p_Pixy__Entity, 0, 0, 0},  {&_swigt__p_Pixy__Puppet, _p_Pixy__PuppetTo_p_Pixy__Entity, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pixy__Event[] = {  {&_swigt__p_Pixy__Event, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pixy__EventManager[] = {  {&_swigt__p_Pixy__EventManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pixy__FxEngine[] = {  {&_swigt__p_Pixy__FxEngine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pixy__GameManager[] = {  {&_swigt__p_Pixy__GameManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pixy__GameState[] = {  {&_swigt__p_Pixy__Combat, _p_Pixy__CombatTo_p_Pixy__GameState, 0, 0},  {&_swigt__p_Pixy__GameState, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pixy__GfxEngine[] = {  {&_swigt__p_Pixy__GfxEngine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pixy__Identifiable[] = {  {&_swigt__p_Pixy__Spell, _p_Pixy__SpellTo_p_Pixy__Identifiable, 0, 0},  {&_swigt__p_Pixy__Unit, _p_Pixy__UnitTo_p_Pixy__Identifiable, 0, 0},  {&_swigt__p_Pixy__Entity, _p_Pixy__EntityTo_p_Pixy__Identifiable, 0, 0},  {&_swigt__p_Pixy__BaseEntity, _p_Pixy__BaseEntityTo_p_Pixy__Identifiable, 0, 0},  {&_swigt__p_Pixy__Identifiable, 0, 0, 0},  {&_swigt__p_Pixy__Puppet, _p_Pixy__PuppetTo_p_Pixy__Identifiable, 0, 0},  {&_swigt__p_Pixy__BaseSpell, _p_Pixy__BaseSpellTo_p_Pixy__Identifiable, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pixy__InputManager[] = {  {&_swigt__p_Pixy__InputManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pixy__Intro[] = {  {&_swigt__p_Pixy__Intro, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pixy__Loggable[] = {  {&_swigt__p_Pixy__Spell, _p_Pixy__SpellTo_p_Pixy__Loggable, 0, 0},  {&_swigt__p_Pixy__Unit, _p_Pixy__UnitTo_p_Pixy__Loggable, 0, 0},  {&_swigt__p_Pixy__Entity, _p_Pixy__EntityTo_p_Pixy__Loggable, 0, 0},  {&_swigt__p_Pixy__BaseEntity, _p_Pixy__BaseEntityTo_p_Pixy__Loggable, 0, 0},  {&_swigt__p_Pixy__Loggable, 0, 0, 0},  {&_swigt__p_Pixy__Puppet, _p_Pixy__PuppetTo_p_Pixy__Loggable, 0, 0},  {&_swigt__p_Pixy__BaseSpell, _p_Pixy__BaseSpellTo_p_Pixy__Loggable, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pixy__LuaExporterT_std__listT_Pixy__Deck_p_t_t[] = {  {&_swigt__p_Pixy__LuaExporterT_std__listT_Pixy__Deck_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pixy__LuaExporterT_std__listT_Pixy__Puppet_p_t_t[] = {  {&_swigt__p_Pixy__LuaExporterT_std__listT_Pixy__Puppet_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pixy__LuaExporterT_std__listT_Pixy__Spell_p_t_t[] = {  {&_swigt__p_Pixy__LuaExporterT_std__listT_Pixy__Spell_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pixy__LuaExporterT_std__listT_Pixy__Unit_p_t_t[] = {  {&_swigt__p_Pixy__LuaExporterT_std__listT_Pixy__Unit_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pixy__Mobile[] = {  {&_swigt__p_Pixy__Unit, _p_Pixy__UnitTo_p_Pixy__Mobile, 0, 0},  {&_swigt__p_Pixy__Mobile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pixy__NetworkManager[] = {  {&_swigt__p_Pixy__NetworkManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pixy__OgreRTT[] = {  {&_swigt__p_Pixy__OgreRTT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pixy__Puppet[] = {  {&_swigt__p_Pixy__Puppet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pixy__Renderable[] = {  {&_swigt__p_Pixy__Unit, _p_Pixy__UnitTo_p_Pixy__Renderable, 0, 0},  {&_swigt__p_Pixy__Entity, _p_Pixy__EntityTo_p_Pixy__Renderable, 0, 0},  {&_swigt__p_Pixy__Renderable, 0, 0, 0},  {&_swigt__p_Pixy__Puppet, _p_Pixy__PuppetTo_p_Pixy__Renderable, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pixy__ScriptEngine[] = {  {&_swigt__p_Pixy__ScriptEngine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pixy__Spell[] = {  {&_swigt__p_Pixy__Spell, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pixy__Talent[] = {  {&_swigt__p_Pixy__Talent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pixy__UIEngine[] = {  {&_swigt__p_Pixy__UIEngine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pixy__Unit[] = {  {&_swigt__p_Pixy__Unit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_caster_t[] = {  {&_swigt__p_caster_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_deck_t[] = {  {&_swigt__p_deck_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_decks_t[] = {  {&_swigt__p_decks_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mapT_std__string_std__string_t[] = {  {&_swigt__p_mapT_std__string_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_owner_t[] = {  {&_swigt__p_owner_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_property_t[] = {  {&_swigt__p_property_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_puppets_t[] = {  {&_swigt__p_puppets_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_spell_t[] = {  {&_swigt__p_spell_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_spells_t[] = {  {&_swigt__p_spells_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_Pixy__Deck_p_t[] = {  {&_swigt__p_std__listT_Pixy__Deck_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_Pixy__Puppet_p_t[] = {  {&_swigt__p_std__listT_Pixy__Puppet_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_Pixy__Spell_p_t[] = {  {&_swigt__p_std__listT_Pixy__Spell_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_Pixy__Talent_const_p_t[] = {  {&_swigt__p_std__listT_Pixy__Talent_const_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_Pixy__Unit_p_t[] = {  {&_swigt__p_std__listT_Pixy__Unit_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ostream[] = {  {&_swigt__p_std__ostream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Pixy__Spell_const_p_t[] = {  {&_swigt__p_std__vectorT_Pixy__Spell_const_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_talent_t[] = {  {&_swigt__p_talent_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_talents_t[] = {  {&_swigt__p_talents_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint32[] = {  {&_swigt__p_uint32, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unit_t[] = {  {&_swigt__p_unit_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_units_t[] = {  {&_swigt__p_units_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vectorT_Ogre__PixelFormat_t__type[] = {  {&_swigt__p_vectorT_Ogre__PixelFormat_t__type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_CEGUI__UBox,
  _swigc__p_CEGUI__Window,
  _swigc__p_CornerEnum,
  _swigc__p_MovableTextOverlay,
  _swigc__p_OIS__Keyboard,
  _swigc__p_OIS__Mouse,
  _swigc__p_OgreBites__SdkCameraMan,
  _swigc__p_OgreMax__OgreMaxScene,
  _swigc__p_Ogre__BillboardSet,
  _swigc__p_Ogre__Camera,
  _swigc__p_Ogre__ColourValue,
  _swigc__p_Ogre__Entity,
  _swigc__p_Ogre__Light,
  _swigc__p_Ogre__MovableObject,
  _swigc__p_Ogre__RenderWindow,
  _swigc__p_Ogre__Root,
  _swigc__p_Ogre__SceneManager,
  _swigc__p_Ogre__SceneNode,
  _swigc__p_Ogre__SharedPtrT_Ogre__Resource_t,
  _swigc__p_Ogre__Vector2,
  _swigc__p_Ogre__Vector3,
  _swigc__p_Ogre__Viewport,
  _swigc__p_ParticleUniverse__ParticleSystem,
  _swigc__p_Pixy__Animable,
  _swigc__p_Pixy__BaseCaster,
  _swigc__p_Pixy__BaseDeck,
  _swigc__p_Pixy__BaseEntity,
  _swigc__p_Pixy__BasePuppet,
  _swigc__p_Pixy__BaseSpell,
  _swigc__p_Pixy__BaseUnit,
  _swigc__p_Pixy__Caster,
  _swigc__p_Pixy__Combat,
  _swigc__p_Pixy__Deck,
  _swigc__p_Pixy__Entity,
  _swigc__p_Pixy__Event,
  _swigc__p_Pixy__EventManager,
  _swigc__p_Pixy__FxEngine,
  _swigc__p_Pixy__GameManager,
  _swigc__p_Pixy__GameState,
  _swigc__p_Pixy__GfxEngine,
  _swigc__p_Pixy__Identifiable,
  _swigc__p_Pixy__InputManager,
  _swigc__p_Pixy__Intro,
  _swigc__p_Pixy__Loggable,
  _swigc__p_Pixy__LuaExporterT_std__listT_Pixy__Deck_p_t_t,
  _swigc__p_Pixy__LuaExporterT_std__listT_Pixy__Puppet_p_t_t,
  _swigc__p_Pixy__LuaExporterT_std__listT_Pixy__Spell_p_t_t,
  _swigc__p_Pixy__LuaExporterT_std__listT_Pixy__Unit_p_t_t,
  _swigc__p_Pixy__Mobile,
  _swigc__p_Pixy__NetworkManager,
  _swigc__p_Pixy__OgreRTT,
  _swigc__p_Pixy__Puppet,
  _swigc__p_Pixy__Renderable,
  _swigc__p_Pixy__ScriptEngine,
  _swigc__p_Pixy__Spell,
  _swigc__p_Pixy__Talent,
  _swigc__p_Pixy__UIEngine,
  _swigc__p_Pixy__Unit,
  _swigc__p_caster_t,
  _swigc__p_deck_t,
  _swigc__p_decks_t,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_mapT_std__string_std__string_t,
  _swigc__p_owner_t,
  _swigc__p_property_t,
  _swigc__p_puppets_t,
  _swigc__p_spell_t,
  _swigc__p_spells_t,
  _swigc__p_std__listT_Pixy__Deck_p_t,
  _swigc__p_std__listT_Pixy__Puppet_p_t,
  _swigc__p_std__listT_Pixy__Spell_p_t,
  _swigc__p_std__listT_Pixy__Talent_const_p_t,
  _swigc__p_std__listT_Pixy__Unit_p_t,
  _swigc__p_std__ostream,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_Pixy__Spell_const_p_t,
  _swigc__p_talent_t,
  _swigc__p_talents_t,
  _swigc__p_uint32,
  _swigc__p_unit_t,
  _swigc__p_units_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_short,
  _swigc__p_vectorT_Ogre__PixelFormat_t__type,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an eariler #define will rename it
*/
SWIGEXPORT int SWIG_init(lua_State* L)
{
  int i;
  /* start with global table */
  lua_pushvalue(L,LUA_GLOBALSINDEX);
  /* SWIG's internal initalisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_equal);
  /* begin the module (its a table with the same name as the module) */
  SWIG_Lua_module_begin(L,SWIG_name);
  /* add commands/functions */
  for (i = 0; swig_commands[i].name; i++){
    SWIG_Lua_module_add_function(L,swig_commands[i].name,swig_commands[i].func);
  }
  /* add variables */
  for (i = 0; swig_variables[i].name; i++){
    SWIG_Lua_module_add_variable(L,swig_variables[i].name,swig_variables[i].get,swig_variables[i].set);
  }
  /* set up base class pointers (the hierachy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* additional registration structs & classes in lua */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_class_register(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* constants */
  SWIG_Lua_InstallConstants(L,swig_constants);
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  lua_pop(L,1);  /* tidy stack (remove module table)*/
  lua_pop(L,1);  /* tidy stack (remove global table)*/
  return 1;
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "\n"
  "  print \"--\"\n"
  "  print \"Pixy SWIG module loaded ok\"\n"
  "  print \"dumping Pixy table\"\n"
  "  for k in pairs(Pixy) do print(\"# \" .. k) end\n"
  "  print \"--\"\n"
  "\n"
  "\n"
  "  Pixy.Log = Pixy.ScriptEngine_Log\n"
  "\n"
  "\n"
  "  print \"--\"\n"
  "  print \"Elementum SWIG module loaded ok\"\n"
  "  print \"dumping Pixy table\"\n"
  "  for k in pairs(Pixy) do print(\"# \" .. k) end\n"
  "  print \"--\"";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

