/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGLUA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

typedef struct {
  const char     *name;
  lua_CFunction   method;
} swig_lua_method;

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;

typedef struct swig_lua_class {
  const char    *name;
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrappering all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { lua_pushstring(L, (char *) msg); goto fail; } else

/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {lua_pushfstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {lua_pushfstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
//#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a)))
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State* L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State* L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default value is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State* L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  lua_pushstring(L,"This variable is immutable");
  lua_error(L);
#endif
    return 0;   /* should not return anything */
}

/* the module.get method used for getting linked data */
SWIGINTERN int SWIG_Lua_module_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  printf("SWIG_Lua_module_get %p(%s) '%s'\n",
   lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
   lua_tostring(L,2));
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get");  /* get the .get table */
  lua_remove(L,3);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .get table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,3);  /* remove .get */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_call(L,0,1);
      return 1;
    }
    lua_pop(L,1);  /* remove the top */
  }
  lua_pop(L,1);  /* remove the .get */
  lua_pushnil(L);  /* return a nil */
    return 1;
}

/* the module.set method used for setting linked data */
SWIGINTERN int SWIG_Lua_module_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".set");  /* get the .set table */
  lua_remove(L,4);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,4);  /* remove .set */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
  }
  lua_settop(L,3);  /* reset back to start */
  /* we now have the table, key & new value, so just set directly */
  lua_rawset(L,1);  /* add direct */
  return 0;
}

/* registering a module in lua */
SWIGINTERN void  SWIG_Lua_module_begin(lua_State* L,const char* name)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushstring(L,name);
  lua_newtable(L);   /* the table */
  /* add meta table */
  lua_newtable(L);    /* the meta table */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_module_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_module_set);
  lua_pushstring(L,".get");
  lua_newtable(L);    /* the .get table */
  lua_rawset(L,-3);  /* add .get into metatable */
  lua_pushstring(L,".set");
  lua_newtable(L);    /* the .set table */
  lua_rawset(L,-3);  /* add .set into metatable */
  lua_setmetatable(L,-2);  /* sets meta table in module */
  lua_rawset(L,-3);        /* add module into parent */
  SWIG_Lua_get_table(L,name);   /* get the table back out */
}

/* ending the register */
SWIGINTERN void  SWIG_Lua_module_end(lua_State* L)
{
  lua_pop(L,1);       /* tidy stack (remove module) */
}

/* adding a linked variable to the module */
SWIGINTERN void SWIG_Lua_module_add_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_getmetatable(L,-1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* should be a table: */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)  /* if there is a set fn */
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* should be a table: */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
  lua_pop(L,1);       /* tidy stack (remove meta) */
}

/* adding a function module */
SWIGINTERN void  SWIG_Lua_module_add_function(lua_State* L,const char* name,lua_CFunction fn)
{
  SWIG_Lua_add_function(L,name,fn);
}

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

/* the class.get method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;  /* sorry not known */
}

/* the class.set method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
printf("SWIG_Lua_class_set %p(%s) '%s' %p(%s)\n",
      lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
      lua_tostring(L,2),
      lua_topointer(L,3),lua_typename(L,lua_type(L,3)));*/

  assert(lua_isuserdata(L,1));  /* just in case */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,1);  /* userdata */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,2,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_pushvalue(L,3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  swig_lua_class* clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* gets the swig class registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State* L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    lua_pushstring(L,"SWIG");
    lua_newtable(L);
    lua_rawset(L,LUA_REGISTRYINDEX);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

/* helper fn to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State* L,const char* cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_details(lua_State* L,swig_lua_class* clss)
{
  int i;
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_details(L,clss->bases[i]);
  }
  /* add fns */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /*   add operator overloads
    these look ANY method which start with "__" and assume they
    are operator overloads & add them to the metatable
    (this might mess up is someone defines a method __gc (the destructor)*/
  for(i=0;clss->methods[i].name;i++){
    if (clss->methods[i].name[0]=='_' && clss->methods[i].name[1]=='_'){
      SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
    }
  }
}

/* set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State* L,swig_lua_class* clss)
{
  int i=0;
  swig_module_info* module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }	
}

/* performs the entire class registration process */
SWIGINTERN void  SWIG_Lua_class_register(lua_State* L,swig_lua_class* clss)
{
  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
    SWIG_Lua_add_function(L,clss->name,clss->constructor);

  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->name);  /* get the name */
  lua_newtable(L);    /* create the metatable */
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->name);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */

  SWIG_Lua_get_class_metatable(L,clss->name);
  SWIG_Lua_add_class_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
}

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void _SWIG_Lua_AddMetatable(lua_State* L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->name);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State* L,void* ptr,swig_type_info *type, int own)
{
  swig_lua_userdata* usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State* L,int index,void** ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata* usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State* L,int index,swig_type_info *type,int flags,
       int argnum,const char* func_name){
  void* result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    lua_pushfstring(L,"Error in %s, expected a %s at argument number %d\n",
      func_name,(type && type->str)?type->str:"void*",argnum);
    lua_error(L);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State* L,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State* L,int index,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata* usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State* L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_equal(lua_State* L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua a really simple way of calling lua from C
Unfortunately lua keeps changing its API's, so we need a conditional compile
In lua 5.0.X its lua_dostring()
In lua 5.1.X its luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char* str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_BillboardSet swig_types[0]
#define SWIGTYPE_p_CornerEnum swig_types[1]
#define SWIGTYPE_p_OgreBites__SdkCameraMan swig_types[2]
#define SWIGTYPE_p_Ogre__Angle swig_types[3]
#define SWIGTYPE_p_Ogre__Any swig_types[4]
#define SWIGTYPE_p_Ogre__AxisAlignedBox swig_types[5]
#define SWIGTYPE_p_Ogre__Billboard swig_types[6]
#define SWIGTYPE_p_Ogre__BillboardSet swig_types[7]
#define SWIGTYPE_p_Ogre__Camera swig_types[8]
#define SWIGTYPE_p_Ogre__ColourValue swig_types[9]
#define SWIGTYPE_p_Ogre__CompositorInstance swig_types[10]
#define SWIGTYPE_p_Ogre__CompositorLogic swig_types[11]
#define SWIGTYPE_p_Ogre__CompositorManager swig_types[12]
#define SWIGTYPE_p_Ogre__Degree swig_types[13]
#define SWIGTYPE_p_Ogre__Entity swig_types[14]
#define SWIGTYPE_p_Ogre__InstancedGeometry swig_types[15]
#define SWIGTYPE_p_Ogre__Light swig_types[16]
#define SWIGTYPE_p_Ogre__ManualResourceLoader swig_types[17]
#define SWIGTYPE_p_Ogre__MeshManager swig_types[18]
#define SWIGTYPE_p_Ogre__MeshPtr swig_types[19]
#define SWIGTYPE_p_Ogre__MovableObject swig_types[20]
#define SWIGTYPE_p_Ogre__Node swig_types[21]
#define SWIGTYPE_p_Ogre__Plane swig_types[22]
#define SWIGTYPE_p_Ogre__Quaternion swig_types[23]
#define SWIGTYPE_p_Ogre__Radian swig_types[24]
#define SWIGTYPE_p_Ogre__RenderTarget swig_types[25]
#define SWIGTYPE_p_Ogre__RenderWindow swig_types[26]
#define SWIGTYPE_p_Ogre__Renderable swig_types[27]
#define SWIGTYPE_p_Ogre__Resource swig_types[28]
#define SWIGTYPE_p_Ogre__ResourceGroupManager swig_types[29]
#define SWIGTYPE_p_Ogre__ResourceManager swig_types[30]
#define SWIGTYPE_p_Ogre__RibbonTrail swig_types[31]
#define SWIGTYPE_p_Ogre__SceneManager swig_types[32]
#define SWIGTYPE_p_Ogre__SceneNode swig_types[33]
#define SWIGTYPE_p_Ogre__SharedPtrT_Ogre__Resource_t swig_types[34]
#define SWIGTYPE_p_Ogre__StaticGeometry swig_types[35]
#define SWIGTYPE_p_Ogre__SubEntity swig_types[36]
#define SWIGTYPE_p_Ogre__Vector2 swig_types[37]
#define SWIGTYPE_p_Ogre__Vector3 swig_types[38]
#define SWIGTYPE_p_Ogre__Viewport swig_types[39]
#define SWIGTYPE_p_Ogre__uint16 swig_types[40]
#define SWIGTYPE_p_SceneManager swig_types[41]
#define SWIGTYPE_p_Viewport swig_types[42]
#define SWIGTYPE_p_float swig_types[43]
#define SWIGTYPE_p_int swig_types[44]
#define SWIGTYPE_p_mapT_std__string_std__string_t swig_types[45]
#define SWIGTYPE_p_std__string swig_types[46]
#define SWIGTYPE_p_std__type_info swig_types[47]
#define SWIGTYPE_p_uint32 swig_types[48]
#define SWIGTYPE_p_unsigned_char swig_types[49]
#define SWIGTYPE_p_unsigned_int swig_types[50]
#define SWIGTYPE_p_unsigned_long swig_types[51]
#define SWIGTYPE_p_unsigned_short swig_types[52]
#define SWIGTYPE_p_vectorT_Ogre__PixelFormat_t__type swig_types[53]
static swig_type_info *swig_types[55];
static swig_module_info swig_module = {swig_types, 54, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "Ogre"
#define SWIG_init      luaopen_Ogre
#define SWIG_init_user luaopen_Ogre_user

#define SWIG_LUACODE   luaopen_Ogre_luacode


namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


  #include <Ogre.h>
  #include "ogre/SdkCameraMan.h"
  using namespace Ogre;
  using namespace OgreBites;


	#include <string>


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",0,0)
  result = (std::string *)new std::string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("std::string::string",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (std::string *)new std::string((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::string()\n"
    "    std::string::string(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_string_size(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::size",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_length(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::length",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_length",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::string::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::empty",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string);
  }
  
  result = (bool)((std::string const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_c_str(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::c_str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::c_str",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_c_str",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->c_str();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_data(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::data",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->data();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("std::string::assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::assign",1,"std::string *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("std::string::assign",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_assign",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->assign((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static swig_lua_method swig_std_string_methods[] = {
    {"size", _wrap_string_size}, 
    {"length", _wrap_string_length}, 
    {"empty", _wrap_string_empty}, 
    {"c_str", _wrap_string_c_str}, 
    {"data", _wrap_string_data}, 
    {"assign", _wrap_string_assign}, 
    {0,0}
};
static swig_lua_attribute swig_std_string_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_std_string_bases[] = {0};
static const char *swig_std_string_base_names[] = {0};
static swig_lua_class _wrap_class_std_string = { "string", &SWIGTYPE_p_std__string,_wrap_new_string, swig_delete_string, swig_std_string_methods, swig_std_string_attributes, swig_std_string_bases, swig_std_string_base_names };

static int _wrap_new_Any__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Any *result = 0 ;
  
  SWIG_check_num_args("Ogre::Any::Any",0,0)
  result = (Ogre::Any *)new Ogre::Any();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Any,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Any__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Any *arg1 = 0 ;
  Ogre::Any *result = 0 ;
  
  SWIG_check_num_args("Ogre::Any::Any",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ogre::Any::Any",1,"Ogre::Any const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Any,0))){
    SWIG_fail_ptr("new_Any",1,SWIGTYPE_p_Ogre__Any);
  }
  
  result = (Ogre::Any *)new Ogre::Any((Ogre::Any const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Any,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Any(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Any__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Any, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Any__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Any'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::Any::Any()\n"
    "    Ogre::Any::Any(Ogre::Any const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Any_isEmpty(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Any *arg1 = (Ogre::Any *) 0 ;
  bool result;
  
  SWIG_check_num_args("Ogre::Any::isEmpty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Any::isEmpty",1,"Ogre::Any const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Any,0))){
    SWIG_fail_ptr("Any_isEmpty",1,SWIGTYPE_p_Ogre__Any);
  }
  
  result = (bool)((Ogre::Any const *)arg1)->isEmpty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Any_getType(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Any *arg1 = (Ogre::Any *) 0 ;
  std::type_info *result = 0 ;
  
  SWIG_check_num_args("Ogre::Any::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Any::getType",1,"Ogre::Any const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Any,0))){
    SWIG_fail_ptr("Any_getType",1,SWIGTYPE_p_Ogre__Any);
  }
  
  result = (std::type_info *) &((Ogre::Any const *)arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__type_info,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Any_destroy(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Any *arg1 = (Ogre::Any *) 0 ;
  
  SWIG_check_num_args("Ogre::Any::destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Any::destroy",1,"Ogre::Any *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Any,0))){
    SWIG_fail_ptr("Any_destroy",1,SWIGTYPE_p_Ogre__Any);
  }
  
  (arg1)->destroy();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Any(void *obj) {
Ogre::Any *arg1 = (Ogre::Any *) obj;
delete arg1;
}
static swig_lua_method swig_Ogre_Any_methods[] = {
    {"isEmpty", _wrap_Any_isEmpty}, 
    {"getType", _wrap_Any_getType}, 
    {"destroy", _wrap_Any_destroy}, 
    {0,0}
};
static swig_lua_attribute swig_Ogre_Any_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Ogre_Any_bases[] = {0};
static const char *swig_Ogre_Any_base_names[] = {0};
static swig_lua_class _wrap_class_Ogre_Any = { "Any", &SWIGTYPE_p_Ogre__Any,_wrap_new_Any, swig_delete_Any, swig_Ogre_Any_methods, swig_Ogre_Any_attributes, swig_Ogre_Any_bases, swig_Ogre_Any_base_names };

static int _wrap_Vector2_x_set(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector2 *arg1 = (Ogre::Vector2 *) 0 ;
  Ogre::Real arg2 ;
  
  SWIG_check_num_args("Ogre::Vector2::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Vector2::x",1,"Ogre::Vector2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::Vector2::x",2,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Vector2,0))){
    SWIG_fail_ptr("Vector2_x_set",1,SWIGTYPE_p_Ogre__Vector2);
  }
  
  arg2 = (Ogre::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_x_get(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector2 *arg1 = (Ogre::Vector2 *) 0 ;
  Ogre::Real result;
  
  SWIG_check_num_args("Ogre::Vector2::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Vector2::x",1,"Ogre::Vector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Vector2,0))){
    SWIG_fail_ptr("Vector2_x_get",1,SWIGTYPE_p_Ogre__Vector2);
  }
  
  result = (Ogre::Real) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_y_set(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector2 *arg1 = (Ogre::Vector2 *) 0 ;
  Ogre::Real arg2 ;
  
  SWIG_check_num_args("Ogre::Vector2::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Vector2::y",1,"Ogre::Vector2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::Vector2::y",2,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Vector2,0))){
    SWIG_fail_ptr("Vector2_y_set",1,SWIGTYPE_p_Ogre__Vector2);
  }
  
  arg2 = (Ogre::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_y_get(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector2 *arg1 = (Ogre::Vector2 *) 0 ;
  Ogre::Real result;
  
  SWIG_check_num_args("Ogre::Vector2::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Vector2::y",1,"Ogre::Vector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Vector2,0))){
    SWIG_fail_ptr("Vector2_y_get",1,SWIGTYPE_p_Ogre__Vector2);
  }
  
  result = (Ogre::Real) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Real arg1 ;
  Ogre::Real arg2 ;
  Ogre::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Ogre::Vector2::Vector2",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ogre::Vector2::Vector2",1,"Ogre::Real const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::Vector2::Vector2",2,"Ogre::Real const");
  arg1 = (Ogre::Real const)lua_tonumber(L, 1);
  arg2 = (Ogre::Real const)lua_tonumber(L, 2);
  result = (Ogre::Vector2 *)new Ogre::Vector2(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Vector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Real arg1 ;
  Ogre::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Ogre::Vector2::Vector2",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ogre::Vector2::Vector2",1,"Ogre::Real const");
  arg1 = (Ogre::Real const)lua_tonumber(L, 1);
  result = (Ogre::Vector2 *)new Ogre::Vector2(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Vector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Vector2__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Vector2__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Vector2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::Vector2::Vector2(Ogre::Real const,Ogre::Real const)\n"
    "    Ogre::Vector2::Vector2(Ogre::Real const)\n");
  lua_error(L);return 0;
}


static void swig_delete_Vector2(void *obj) {
Ogre::Vector2 *arg1 = (Ogre::Vector2 *) obj;
delete arg1;
}
static swig_lua_method swig_Ogre_Vector2_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_Ogre_Vector2_attributes[] = {
    { "x", _wrap_Vector2_x_get, _wrap_Vector2_x_set},
    { "y", _wrap_Vector2_y_get, _wrap_Vector2_y_set},
    {0,0,0}
};
static swig_lua_class *swig_Ogre_Vector2_bases[] = {0};
static const char *swig_Ogre_Vector2_base_names[] = {0};
static swig_lua_class _wrap_class_Ogre_Vector2 = { "Vector2", &SWIGTYPE_p_Ogre__Vector2,_wrap_new_Vector2, swig_delete_Vector2, swig_Ogre_Vector2_methods, swig_Ogre_Vector2_attributes, swig_Ogre_Vector2_bases, swig_Ogre_Vector2_base_names };

static int _wrap_new_Vector3__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Real arg1 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Ogre::Vector3::Vector3",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ogre::Vector3::Vector3",1,"Ogre::Real const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::Vector3::Vector3",2,"Ogre::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ogre::Vector3::Vector3",3,"Ogre::Real const");
  arg1 = (Ogre::Real const)lua_tonumber(L, 1);
  arg2 = (Ogre::Real const)lua_tonumber(L, 2);
  arg3 = (Ogre::Real const)lua_tonumber(L, 3);
  result = (Ogre::Vector3 *)new Ogre::Vector3(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Real arg1 ;
  Ogre::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Ogre::Vector3::Vector3",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ogre::Vector3::Vector3",1,"Ogre::Real const");
  arg1 = (Ogre::Real const)lua_tonumber(L, 1);
  result = (Ogre::Vector3 *)new Ogre::Vector3(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Vector3__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Vector3__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Vector3'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::Vector3::Vector3(Ogre::Real const,Ogre::Real const,Ogre::Real const)\n"
    "    Ogre::Vector3::Vector3(Ogre::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3_x_set(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector3 *arg1 = (Ogre::Vector3 *) 0 ;
  Ogre::Real arg2 ;
  
  SWIG_check_num_args("Ogre::Vector3::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Vector3::x",1,"Ogre::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::Vector3::x",2,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Vector3_x_set",1,SWIGTYPE_p_Ogre__Vector3);
  }
  
  arg2 = (Ogre::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_x_get(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector3 *arg1 = (Ogre::Vector3 *) 0 ;
  Ogre::Real result;
  
  SWIG_check_num_args("Ogre::Vector3::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Vector3::x",1,"Ogre::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Vector3_x_get",1,SWIGTYPE_p_Ogre__Vector3);
  }
  
  result = (Ogre::Real) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_y_set(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector3 *arg1 = (Ogre::Vector3 *) 0 ;
  Ogre::Real arg2 ;
  
  SWIG_check_num_args("Ogre::Vector3::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Vector3::y",1,"Ogre::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::Vector3::y",2,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Vector3_y_set",1,SWIGTYPE_p_Ogre__Vector3);
  }
  
  arg2 = (Ogre::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_y_get(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector3 *arg1 = (Ogre::Vector3 *) 0 ;
  Ogre::Real result;
  
  SWIG_check_num_args("Ogre::Vector3::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Vector3::y",1,"Ogre::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Vector3_y_get",1,SWIGTYPE_p_Ogre__Vector3);
  }
  
  result = (Ogre::Real) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_z_set(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector3 *arg1 = (Ogre::Vector3 *) 0 ;
  Ogre::Real arg2 ;
  
  SWIG_check_num_args("Ogre::Vector3::z",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Vector3::z",1,"Ogre::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::Vector3::z",2,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Vector3_z_set",1,SWIGTYPE_p_Ogre__Vector3);
  }
  
  arg2 = (Ogre::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->z = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_z_get(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector3 *arg1 = (Ogre::Vector3 *) 0 ;
  Ogre::Real result;
  
  SWIG_check_num_args("Ogre::Vector3::z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Vector3::z",1,"Ogre::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Vector3_z_get",1,SWIGTYPE_p_Ogre__Vector3);
  }
  
  result = (Ogre::Real) ((arg1)->z);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_ZERO_get(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Ogre::Vector3::ZERO",0,0)
  result = (Ogre::Vector3 *)&Ogre::Vector3::ZERO;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_UNIT_X_get(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Ogre::Vector3::UNIT_X",0,0)
  result = (Ogre::Vector3 *)&Ogre::Vector3::UNIT_X;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_UNIT_Y_get(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Ogre::Vector3::UNIT_Y",0,0)
  result = (Ogre::Vector3 *)&Ogre::Vector3::UNIT_Y;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_UNIT_Z_get(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Ogre::Vector3::UNIT_Z",0,0)
  result = (Ogre::Vector3 *)&Ogre::Vector3::UNIT_Z;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_NEGATIVE_UNIT_X_get(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Ogre::Vector3::NEGATIVE_UNIT_X",0,0)
  result = (Ogre::Vector3 *)&Ogre::Vector3::NEGATIVE_UNIT_X;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_NEGATIVE_UNIT_Y_get(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Ogre::Vector3::NEGATIVE_UNIT_Y",0,0)
  result = (Ogre::Vector3 *)&Ogre::Vector3::NEGATIVE_UNIT_Y;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_NEGATIVE_UNIT_Z_get(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Ogre::Vector3::NEGATIVE_UNIT_Z",0,0)
  result = (Ogre::Vector3 *)&Ogre::Vector3::NEGATIVE_UNIT_Z;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_UNIT_SCALE_get(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Ogre::Vector3::UNIT_SCALE",0,0)
  result = (Ogre::Vector3 *)&Ogre::Vector3::UNIT_SCALE;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vector3(void *obj) {
Ogre::Vector3 *arg1 = (Ogre::Vector3 *) obj;
delete arg1;
}
static swig_lua_method swig_Ogre_Vector3_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_Ogre_Vector3_attributes[] = {
    { "x", _wrap_Vector3_x_get, _wrap_Vector3_x_set},
    { "y", _wrap_Vector3_y_get, _wrap_Vector3_y_set},
    { "z", _wrap_Vector3_z_get, _wrap_Vector3_z_set},
    {0,0,0}
};
static swig_lua_class *swig_Ogre_Vector3_bases[] = {0};
static const char *swig_Ogre_Vector3_base_names[] = {0};
static swig_lua_class _wrap_class_Ogre_Vector3 = { "Vector3", &SWIGTYPE_p_Ogre__Vector3,_wrap_new_Vector3, swig_delete_Vector3, swig_Ogre_Vector3_methods, swig_Ogre_Vector3_attributes, swig_Ogre_Vector3_bases, swig_Ogre_Vector3_base_names };

static int _wrap_new_Degree(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  Ogre::Degree *result = 0 ;
  
  SWIG_check_num_args("Ogre::Degree::Degree",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ogre::Degree::Degree",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (Ogre::Degree *)new Ogre::Degree(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Degree,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Degree_valueDegrees(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Degree *arg1 = (Ogre::Degree *) 0 ;
  Ogre::Real result;
  
  SWIG_check_num_args("Ogre::Degree::valueDegrees",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Degree::valueDegrees",1,"Ogre::Degree const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Degree,0))){
    SWIG_fail_ptr("Degree_valueDegrees",1,SWIGTYPE_p_Ogre__Degree);
  }
  
  result = (Ogre::Real)((Ogre::Degree const *)arg1)->valueDegrees();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Degree_valueRadians(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Degree *arg1 = (Ogre::Degree *) 0 ;
  Ogre::Real result;
  
  SWIG_check_num_args("Ogre::Degree::valueRadians",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Degree::valueRadians",1,"Ogre::Degree const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Degree,0))){
    SWIG_fail_ptr("Degree_valueRadians",1,SWIGTYPE_p_Ogre__Degree);
  }
  
  result = (Ogre::Real)((Ogre::Degree const *)arg1)->valueRadians();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Degree_valueAngleUnits(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Degree *arg1 = (Ogre::Degree *) 0 ;
  Ogre::Real result;
  
  SWIG_check_num_args("Ogre::Degree::valueAngleUnits",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Degree::valueAngleUnits",1,"Ogre::Degree const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Degree,0))){
    SWIG_fail_ptr("Degree_valueAngleUnits",1,SWIGTYPE_p_Ogre__Degree);
  }
  
  result = (Ogre::Real)((Ogre::Degree const *)arg1)->valueAngleUnits();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Degree(void *obj) {
Ogre::Degree *arg1 = (Ogre::Degree *) obj;
delete arg1;
}
static swig_lua_method swig_Ogre_Degree_methods[] = {
    {"valueDegrees", _wrap_Degree_valueDegrees}, 
    {"valueRadians", _wrap_Degree_valueRadians}, 
    {"valueAngleUnits", _wrap_Degree_valueAngleUnits}, 
    {0,0}
};
static swig_lua_attribute swig_Ogre_Degree_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Ogre_Degree_bases[] = {0};
static const char *swig_Ogre_Degree_base_names[] = {0};
static swig_lua_class _wrap_class_Ogre_Degree = { "Degree", &SWIGTYPE_p_Ogre__Degree,_wrap_new_Degree, swig_delete_Degree, swig_Ogre_Degree_methods, swig_Ogre_Degree_attributes, swig_Ogre_Degree_bases, swig_Ogre_Degree_base_names };

static int _wrap_new_Radian__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Real arg1 ;
  Ogre::Radian *result = 0 ;
  
  SWIG_check_num_args("Ogre::Radian::Radian",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ogre::Radian::Radian",1,"Ogre::Real");
  arg1 = (Ogre::Real)lua_tonumber(L, 1);
  result = (Ogre::Radian *)new Ogre::Radian(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Radian,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Radian__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Radian *result = 0 ;
  
  SWIG_check_num_args("Ogre::Radian::Radian",0,0)
  result = (Ogre::Radian *)new Ogre::Radian();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Radian,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Radian__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Degree *arg1 = 0 ;
  Ogre::Radian *result = 0 ;
  
  SWIG_check_num_args("Ogre::Radian::Radian",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ogre::Radian::Radian",1,"Ogre::Degree const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Degree,0))){
    SWIG_fail_ptr("new_Radian",1,SWIGTYPE_p_Ogre__Degree);
  }
  
  result = (Ogre::Radian *)new Ogre::Radian((Ogre::Degree const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Radian,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Radian(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Radian__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Degree, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Radian__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Radian__SWIG_0(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Radian'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::Radian::Radian(Ogre::Real)\n"
    "    Ogre::Radian::Radian()\n"
    "    Ogre::Radian::Radian(Ogre::Degree const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Radian_valueDegrees(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Radian *arg1 = (Ogre::Radian *) 0 ;
  Ogre::Real result;
  
  SWIG_check_num_args("Ogre::Radian::valueDegrees",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Radian::valueDegrees",1,"Ogre::Radian const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Radian,0))){
    SWIG_fail_ptr("Radian_valueDegrees",1,SWIGTYPE_p_Ogre__Radian);
  }
  
  result = (Ogre::Real)((Ogre::Radian const *)arg1)->valueDegrees();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Radian_valueRadians(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Radian *arg1 = (Ogre::Radian *) 0 ;
  Ogre::Real result;
  
  SWIG_check_num_args("Ogre::Radian::valueRadians",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Radian::valueRadians",1,"Ogre::Radian const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Radian,0))){
    SWIG_fail_ptr("Radian_valueRadians",1,SWIGTYPE_p_Ogre__Radian);
  }
  
  result = (Ogre::Real)((Ogre::Radian const *)arg1)->valueRadians();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Radian_valueAngleUnits(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Radian *arg1 = (Ogre::Radian *) 0 ;
  Ogre::Real result;
  
  SWIG_check_num_args("Ogre::Radian::valueAngleUnits",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Radian::valueAngleUnits",1,"Ogre::Radian const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Radian,0))){
    SWIG_fail_ptr("Radian_valueAngleUnits",1,SWIGTYPE_p_Ogre__Radian);
  }
  
  result = (Ogre::Real)((Ogre::Radian const *)arg1)->valueAngleUnits();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Radian(void *obj) {
Ogre::Radian *arg1 = (Ogre::Radian *) obj;
delete arg1;
}
static swig_lua_method swig_Ogre_Radian_methods[] = {
    {"valueDegrees", _wrap_Radian_valueDegrees}, 
    {"valueRadians", _wrap_Radian_valueRadians}, 
    {"valueAngleUnits", _wrap_Radian_valueAngleUnits}, 
    {0,0}
};
static swig_lua_attribute swig_Ogre_Radian_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Ogre_Radian_bases[] = {0};
static const char *swig_Ogre_Radian_base_names[] = {0};
static swig_lua_class _wrap_class_Ogre_Radian = { "Radian", &SWIGTYPE_p_Ogre__Radian,_wrap_new_Radian, swig_delete_Radian, swig_Ogre_Radian_methods, swig_Ogre_Radian_attributes, swig_Ogre_Radian_bases, swig_Ogre_Radian_base_names };

static int _wrap_new_Angle(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Real arg1 ;
  Ogre::Angle *result = 0 ;
  
  SWIG_check_num_args("Ogre::Angle::Angle",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ogre::Angle::Angle",1,"Ogre::Real");
  arg1 = (Ogre::Real)lua_tonumber(L, 1);
  result = (Ogre::Angle *)new Ogre::Angle(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Angle,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Angle(void *obj) {
Ogre::Angle *arg1 = (Ogre::Angle *) obj;
delete arg1;
}
static swig_lua_method swig_Ogre_Angle_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_Ogre_Angle_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Ogre_Angle_bases[] = {0};
static const char *swig_Ogre_Angle_base_names[] = {0};
static swig_lua_class _wrap_class_Ogre_Angle = { "Angle", &SWIGTYPE_p_Ogre__Angle,_wrap_new_Angle, swig_delete_Angle, swig_Ogre_Angle_methods, swig_Ogre_Angle_attributes, swig_Ogre_Angle_bases, swig_Ogre_Angle_base_names };

static int _wrap_new_Quaternion__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Ogre::Quaternion::Quaternion",0,0)
  result = (Ogre::Quaternion *)new Ogre::Quaternion();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Real arg1 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::Real arg4 ;
  Ogre::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Ogre::Quaternion::Quaternion",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ogre::Quaternion::Quaternion",1,"Ogre::Real");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::Quaternion::Quaternion",2,"Ogre::Real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ogre::Quaternion::Quaternion",3,"Ogre::Real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Ogre::Quaternion::Quaternion",4,"Ogre::Real");
  arg1 = (Ogre::Real)lua_tonumber(L, 1);
  arg2 = (Ogre::Real)lua_tonumber(L, 2);
  arg3 = (Ogre::Real)lua_tonumber(L, 3);
  arg4 = (Ogre::Real)lua_tonumber(L, 4);
  result = (Ogre::Quaternion *)new Ogre::Quaternion(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Radian *arg1 = 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Ogre::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Ogre::Quaternion::Quaternion",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ogre::Quaternion::Quaternion",1,"Ogre::Radian const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::Quaternion::Quaternion",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Radian,0))){
    SWIG_fail_ptr("new_Quaternion",1,SWIGTYPE_p_Ogre__Radian);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("new_Quaternion",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  result = (Ogre::Quaternion *)new Ogre::Quaternion((Ogre::Radian const &)*arg1,(Ogre::Vector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector3 *arg1 = 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Ogre::Vector3 *arg3 = 0 ;
  Ogre::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Ogre::Quaternion::Quaternion",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ogre::Quaternion::Quaternion",1,"Ogre::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::Quaternion::Quaternion",2,"Ogre::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Ogre::Quaternion::Quaternion",3,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("new_Quaternion",1,SWIGTYPE_p_Ogre__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("new_Quaternion",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("new_Quaternion",3,SWIGTYPE_p_Ogre__Vector3);
  }
  
  result = (Ogre::Quaternion *)new Ogre::Quaternion((Ogre::Vector3 const &)*arg1,(Ogre::Vector3 const &)*arg2,(Ogre::Vector3 const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector3 *arg1 = (Ogre::Vector3 *) 0 ;
  Ogre::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Ogre::Quaternion::Quaternion",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Quaternion::Quaternion",1,"Ogre::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("new_Quaternion",1,SWIGTYPE_p_Ogre__Vector3);
  }
  
  result = (Ogre::Quaternion *)new Ogre::Quaternion((Ogre::Vector3 const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Quaternion__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Quaternion__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Radian, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Quaternion__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_Quaternion__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Quaternion__SWIG_1(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Quaternion'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::Quaternion::Quaternion()\n"
    "    Ogre::Quaternion::Quaternion(Ogre::Real,Ogre::Real,Ogre::Real,Ogre::Real)\n"
    "    Ogre::Quaternion::Quaternion(Ogre::Radian const &,Ogre::Vector3 const &)\n"
    "    Ogre::Quaternion::Quaternion(Ogre::Vector3 const &,Ogre::Vector3 const &,Ogre::Vector3 const &)\n"
    "    Ogre::Quaternion::Quaternion(Ogre::Vector3 const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_Quaternion(void *obj) {
Ogre::Quaternion *arg1 = (Ogre::Quaternion *) obj;
delete arg1;
}
static swig_lua_method swig_Ogre_Quaternion_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_Ogre_Quaternion_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Ogre_Quaternion_bases[] = {0};
static const char *swig_Ogre_Quaternion_base_names[] = {0};
static swig_lua_class _wrap_class_Ogre_Quaternion = { "Quaternion", &SWIGTYPE_p_Ogre__Quaternion,_wrap_new_Quaternion, swig_delete_Quaternion, swig_Ogre_Quaternion_methods, swig_Ogre_Quaternion_attributes, swig_Ogre_Quaternion_bases, swig_Ogre_Quaternion_base_names };

static int _wrap_new_ColourValue__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Ogre::ColourValue *result = 0 ;
  
  SWIG_check_num_args("Ogre::ColourValue::ColourValue",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ogre::ColourValue::ColourValue",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::ColourValue::ColourValue",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ogre::ColourValue::ColourValue",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Ogre::ColourValue::ColourValue",4,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (Ogre::ColourValue *)new Ogre::ColourValue(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__ColourValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ColourValue__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  Ogre::ColourValue *result = 0 ;
  
  SWIG_check_num_args("Ogre::ColourValue::ColourValue",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ogre::ColourValue::ColourValue",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::ColourValue::ColourValue",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ogre::ColourValue::ColourValue",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (Ogre::ColourValue *)new Ogre::ColourValue(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__ColourValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ColourValue__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  Ogre::ColourValue *result = 0 ;
  
  SWIG_check_num_args("Ogre::ColourValue::ColourValue",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ogre::ColourValue::ColourValue",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::ColourValue::ColourValue",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (Ogre::ColourValue *)new Ogre::ColourValue(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__ColourValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ColourValue__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  Ogre::ColourValue *result = 0 ;
  
  SWIG_check_num_args("Ogre::ColourValue::ColourValue",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ogre::ColourValue::ColourValue",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (Ogre::ColourValue *)new Ogre::ColourValue(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__ColourValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ColourValue__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::ColourValue *result = 0 ;
  
  SWIG_check_num_args("Ogre::ColourValue::ColourValue",0,0)
  result = (Ogre::ColourValue *)new Ogre::ColourValue();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__ColourValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ColourValue(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ColourValue__SWIG_4(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ColourValue__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ColourValue__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_ColourValue__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ColourValue__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_ColourValue'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::ColourValue::ColourValue(float,float,float,float)\n"
    "    Ogre::ColourValue::ColourValue(float,float,float)\n"
    "    Ogre::ColourValue::ColourValue(float,float)\n"
    "    Ogre::ColourValue::ColourValue(float)\n"
    "    Ogre::ColourValue::ColourValue()\n");
  lua_error(L);return 0;
}


static void swig_delete_ColourValue(void *obj) {
Ogre::ColourValue *arg1 = (Ogre::ColourValue *) obj;
delete arg1;
}
static swig_lua_method swig_Ogre_ColourValue_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_Ogre_ColourValue_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Ogre_ColourValue_bases[] = {0};
static const char *swig_Ogre_ColourValue_base_names[] = {0};
static swig_lua_class _wrap_class_Ogre_ColourValue = { "ColourValue", &SWIGTYPE_p_Ogre__ColourValue,_wrap_new_ColourValue, swig_delete_ColourValue, swig_Ogre_ColourValue_methods, swig_Ogre_ColourValue_attributes, swig_Ogre_ColourValue_bases, swig_Ogre_ColourValue_base_names };

static int _wrap_new_Plane__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector3 *arg1 = 0 ;
  Ogre::Real arg2 ;
  Ogre::Plane *result = 0 ;
  
  SWIG_check_num_args("Ogre::Plane::Plane",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ogre::Plane::Plane",1,"Ogre::Vector3 const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::Plane::Plane",2,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("new_Plane",1,SWIGTYPE_p_Ogre__Vector3);
  }
  
  arg2 = (Ogre::Real)lua_tonumber(L, 2);
  result = (Ogre::Plane *)new Ogre::Plane((Ogre::Vector3 const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Plane,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Plane__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Real arg1 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::Real arg4 ;
  Ogre::Plane *result = 0 ;
  
  SWIG_check_num_args("Ogre::Plane::Plane",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ogre::Plane::Plane",1,"Ogre::Real");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::Plane::Plane",2,"Ogre::Real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ogre::Plane::Plane",3,"Ogre::Real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Ogre::Plane::Plane",4,"Ogre::Real");
  arg1 = (Ogre::Real)lua_tonumber(L, 1);
  arg2 = (Ogre::Real)lua_tonumber(L, 2);
  arg3 = (Ogre::Real)lua_tonumber(L, 3);
  arg4 = (Ogre::Real)lua_tonumber(L, 4);
  result = (Ogre::Plane *)new Ogre::Plane(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Plane,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Plane(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Plane__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Plane__SWIG_1(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Plane'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::Plane::Plane(Ogre::Vector3 const &,Ogre::Real)\n"
    "    Ogre::Plane::Plane(Ogre::Real,Ogre::Real,Ogre::Real,Ogre::Real)\n");
  lua_error(L);return 0;
}


static void swig_delete_Plane(void *obj) {
Ogre::Plane *arg1 = (Ogre::Plane *) obj;
delete arg1;
}
static swig_lua_method swig_Ogre_Plane_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_Ogre_Plane_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Ogre_Plane_bases[] = {0};
static const char *swig_Ogre_Plane_base_names[] = {0};
static swig_lua_class _wrap_class_Ogre_Plane = { "Plane", &SWIGTYPE_p_Ogre__Plane,_wrap_new_Plane, swig_delete_Plane, swig_Ogre_Plane_methods, swig_Ogre_Plane_attributes, swig_Ogre_Plane_bases, swig_Ogre_Plane_base_names };

static int _wrap_new_AxisAlignedBox(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::AxisAlignedBox *result = 0 ;
  
  SWIG_check_num_args("Ogre::AxisAlignedBox::AxisAlignedBox",0,0)
  result = (Ogre::AxisAlignedBox *)new Ogre::AxisAlignedBox();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__AxisAlignedBox,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_getSize(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::AxisAlignedBox *arg1 = (Ogre::AxisAlignedBox *) 0 ;
  SwigValueWrapper< Ogre::Vector3 > result;
  
  SWIG_check_num_args("Ogre::AxisAlignedBox::getSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::AxisAlignedBox::getSize",1,"Ogre::AxisAlignedBox const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_getSize",1,SWIGTYPE_p_Ogre__AxisAlignedBox);
  }
  
  result = ((Ogre::AxisAlignedBox const *)arg1)->getSize();
  {
    Ogre::Vector3 * resultptr = new Ogre::Vector3((const Ogre::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_getMaximum(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::AxisAlignedBox *arg1 = (Ogre::AxisAlignedBox *) 0 ;
  Ogre::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Ogre::AxisAlignedBox::getMaximum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::AxisAlignedBox::getMaximum",1,"Ogre::AxisAlignedBox const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_getMaximum",1,SWIGTYPE_p_Ogre__AxisAlignedBox);
  }
  
  result = (Ogre::Vector3 *) &((Ogre::AxisAlignedBox const *)arg1)->getMaximum();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_getMinimum(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::AxisAlignedBox *arg1 = (Ogre::AxisAlignedBox *) 0 ;
  Ogre::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Ogre::AxisAlignedBox::getMinimum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::AxisAlignedBox::getMinimum",1,"Ogre::AxisAlignedBox const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_getMinimum",1,SWIGTYPE_p_Ogre__AxisAlignedBox);
  }
  
  result = (Ogre::Vector3 *) &((Ogre::AxisAlignedBox const *)arg1)->getMinimum();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_getCenter(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::AxisAlignedBox *arg1 = (Ogre::AxisAlignedBox *) 0 ;
  SwigValueWrapper< Ogre::Vector3 > result;
  
  SWIG_check_num_args("Ogre::AxisAlignedBox::getCenter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::AxisAlignedBox::getCenter",1,"Ogre::AxisAlignedBox const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_getCenter",1,SWIGTYPE_p_Ogre__AxisAlignedBox);
  }
  
  result = ((Ogre::AxisAlignedBox const *)arg1)->getCenter();
  {
    Ogre::Vector3 * resultptr = new Ogre::Vector3((const Ogre::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AxisAlignedBox(void *obj) {
Ogre::AxisAlignedBox *arg1 = (Ogre::AxisAlignedBox *) obj;
delete arg1;
}
static swig_lua_method swig_Ogre_AxisAlignedBox_methods[] = {
    {"getSize", _wrap_AxisAlignedBox_getSize}, 
    {"getMaximum", _wrap_AxisAlignedBox_getMaximum}, 
    {"getMinimum", _wrap_AxisAlignedBox_getMinimum}, 
    {"getCenter", _wrap_AxisAlignedBox_getCenter}, 
    {0,0}
};
static swig_lua_attribute swig_Ogre_AxisAlignedBox_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Ogre_AxisAlignedBox_bases[] = {0};
static const char *swig_Ogre_AxisAlignedBox_base_names[] = {0};
static swig_lua_class _wrap_class_Ogre_AxisAlignedBox = { "AxisAlignedBox", &SWIGTYPE_p_Ogre__AxisAlignedBox,_wrap_new_AxisAlignedBox, swig_delete_AxisAlignedBox, swig_Ogre_AxisAlignedBox_methods, swig_Ogre_AxisAlignedBox_attributes, swig_Ogre_AxisAlignedBox_bases, swig_Ogre_AxisAlignedBox_base_names };

static int _wrap_MovableObject_setRenderQueueGroup(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::MovableObject *arg1 = (Ogre::MovableObject *) 0 ;
  Ogre::uint8 arg2 ;
  
  SWIG_check_num_args("Ogre::MovableObject::setRenderQueueGroup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::MovableObject::setRenderQueueGroup",1,"Ogre::MovableObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::MovableObject::setRenderQueueGroup",2,"Ogre::uint8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__MovableObject,0))){
    SWIG_fail_ptr("MovableObject_setRenderQueueGroup",1,SWIGTYPE_p_Ogre__MovableObject);
  }
  
  arg2 = (Ogre::uint8)lua_tonumber(L, 2);
  (arg1)->setRenderQueueGroup(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MovableObject_setRenderQueueGroupAndPriority(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::MovableObject *arg1 = (Ogre::MovableObject *) 0 ;
  Ogre::uint8 arg2 ;
  Ogre::ushort arg3 ;
  
  SWIG_check_num_args("Ogre::MovableObject::setRenderQueueGroupAndPriority",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::MovableObject::setRenderQueueGroupAndPriority",1,"Ogre::MovableObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::MovableObject::setRenderQueueGroupAndPriority",2,"Ogre::uint8");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ogre::MovableObject::setRenderQueueGroupAndPriority",3,"Ogre::ushort");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__MovableObject,0))){
    SWIG_fail_ptr("MovableObject_setRenderQueueGroupAndPriority",1,SWIGTYPE_p_Ogre__MovableObject);
  }
  
  arg2 = (Ogre::uint8)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Ogre::ushort)lua_tonumber(L, 3);
  (arg1)->setRenderQueueGroupAndPriority(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MovableObject_getBoundingBox(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::MovableObject *arg1 = (Ogre::MovableObject *) 0 ;
  Ogre::AxisAlignedBox *result = 0 ;
  
  SWIG_check_num_args("Ogre::MovableObject::getBoundingBox",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::MovableObject::getBoundingBox",1,"Ogre::MovableObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__MovableObject,0))){
    SWIG_fail_ptr("MovableObject_getBoundingBox",1,SWIGTYPE_p_Ogre__MovableObject);
  }
  
  result = (Ogre::AxisAlignedBox *) &((Ogre::MovableObject const *)arg1)->getBoundingBox();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__AxisAlignedBox,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MovableObject_getWorldBoundingBox__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::MovableObject *arg1 = (Ogre::MovableObject *) 0 ;
  bool arg2 ;
  Ogre::AxisAlignedBox result;
  
  SWIG_check_num_args("Ogre::MovableObject::getWorldBoundingBox",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::MovableObject::getWorldBoundingBox",1,"Ogre::MovableObject const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::MovableObject::getWorldBoundingBox",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__MovableObject,0))){
    SWIG_fail_ptr("MovableObject_getWorldBoundingBox",1,SWIGTYPE_p_Ogre__MovableObject);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((Ogre::MovableObject const *)arg1)->getWorldBoundingBox(arg2);
  {
    Ogre::AxisAlignedBox * resultptr = new Ogre::AxisAlignedBox((const Ogre::AxisAlignedBox &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__AxisAlignedBox,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MovableObject_getWorldBoundingBox__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::MovableObject *arg1 = (Ogre::MovableObject *) 0 ;
  Ogre::AxisAlignedBox result;
  
  SWIG_check_num_args("Ogre::MovableObject::getWorldBoundingBox",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::MovableObject::getWorldBoundingBox",1,"Ogre::MovableObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__MovableObject,0))){
    SWIG_fail_ptr("MovableObject_getWorldBoundingBox",1,SWIGTYPE_p_Ogre__MovableObject);
  }
  
  result = ((Ogre::MovableObject const *)arg1)->getWorldBoundingBox();
  {
    Ogre::AxisAlignedBox * resultptr = new Ogre::AxisAlignedBox((const Ogre::AxisAlignedBox &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__AxisAlignedBox,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MovableObject_getWorldBoundingBox(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__MovableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_MovableObject_getWorldBoundingBox__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__MovableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_MovableObject_getWorldBoundingBox__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'MovableObject_getWorldBoundingBox'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::MovableObject::getWorldBoundingBox(bool) const\n"
    "    Ogre::MovableObject::getWorldBoundingBox() const\n");
  lua_error(L);return 0;
}


static int _wrap_MovableObject_getMovableType(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::MovableObject *arg1 = (Ogre::MovableObject *) 0 ;
  Ogre::String *result = 0 ;
  
  SWIG_check_num_args("Ogre::MovableObject::getMovableType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::MovableObject::getMovableType",1,"Ogre::MovableObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__MovableObject,0))){
    SWIG_fail_ptr("MovableObject_getMovableType",1,SWIGTYPE_p_Ogre__MovableObject);
  }
  
  result = (Ogre::String *) &((Ogre::MovableObject const *)arg1)->getMovableType();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MovableObject_setQueryFlags(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::MovableObject *arg1 = (Ogre::MovableObject *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Ogre::MovableObject::setQueryFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::MovableObject::setQueryFlags",1,"Ogre::MovableObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::MovableObject::setQueryFlags",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__MovableObject,0))){
    SWIG_fail_ptr("MovableObject_setQueryFlags",1,SWIGTYPE_p_Ogre__MovableObject);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setQueryFlags(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MovableObject_setVisibilityFlags(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::MovableObject *arg1 = (Ogre::MovableObject *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Ogre::MovableObject::setVisibilityFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::MovableObject::setVisibilityFlags",1,"Ogre::MovableObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::MovableObject::setVisibilityFlags",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__MovableObject,0))){
    SWIG_fail_ptr("MovableObject_setVisibilityFlags",1,SWIGTYPE_p_Ogre__MovableObject);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setVisibilityFlags(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MovableObject_setUserAny(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::MovableObject *arg1 = (Ogre::MovableObject *) 0 ;
  Ogre::Any *arg2 = 0 ;
  
  SWIG_check_num_args("Ogre::MovableObject::setUserAny",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::MovableObject::setUserAny",1,"Ogre::MovableObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::MovableObject::setUserAny",2,"Ogre::Any const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__MovableObject,0))){
    SWIG_fail_ptr("MovableObject_setUserAny",1,SWIGTYPE_p_Ogre__MovableObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Any,0))){
    SWIG_fail_ptr("MovableObject_setUserAny",2,SWIGTYPE_p_Ogre__Any);
  }
  
  (arg1)->setUserAny((Ogre::Any const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MovableObject_getUserAny(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::MovableObject *arg1 = (Ogre::MovableObject *) 0 ;
  Ogre::Any *result = 0 ;
  
  SWIG_check_num_args("Ogre::MovableObject::getUserAny",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::MovableObject::getUserAny",1,"Ogre::MovableObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__MovableObject,0))){
    SWIG_fail_ptr("MovableObject_getUserAny",1,SWIGTYPE_p_Ogre__MovableObject);
  }
  
  result = (Ogre::Any *) &((Ogre::MovableObject const *)arg1)->getUserAny();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Any,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MovableObject_setCastShadows(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::MovableObject *arg1 = (Ogre::MovableObject *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Ogre::MovableObject::setCastShadows",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::MovableObject::setCastShadows",1,"Ogre::MovableObject *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::MovableObject::setCastShadows",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__MovableObject,0))){
    SWIG_fail_ptr("MovableObject_setCastShadows",1,SWIGTYPE_p_Ogre__MovableObject);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setCastShadows(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MovableObject_getCastShadows(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::MovableObject *arg1 = (Ogre::MovableObject *) 0 ;
  bool result;
  
  SWIG_check_num_args("Ogre::MovableObject::getCastShadows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::MovableObject::getCastShadows",1,"Ogre::MovableObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__MovableObject,0))){
    SWIG_fail_ptr("MovableObject_getCastShadows",1,SWIGTYPE_p_Ogre__MovableObject);
  }
  
  result = (bool)(arg1)->getCastShadows();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MovableObject(void *obj) {
Ogre::MovableObject *arg1 = (Ogre::MovableObject *) obj;
delete arg1;
}
static swig_lua_method swig_Ogre_MovableObject_methods[] = {
    {"setRenderQueueGroup", _wrap_MovableObject_setRenderQueueGroup}, 
    {"setRenderQueueGroupAndPriority", _wrap_MovableObject_setRenderQueueGroupAndPriority}, 
    {"getBoundingBox", _wrap_MovableObject_getBoundingBox}, 
    {"getWorldBoundingBox", _wrap_MovableObject_getWorldBoundingBox}, 
    {"getMovableType", _wrap_MovableObject_getMovableType}, 
    {"setQueryFlags", _wrap_MovableObject_setQueryFlags}, 
    {"setVisibilityFlags", _wrap_MovableObject_setVisibilityFlags}, 
    {"setUserAny", _wrap_MovableObject_setUserAny}, 
    {"getUserAny", _wrap_MovableObject_getUserAny}, 
    {"setCastShadows", _wrap_MovableObject_setCastShadows}, 
    {"getCastShadows", _wrap_MovableObject_getCastShadows}, 
    {0,0}
};
static swig_lua_attribute swig_Ogre_MovableObject_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Ogre_MovableObject_bases[] = {0};
static const char *swig_Ogre_MovableObject_base_names[] = {0};
static swig_lua_class _wrap_class_Ogre_MovableObject = { "MovableObject", &SWIGTYPE_p_Ogre__MovableObject,0, swig_delete_MovableObject, swig_Ogre_MovableObject_methods, swig_Ogre_MovableObject_attributes, swig_Ogre_MovableObject_bases, swig_Ogre_MovableObject_base_names };

static swig_lua_method swig_Ogre_SubEntity_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_Ogre_SubEntity_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Ogre_SubEntity_bases[] = {0};
static const char *swig_Ogre_SubEntity_base_names[] = {0};
static swig_lua_class _wrap_class_Ogre_SubEntity = { "SubEntity", &SWIGTYPE_p_Ogre__SubEntity,0,0, swig_Ogre_SubEntity_methods, swig_Ogre_SubEntity_attributes, swig_Ogre_SubEntity_bases, swig_Ogre_SubEntity_base_names };

static int _wrap_Node_getName(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Node *arg1 = (Ogre::Node *) 0 ;
  Ogre::String *result = 0 ;
  
  SWIG_check_num_args("Ogre::Node::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Node::getName",1,"Ogre::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Node,0))){
    SWIG_fail_ptr("Node_getName",1,SWIGTYPE_p_Ogre__Node);
  }
  
  result = (Ogre::String *) &((Ogre::Node const *)arg1)->getName();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_getParent(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Node *arg1 = (Ogre::Node *) 0 ;
  Ogre::Node *result = 0 ;
  
  SWIG_check_num_args("Ogre::Node::getParent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Node::getParent",1,"Ogre::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Node,0))){
    SWIG_fail_ptr("Node_getParent",1,SWIGTYPE_p_Ogre__Node);
  }
  
  result = (Ogre::Node *)((Ogre::Node const *)arg1)->getParent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_setPosition(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Node *arg1 = (Ogre::Node *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Ogre::Node::setPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Node::setPosition",1,"Ogre::Node *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::Node::setPosition",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Node,0))){
    SWIG_fail_ptr("Node_setPosition",1,SWIGTYPE_p_Ogre__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Node_setPosition",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  (arg1)->setPosition((Ogre::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_getPosition(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Node *arg1 = (Ogre::Node *) 0 ;
  Ogre::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Ogre::Node::getPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Node::getPosition",1,"Ogre::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Node,0))){
    SWIG_fail_ptr("Node_getPosition",1,SWIGTYPE_p_Ogre__Node);
  }
  
  result = (Ogre::Vector3 *) &((Ogre::Node const *)arg1)->getPosition();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_setScale__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Node *arg1 = (Ogre::Node *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Ogre::Node::setScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Node::setScale",1,"Ogre::Node *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::Node::setScale",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Node,0))){
    SWIG_fail_ptr("Node_setScale",1,SWIGTYPE_p_Ogre__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Node_setScale",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  (arg1)->setScale((Ogre::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_setScale__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Node *arg1 = (Ogre::Node *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::Real arg4 ;
  
  SWIG_check_num_args("Ogre::Node::setScale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Node::setScale",1,"Ogre::Node *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::Node::setScale",2,"Ogre::Real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ogre::Node::setScale",3,"Ogre::Real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Ogre::Node::setScale",4,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Node,0))){
    SWIG_fail_ptr("Node_setScale",1,SWIGTYPE_p_Ogre__Node);
  }
  
  arg2 = (Ogre::Real)lua_tonumber(L, 2);
  arg3 = (Ogre::Real)lua_tonumber(L, 3);
  arg4 = (Ogre::Real)lua_tonumber(L, 4);
  (arg1)->setScale(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_setScale(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Node_setScale__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Node_setScale__SWIG_1(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Node_setScale'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::Node::setScale(Ogre::Vector3 const &)\n"
    "    Ogre::Node::setScale(Ogre::Real,Ogre::Real,Ogre::Real)\n");
  lua_error(L);return 0;
}


static int _wrap_Node_getScale(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Node *arg1 = (Ogre::Node *) 0 ;
  Ogre::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Ogre::Node::getScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Node::getScale",1,"Ogre::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Node,0))){
    SWIG_fail_ptr("Node_getScale",1,SWIGTYPE_p_Ogre__Node);
  }
  
  result = (Ogre::Vector3 *) &((Ogre::Node const *)arg1)->getScale();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_createChild__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Node *arg1 = (Ogre::Node *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Ogre::Quaternion *arg3 = 0 ;
  Ogre::Node *result = 0 ;
  
  SWIG_check_num_args("Ogre::Node::createChild",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Node::createChild",1,"Ogre::Node *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::Node::createChild",2,"Ogre::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Ogre::Node::createChild",3,"Ogre::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Node,0))){
    SWIG_fail_ptr("Node_createChild",1,SWIGTYPE_p_Ogre__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Node_createChild",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Ogre__Quaternion,0))){
    SWIG_fail_ptr("Node_createChild",3,SWIGTYPE_p_Ogre__Quaternion);
  }
  
  result = (Ogre::Node *)(arg1)->createChild((Ogre::Vector3 const &)*arg2,(Ogre::Quaternion const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_createChild__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Node *arg1 = (Ogre::Node *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Ogre::Node *result = 0 ;
  
  SWIG_check_num_args("Ogre::Node::createChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Node::createChild",1,"Ogre::Node *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::Node::createChild",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Node,0))){
    SWIG_fail_ptr("Node_createChild",1,SWIGTYPE_p_Ogre__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Node_createChild",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  result = (Ogre::Node *)(arg1)->createChild((Ogre::Vector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_createChild__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Node *arg1 = (Ogre::Node *) 0 ;
  Ogre::Node *result = 0 ;
  
  SWIG_check_num_args("Ogre::Node::createChild",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Node::createChild",1,"Ogre::Node *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Node,0))){
    SWIG_fail_ptr("Node_createChild",1,SWIGTYPE_p_Ogre__Node);
  }
  
  result = (Ogre::Node *)(arg1)->createChild();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_createChild__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Node *arg1 = (Ogre::Node *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::Vector3 *arg3 = 0 ;
  Ogre::Quaternion *arg4 = 0 ;
  std::string temp2 ;
  Ogre::Node *result = 0 ;
  
  SWIG_check_num_args("Ogre::Node::createChild",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Node::createChild",1,"Ogre::Node *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::Node::createChild",2,"Ogre::String const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Ogre::Node::createChild",3,"Ogre::Vector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Ogre::Node::createChild",4,"Ogre::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Node,0))){
    SWIG_fail_ptr("Node_createChild",1,SWIGTYPE_p_Ogre__Node);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Node_createChild",3,SWIGTYPE_p_Ogre__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Ogre__Quaternion,0))){
    SWIG_fail_ptr("Node_createChild",4,SWIGTYPE_p_Ogre__Quaternion);
  }
  
  result = (Ogre::Node *)(arg1)->createChild((Ogre::String const &)*arg2,(Ogre::Vector3 const &)*arg3,(Ogre::Quaternion const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_createChild__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Node *arg1 = (Ogre::Node *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::Vector3 *arg3 = 0 ;
  std::string temp2 ;
  Ogre::Node *result = 0 ;
  
  SWIG_check_num_args("Ogre::Node::createChild",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Node::createChild",1,"Ogre::Node *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::Node::createChild",2,"Ogre::String const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Ogre::Node::createChild",3,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Node,0))){
    SWIG_fail_ptr("Node_createChild",1,SWIGTYPE_p_Ogre__Node);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Node_createChild",3,SWIGTYPE_p_Ogre__Vector3);
  }
  
  result = (Ogre::Node *)(arg1)->createChild((Ogre::String const &)*arg2,(Ogre::Vector3 const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_createChild__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Node *arg1 = (Ogre::Node *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  Ogre::Node *result = 0 ;
  
  SWIG_check_num_args("Ogre::Node::createChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Node::createChild",1,"Ogre::Node *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::Node::createChild",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Node,0))){
    SWIG_fail_ptr("Node_createChild",1,SWIGTYPE_p_Ogre__Node);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (Ogre::Node *)(arg1)->createChild((Ogre::String const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_createChild(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Node_createChild__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Node_createChild__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_createChild__SWIG_5(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Ogre__Quaternion, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Node_createChild__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Node_createChild__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Ogre__Quaternion, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Node_createChild__SWIG_3(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Node_createChild'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::Node::createChild(Ogre::Vector3 const &,Ogre::Quaternion const &)\n"
    "    Ogre::Node::createChild(Ogre::Vector3 const &)\n"
    "    Ogre::Node::createChild()\n"
    "    Ogre::Node::createChild(Ogre::String const &,Ogre::Vector3 const &,Ogre::Quaternion const &)\n"
    "    Ogre::Node::createChild(Ogre::String const &,Ogre::Vector3 const &)\n"
    "    Ogre::Node::createChild(Ogre::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Node_addChild(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Node *arg1 = (Ogre::Node *) 0 ;
  Ogre::Node *arg2 = (Ogre::Node *) 0 ;
  
  SWIG_check_num_args("Ogre::Node::addChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Node::addChild",1,"Ogre::Node *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Ogre::Node::addChild",2,"Ogre::Node *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Node,0))){
    SWIG_fail_ptr("Node_addChild",1,SWIGTYPE_p_Ogre__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Node,0))){
    SWIG_fail_ptr("Node_addChild",2,SWIGTYPE_p_Ogre__Node);
  }
  
  (arg1)->addChild(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_getChild__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Node *arg1 = (Ogre::Node *) 0 ;
  int arg2 ;
  Ogre::Node *result = 0 ;
  
  SWIG_check_num_args("Ogre::Node::getChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Node::getChild",1,"Ogre::Node const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::Node::getChild",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Node,0))){
    SWIG_fail_ptr("Node_getChild",1,SWIGTYPE_p_Ogre__Node);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (Ogre::Node *)((Ogre::Node const *)arg1)->getChild(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_numChildren(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Node *arg1 = (Ogre::Node *) 0 ;
  int result;
  
  SWIG_check_num_args("Ogre::Node::numChildren",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Node::numChildren",1,"Ogre::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Node,0))){
    SWIG_fail_ptr("Node_numChildren",1,SWIGTYPE_p_Ogre__Node);
  }
  
  result = (int)((Ogre::Node const *)arg1)->numChildren();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_getChild__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Node *arg1 = (Ogre::Node *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  Ogre::Node *result = 0 ;
  
  SWIG_check_num_args("Ogre::Node::getChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Node::getChild",1,"Ogre::Node const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::Node::getChild",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Node,0))){
    SWIG_fail_ptr("Node_getChild",1,SWIGTYPE_p_Ogre__Node);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (Ogre::Node *)((Ogre::Node const *)arg1)->getChild((Ogre::String const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_getChild(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_getChild__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_getChild__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Node_getChild'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::Node::getChild(int) const\n"
    "    Ogre::Node::getChild(Ogre::String const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Node_removeChild__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Node *arg1 = (Ogre::Node *) 0 ;
  unsigned short arg2 ;
  Ogre::Node *result = 0 ;
  
  SWIG_check_num_args("Ogre::Node::removeChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Node::removeChild",1,"Ogre::Node *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::Node::removeChild",2,"unsigned short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Node,0))){
    SWIG_fail_ptr("Node_removeChild",1,SWIGTYPE_p_Ogre__Node);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned short)lua_tonumber(L, 2);
  result = (Ogre::Node *)(arg1)->removeChild(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_removeChild__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Node *arg1 = (Ogre::Node *) 0 ;
  Ogre::Node *arg2 = (Ogre::Node *) 0 ;
  Ogre::Node *result = 0 ;
  
  SWIG_check_num_args("Ogre::Node::removeChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Node::removeChild",1,"Ogre::Node *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Ogre::Node::removeChild",2,"Ogre::Node *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Node,0))){
    SWIG_fail_ptr("Node_removeChild",1,SWIGTYPE_p_Ogre__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Node,0))){
    SWIG_fail_ptr("Node_removeChild",2,SWIGTYPE_p_Ogre__Node);
  }
  
  result = (Ogre::Node *)(arg1)->removeChild(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_removeChild__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Node *arg1 = (Ogre::Node *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  Ogre::Node *result = 0 ;
  
  SWIG_check_num_args("Ogre::Node::removeChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Node::removeChild",1,"Ogre::Node *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::Node::removeChild",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Node,0))){
    SWIG_fail_ptr("Node_removeChild",1,SWIGTYPE_p_Ogre__Node);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (Ogre::Node *)(arg1)->removeChild((Ogre::String const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_removeChild(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Node_removeChild__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_removeChild__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_removeChild__SWIG_2(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Node_removeChild'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::Node::removeChild(unsigned short)\n"
    "    Ogre::Node::removeChild(Ogre::Node *)\n"
    "    Ogre::Node::removeChild(Ogre::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Node_removeAllChildren(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Node *arg1 = (Ogre::Node *) 0 ;
  
  SWIG_check_num_args("Ogre::Node::removeAllChildren",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Node::removeAllChildren",1,"Ogre::Node *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Node,0))){
    SWIG_fail_ptr("Node_removeAllChildren",1,SWIGTYPE_p_Ogre__Node);
  }
  
  (arg1)->removeAllChildren();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Node(void *obj) {
Ogre::Node *arg1 = (Ogre::Node *) obj;
delete arg1;
}
static swig_lua_method swig_Ogre_Node_methods[] = {
    {"getName", _wrap_Node_getName}, 
    {"getParent", _wrap_Node_getParent}, 
    {"setPosition", _wrap_Node_setPosition}, 
    {"getPosition", _wrap_Node_getPosition}, 
    {"setScale", _wrap_Node_setScale}, 
    {"getScale", _wrap_Node_getScale}, 
    {"createChild", _wrap_Node_createChild}, 
    {"addChild", _wrap_Node_addChild}, 
    {"numChildren", _wrap_Node_numChildren}, 
    {"getChild", _wrap_Node_getChild}, 
    {"removeChild", _wrap_Node_removeChild}, 
    {"removeAllChildren", _wrap_Node_removeAllChildren}, 
    {0,0}
};
static swig_lua_attribute swig_Ogre_Node_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Ogre_Node_bases[] = {0};
static const char *swig_Ogre_Node_base_names[] = {0};
static swig_lua_class _wrap_class_Ogre_Node = { "Node", &SWIGTYPE_p_Ogre__Node,0, swig_delete_Node, swig_Ogre_Node_methods, swig_Ogre_Node_attributes, swig_Ogre_Node_bases, swig_Ogre_Node_base_names };

static int _wrap_Entity_getSubEntity__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Entity *arg1 = (Ogre::Entity *) 0 ;
  unsigned int arg2 ;
  Ogre::SubEntity *result = 0 ;
  
  SWIG_check_num_args("Ogre::Entity::getSubEntity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Entity::getSubEntity",1,"Ogre::Entity const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::Entity::getSubEntity",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Entity,0))){
    SWIG_fail_ptr("Entity_getSubEntity",1,SWIGTYPE_p_Ogre__Entity);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Ogre::SubEntity *)((Ogre::Entity const *)arg1)->getSubEntity(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__SubEntity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_getSubEntity__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Entity *arg1 = (Ogre::Entity *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  Ogre::SubEntity *result = 0 ;
  
  SWIG_check_num_args("Ogre::Entity::getSubEntity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Entity::getSubEntity",1,"Ogre::Entity const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::Entity::getSubEntity",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Entity,0))){
    SWIG_fail_ptr("Entity_getSubEntity",1,SWIGTYPE_p_Ogre__Entity);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (Ogre::SubEntity *)((Ogre::Entity const *)arg1)->getSubEntity((Ogre::String const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__SubEntity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_getSubEntity(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Entity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Entity_getSubEntity__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Entity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Entity_getSubEntity__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Entity_getSubEntity'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::Entity::getSubEntity(unsigned int) const\n"
    "    Ogre::Entity::getSubEntity(Ogre::String const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Entity_getNumSubEntities(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Entity *arg1 = (Ogre::Entity *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Ogre::Entity::getNumSubEntities",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Entity::getNumSubEntities",1,"Ogre::Entity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Entity,0))){
    SWIG_fail_ptr("Entity_getNumSubEntities",1,SWIGTYPE_p_Ogre__Entity);
  }
  
  result = (unsigned int)((Ogre::Entity const *)arg1)->getNumSubEntities();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_setDisplaySkeleton(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Entity *arg1 = (Ogre::Entity *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Ogre::Entity::setDisplaySkeleton",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Entity::setDisplaySkeleton",1,"Ogre::Entity *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::Entity::setDisplaySkeleton",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Entity,0))){
    SWIG_fail_ptr("Entity_setDisplaySkeleton",1,SWIGTYPE_p_Ogre__Entity);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setDisplaySkeleton(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_setMaterialName__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Entity *arg1 = (Ogre::Entity *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Ogre::Entity::setMaterialName",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Entity::setMaterialName",1,"Ogre::Entity *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::Entity::setMaterialName",2,"Ogre::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Ogre::Entity::setMaterialName",3,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Entity,0))){
    SWIG_fail_ptr("Entity_setMaterialName",1,SWIGTYPE_p_Ogre__Entity);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  (arg1)->setMaterialName((Ogre::String const &)*arg2,(Ogre::String const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_setMaterialName__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Entity *arg1 = (Ogre::Entity *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Ogre::Entity::setMaterialName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Entity::setMaterialName",1,"Ogre::Entity *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::Entity::setMaterialName",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Entity,0))){
    SWIG_fail_ptr("Entity_setMaterialName",1,SWIGTYPE_p_Ogre__Entity);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->setMaterialName((Ogre::String const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_setMaterialName(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Entity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Entity_setMaterialName__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Entity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Entity_setMaterialName__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Entity_setMaterialName'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::Entity::setMaterialName(Ogre::String const &,Ogre::String const &)\n"
    "    Ogre::Entity::setMaterialName(Ogre::String const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Entity(void *obj) {
Ogre::Entity *arg1 = (Ogre::Entity *) obj;
delete arg1;
}
static swig_lua_method swig_Ogre_Entity_methods[] = {
    {"getSubEntity", _wrap_Entity_getSubEntity}, 
    {"getNumSubEntities", _wrap_Entity_getNumSubEntities}, 
    {"setDisplaySkeleton", _wrap_Entity_setDisplaySkeleton}, 
    {"setMaterialName", _wrap_Entity_setMaterialName}, 
    {0,0}
};
static swig_lua_attribute swig_Ogre_Entity_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Ogre_Entity_bases[] = {0,0};
static const char *swig_Ogre_Entity_base_names[] = {"Ogre::MovableObject *",0};
static swig_lua_class _wrap_class_Ogre_Entity = { "Entity", &SWIGTYPE_p_Ogre__Entity,0, swig_delete_Entity, swig_Ogre_Entity_methods, swig_Ogre_Entity_attributes, swig_Ogre_Entity_bases, swig_Ogre_Entity_base_names };

static int _wrap_SceneNode_yaw(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  Ogre::Degree *arg2 = 0 ;
  
  SWIG_check_num_args("Ogre::SceneNode::yaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::yaw",1,"Ogre::SceneNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::SceneNode::yaw",2,"Ogre::Degree const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_yaw",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Degree,0))){
    SWIG_fail_ptr("SceneNode_yaw",2,SWIGTYPE_p_Ogre__Degree);
  }
  
  (arg1)->yaw((Ogre::Degree const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_pitch(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  Ogre::Degree *arg2 = 0 ;
  
  SWIG_check_num_args("Ogre::SceneNode::pitch",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::pitch",1,"Ogre::SceneNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::SceneNode::pitch",2,"Ogre::Degree const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_pitch",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Degree,0))){
    SWIG_fail_ptr("SceneNode_pitch",2,SWIGTYPE_p_Ogre__Degree);
  }
  
  (arg1)->pitch((Ogre::Degree const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_roll(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  Ogre::Degree *arg2 = 0 ;
  
  SWIG_check_num_args("Ogre::SceneNode::roll",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::roll",1,"Ogre::SceneNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::SceneNode::roll",2,"Ogre::Degree const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_roll",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Degree,0))){
    SWIG_fail_ptr("SceneNode_roll",2,SWIGTYPE_p_Ogre__Degree);
  }
  
  (arg1)->roll((Ogre::Degree const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_attachObject(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  Ogre::MovableObject *arg2 = (Ogre::MovableObject *) 0 ;
  
  SWIG_check_num_args("Ogre::SceneNode::attachObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::attachObject",1,"Ogre::SceneNode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Ogre::SceneNode::attachObject",2,"Ogre::MovableObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_attachObject",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__MovableObject,0))){
    SWIG_fail_ptr("SceneNode_attachObject",2,SWIGTYPE_p_Ogre__MovableObject);
  }
  
  (arg1)->attachObject(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_numAttachedObjects(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("Ogre::SceneNode::numAttachedObjects",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::numAttachedObjects",1,"Ogre::SceneNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_numAttachedObjects",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  result = (unsigned short)((Ogre::SceneNode const *)arg1)->numAttachedObjects();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_getAttachedObject__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  unsigned short arg2 ;
  Ogre::MovableObject *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneNode::getAttachedObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::getAttachedObject",1,"Ogre::SceneNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::SceneNode::getAttachedObject",2,"unsigned short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_getAttachedObject",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned short)lua_tonumber(L, 2);
  result = (Ogre::MovableObject *)(arg1)->getAttachedObject(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__MovableObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_getAttachedObject__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  Ogre::MovableObject *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneNode::getAttachedObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::getAttachedObject",1,"Ogre::SceneNode *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::SceneNode::getAttachedObject",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_getAttachedObject",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (Ogre::MovableObject *)(arg1)->getAttachedObject((Ogre::String const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__MovableObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_getAttachedObject(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SceneNode_getAttachedObject__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SceneNode_getAttachedObject__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SceneNode_getAttachedObject'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::SceneNode::getAttachedObject(unsigned short)\n"
    "    Ogre::SceneNode::getAttachedObject(Ogre::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SceneNode_detachObject__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  unsigned short arg2 ;
  Ogre::MovableObject *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneNode::detachObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::detachObject",1,"Ogre::SceneNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::SceneNode::detachObject",2,"unsigned short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_detachObject",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned short)lua_tonumber(L, 2);
  result = (Ogre::MovableObject *)(arg1)->detachObject(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__MovableObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_detachObject__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  Ogre::MovableObject *arg2 = (Ogre::MovableObject *) 0 ;
  
  SWIG_check_num_args("Ogre::SceneNode::detachObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::detachObject",1,"Ogre::SceneNode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Ogre::SceneNode::detachObject",2,"Ogre::MovableObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_detachObject",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__MovableObject,0))){
    SWIG_fail_ptr("SceneNode_detachObject",2,SWIGTYPE_p_Ogre__MovableObject);
  }
  
  (arg1)->detachObject(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_detachObject__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  Ogre::MovableObject *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneNode::detachObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::detachObject",1,"Ogre::SceneNode *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::SceneNode::detachObject",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_detachObject",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (Ogre::MovableObject *)(arg1)->detachObject((Ogre::String const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__MovableObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_detachObject(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__MovableObject, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SceneNode_detachObject__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SceneNode_detachObject__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SceneNode_detachObject__SWIG_2(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SceneNode_detachObject'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::SceneNode::detachObject(unsigned short)\n"
    "    Ogre::SceneNode::detachObject(Ogre::MovableObject *)\n"
    "    Ogre::SceneNode::detachObject(Ogre::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SceneNode_detachAllObjects(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  
  SWIG_check_num_args("Ogre::SceneNode::detachAllObjects",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::detachAllObjects",1,"Ogre::SceneNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_detachAllObjects",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  (arg1)->detachAllObjects();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_getCreator(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  SceneManager *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneNode::getCreator",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::getCreator",1,"Ogre::SceneNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_getCreator",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  result = (SceneManager *)((Ogre::SceneNode const *)arg1)->getCreator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SceneManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_createChildSceneNode__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Ogre::Quaternion *arg3 = 0 ;
  Ogre::SceneNode *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneNode::createChildSceneNode",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::createChildSceneNode",1,"Ogre::SceneNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::SceneNode::createChildSceneNode",2,"Ogre::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Ogre::SceneNode::createChildSceneNode",3,"Ogre::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_createChildSceneNode",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("SceneNode_createChildSceneNode",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Ogre__Quaternion,0))){
    SWIG_fail_ptr("SceneNode_createChildSceneNode",3,SWIGTYPE_p_Ogre__Quaternion);
  }
  
  result = (Ogre::SceneNode *)(arg1)->createChildSceneNode((Ogre::Vector3 const &)*arg2,(Ogre::Quaternion const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__SceneNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_createChildSceneNode__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Ogre::SceneNode *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneNode::createChildSceneNode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::createChildSceneNode",1,"Ogre::SceneNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::SceneNode::createChildSceneNode",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_createChildSceneNode",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("SceneNode_createChildSceneNode",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  result = (Ogre::SceneNode *)(arg1)->createChildSceneNode((Ogre::Vector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__SceneNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_createChildSceneNode__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  Ogre::SceneNode *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneNode::createChildSceneNode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::createChildSceneNode",1,"Ogre::SceneNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_createChildSceneNode",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  result = (Ogre::SceneNode *)(arg1)->createChildSceneNode();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__SceneNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_createChildSceneNode__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::Vector3 *arg3 = 0 ;
  Ogre::Quaternion *arg4 = 0 ;
  std::string temp2 ;
  Ogre::SceneNode *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneNode::createChildSceneNode",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::createChildSceneNode",1,"Ogre::SceneNode *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::SceneNode::createChildSceneNode",2,"Ogre::String const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Ogre::SceneNode::createChildSceneNode",3,"Ogre::Vector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Ogre::SceneNode::createChildSceneNode",4,"Ogre::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_createChildSceneNode",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("SceneNode_createChildSceneNode",3,SWIGTYPE_p_Ogre__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Ogre__Quaternion,0))){
    SWIG_fail_ptr("SceneNode_createChildSceneNode",4,SWIGTYPE_p_Ogre__Quaternion);
  }
  
  result = (Ogre::SceneNode *)(arg1)->createChildSceneNode((Ogre::String const &)*arg2,(Ogre::Vector3 const &)*arg3,(Ogre::Quaternion const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__SceneNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_createChildSceneNode__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::Vector3 *arg3 = 0 ;
  std::string temp2 ;
  Ogre::SceneNode *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneNode::createChildSceneNode",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::createChildSceneNode",1,"Ogre::SceneNode *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::SceneNode::createChildSceneNode",2,"Ogre::String const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Ogre::SceneNode::createChildSceneNode",3,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_createChildSceneNode",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("SceneNode_createChildSceneNode",3,SWIGTYPE_p_Ogre__Vector3);
  }
  
  result = (Ogre::SceneNode *)(arg1)->createChildSceneNode((Ogre::String const &)*arg2,(Ogre::Vector3 const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__SceneNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_createChildSceneNode__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  Ogre::SceneNode *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneNode::createChildSceneNode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::createChildSceneNode",1,"Ogre::SceneNode *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::SceneNode::createChildSceneNode",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_createChildSceneNode",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (Ogre::SceneNode *)(arg1)->createChildSceneNode((Ogre::String const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__SceneNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_createChildSceneNode(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SceneNode_createChildSceneNode__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SceneNode_createChildSceneNode__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SceneNode_createChildSceneNode__SWIG_5(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Ogre__Quaternion, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SceneNode_createChildSceneNode__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SceneNode_createChildSceneNode__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Ogre__Quaternion, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_SceneNode_createChildSceneNode__SWIG_3(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SceneNode_createChildSceneNode'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::SceneNode::createChildSceneNode(Ogre::Vector3 const &,Ogre::Quaternion const &)\n"
    "    Ogre::SceneNode::createChildSceneNode(Ogre::Vector3 const &)\n"
    "    Ogre::SceneNode::createChildSceneNode()\n"
    "    Ogre::SceneNode::createChildSceneNode(Ogre::String const &,Ogre::Vector3 const &,Ogre::Quaternion const &)\n"
    "    Ogre::SceneNode::createChildSceneNode(Ogre::String const &,Ogre::Vector3 const &)\n"
    "    Ogre::SceneNode::createChildSceneNode(Ogre::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SceneNode_removeAndDestroyChild__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Ogre::SceneNode::removeAndDestroyChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::removeAndDestroyChild",1,"Ogre::SceneNode *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::SceneNode::removeAndDestroyChild",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_removeAndDestroyChild",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->removeAndDestroyChild((Ogre::String const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_removeAndDestroyChild__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  unsigned short arg2 ;
  
  SWIG_check_num_args("Ogre::SceneNode::removeAndDestroyChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::removeAndDestroyChild",1,"Ogre::SceneNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::SceneNode::removeAndDestroyChild",2,"unsigned short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_removeAndDestroyChild",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned short)lua_tonumber(L, 2);
  (arg1)->removeAndDestroyChild(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_removeAndDestroyChild(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SceneNode_removeAndDestroyChild__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SceneNode_removeAndDestroyChild__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SceneNode_removeAndDestroyChild'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::SceneNode::removeAndDestroyChild(Ogre::String const &)\n"
    "    Ogre::SceneNode::removeAndDestroyChild(unsigned short)\n");
  lua_error(L);return 0;
}


static int _wrap_SceneNode_removeAndDestroyAllChildren(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  
  SWIG_check_num_args("Ogre::SceneNode::removeAndDestroyAllChildren",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::removeAndDestroyAllChildren",1,"Ogre::SceneNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_removeAndDestroyAllChildren",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  (arg1)->removeAndDestroyAllChildren();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_showBoundingBox(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Ogre::SceneNode::showBoundingBox",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::showBoundingBox",1,"Ogre::SceneNode *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::SceneNode::showBoundingBox",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_showBoundingBox",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->showBoundingBox(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_hideBoundingBox(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Ogre::SceneNode::hideBoundingBox",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::hideBoundingBox",1,"Ogre::SceneNode *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::SceneNode::hideBoundingBox",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_hideBoundingBox",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->hideBoundingBox(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_setDirection__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::Real arg4 ;
  Ogre::Node::TransformSpace arg5 ;
  Ogre::Vector3 *arg6 = 0 ;
  
  SWIG_check_num_args("Ogre::SceneNode::setDirection",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::setDirection",1,"Ogre::SceneNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::SceneNode::setDirection",2,"Ogre::Real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ogre::SceneNode::setDirection",3,"Ogre::Real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Ogre::SceneNode::setDirection",4,"Ogre::Real");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Ogre::SceneNode::setDirection",5,"Ogre::Node::TransformSpace");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("Ogre::SceneNode::setDirection",6,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_setDirection",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  arg2 = (Ogre::Real)lua_tonumber(L, 2);
  arg3 = (Ogre::Real)lua_tonumber(L, 3);
  arg4 = (Ogre::Real)lua_tonumber(L, 4);
  arg5 = (Ogre::Node::TransformSpace)(int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("SceneNode_setDirection",6,SWIGTYPE_p_Ogre__Vector3);
  }
  
  (arg1)->setDirection(arg2,arg3,arg4,arg5,(Ogre::Vector3 const &)*arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_setDirection__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::Real arg4 ;
  Ogre::Node::TransformSpace arg5 ;
  
  SWIG_check_num_args("Ogre::SceneNode::setDirection",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::setDirection",1,"Ogre::SceneNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::SceneNode::setDirection",2,"Ogre::Real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ogre::SceneNode::setDirection",3,"Ogre::Real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Ogre::SceneNode::setDirection",4,"Ogre::Real");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Ogre::SceneNode::setDirection",5,"Ogre::Node::TransformSpace");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_setDirection",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  arg2 = (Ogre::Real)lua_tonumber(L, 2);
  arg3 = (Ogre::Real)lua_tonumber(L, 3);
  arg4 = (Ogre::Real)lua_tonumber(L, 4);
  arg5 = (Ogre::Node::TransformSpace)(int)lua_tonumber(L, 5);
  (arg1)->setDirection(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_setDirection__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::Real arg4 ;
  
  SWIG_check_num_args("Ogre::SceneNode::setDirection",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::setDirection",1,"Ogre::SceneNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::SceneNode::setDirection",2,"Ogre::Real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ogre::SceneNode::setDirection",3,"Ogre::Real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Ogre::SceneNode::setDirection",4,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_setDirection",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  arg2 = (Ogre::Real)lua_tonumber(L, 2);
  arg3 = (Ogre::Real)lua_tonumber(L, 3);
  arg4 = (Ogre::Real)lua_tonumber(L, 4);
  (arg1)->setDirection(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_setDirection__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Ogre::Node::TransformSpace arg3 ;
  Ogre::Vector3 *arg4 = 0 ;
  
  SWIG_check_num_args("Ogre::SceneNode::setDirection",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::setDirection",1,"Ogre::SceneNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::SceneNode::setDirection",2,"Ogre::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ogre::SceneNode::setDirection",3,"Ogre::Node::TransformSpace");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Ogre::SceneNode::setDirection",4,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_setDirection",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("SceneNode_setDirection",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  arg3 = (Ogre::Node::TransformSpace)(int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("SceneNode_setDirection",4,SWIGTYPE_p_Ogre__Vector3);
  }
  
  (arg1)->setDirection((Ogre::Vector3 const &)*arg2,arg3,(Ogre::Vector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_setDirection__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Ogre::Node::TransformSpace arg3 ;
  
  SWIG_check_num_args("Ogre::SceneNode::setDirection",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::setDirection",1,"Ogre::SceneNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::SceneNode::setDirection",2,"Ogre::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ogre::SceneNode::setDirection",3,"Ogre::Node::TransformSpace");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_setDirection",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("SceneNode_setDirection",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  arg3 = (Ogre::Node::TransformSpace)(int)lua_tonumber(L, 3);
  (arg1)->setDirection((Ogre::Vector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_setDirection__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Ogre::SceneNode::setDirection",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::setDirection",1,"Ogre::SceneNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::SceneNode::setDirection",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_setDirection",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("SceneNode_setDirection",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  (arg1)->setDirection((Ogre::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_setDirection(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SceneNode_setDirection__SWIG_5(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SceneNode_setDirection__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_SceneNode_setDirection__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SceneNode_setDirection__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_SceneNode_setDirection__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_SceneNode_setDirection__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SceneNode_setDirection'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::SceneNode::setDirection(Ogre::Real,Ogre::Real,Ogre::Real,Ogre::Node::TransformSpace,Ogre::Vector3 const &)\n"
    "    Ogre::SceneNode::setDirection(Ogre::Real,Ogre::Real,Ogre::Real,Ogre::Node::TransformSpace)\n"
    "    Ogre::SceneNode::setDirection(Ogre::Real,Ogre::Real,Ogre::Real)\n"
    "    Ogre::SceneNode::setDirection(Ogre::Vector3 const &,Ogre::Node::TransformSpace,Ogre::Vector3 const &)\n"
    "    Ogre::SceneNode::setDirection(Ogre::Vector3 const &,Ogre::Node::TransformSpace)\n"
    "    Ogre::SceneNode::setDirection(Ogre::Vector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SceneNode_lookAt__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Ogre::Node::TransformSpace arg3 ;
  Ogre::Vector3 *arg4 = 0 ;
  
  SWIG_check_num_args("Ogre::SceneNode::lookAt",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::lookAt",1,"Ogre::SceneNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::SceneNode::lookAt",2,"Ogre::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ogre::SceneNode::lookAt",3,"Ogre::Node::TransformSpace");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Ogre::SceneNode::lookAt",4,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_lookAt",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("SceneNode_lookAt",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  arg3 = (Ogre::Node::TransformSpace)(int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("SceneNode_lookAt",4,SWIGTYPE_p_Ogre__Vector3);
  }
  
  (arg1)->lookAt((Ogre::Vector3 const &)*arg2,arg3,(Ogre::Vector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_lookAt__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Ogre::Node::TransformSpace arg3 ;
  
  SWIG_check_num_args("Ogre::SceneNode::lookAt",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::lookAt",1,"Ogre::SceneNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::SceneNode::lookAt",2,"Ogre::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ogre::SceneNode::lookAt",3,"Ogre::Node::TransformSpace");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_lookAt",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("SceneNode_lookAt",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  arg3 = (Ogre::Node::TransformSpace)(int)lua_tonumber(L, 3);
  (arg1)->lookAt((Ogre::Vector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_lookAt(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SceneNode_lookAt__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_SceneNode_lookAt__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SceneNode_lookAt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::SceneNode::lookAt(Ogre::Vector3 const &,Ogre::Node::TransformSpace,Ogre::Vector3 const &)\n"
    "    Ogre::SceneNode::lookAt(Ogre::Vector3 const &,Ogre::Node::TransformSpace)\n");
  lua_error(L);return 0;
}


static int _wrap_SceneNode_setAutoTracking__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  bool arg2 ;
  Ogre::SceneNode *arg3 = (Ogre::SceneNode *) 0 ;
  Ogre::Vector3 *arg4 = 0 ;
  Ogre::Vector3 *arg5 = 0 ;
  
  SWIG_check_num_args("Ogre::SceneNode::setAutoTracking",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::setAutoTracking",1,"Ogre::SceneNode *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::SceneNode::setAutoTracking",2,"bool");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Ogre::SceneNode::setAutoTracking",3,"Ogre::SceneNode *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Ogre::SceneNode::setAutoTracking",4,"Ogre::Vector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Ogre::SceneNode::setAutoTracking",5,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_setAutoTracking",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_setAutoTracking",3,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("SceneNode_setAutoTracking",4,SWIGTYPE_p_Ogre__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("SceneNode_setAutoTracking",5,SWIGTYPE_p_Ogre__Vector3);
  }
  
  (arg1)->setAutoTracking(arg2,arg3,(Ogre::Vector3 const &)*arg4,(Ogre::Vector3 const &)*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_setAutoTracking__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  bool arg2 ;
  Ogre::SceneNode *arg3 = (Ogre::SceneNode *) 0 ;
  Ogre::Vector3 *arg4 = 0 ;
  
  SWIG_check_num_args("Ogre::SceneNode::setAutoTracking",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::setAutoTracking",1,"Ogre::SceneNode *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::SceneNode::setAutoTracking",2,"bool");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Ogre::SceneNode::setAutoTracking",3,"Ogre::SceneNode *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Ogre::SceneNode::setAutoTracking",4,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_setAutoTracking",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_setAutoTracking",3,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("SceneNode_setAutoTracking",4,SWIGTYPE_p_Ogre__Vector3);
  }
  
  (arg1)->setAutoTracking(arg2,arg3,(Ogre::Vector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_setAutoTracking__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  bool arg2 ;
  Ogre::SceneNode *arg3 = (Ogre::SceneNode *) 0 ;
  
  SWIG_check_num_args("Ogre::SceneNode::setAutoTracking",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::setAutoTracking",1,"Ogre::SceneNode *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::SceneNode::setAutoTracking",2,"bool");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Ogre::SceneNode::setAutoTracking",3,"Ogre::SceneNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_setAutoTracking",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_setAutoTracking",3,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  (arg1)->setAutoTracking(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_setAutoTracking__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Ogre::SceneNode::setAutoTracking",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::setAutoTracking",1,"Ogre::SceneNode *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::SceneNode::setAutoTracking",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_setAutoTracking",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setAutoTracking(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_setAutoTracking(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_SceneNode_setAutoTracking__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Ogre__SceneNode, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SceneNode_setAutoTracking__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Ogre__SceneNode, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_SceneNode_setAutoTracking__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Ogre__SceneNode, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_SceneNode_setAutoTracking__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SceneNode_setAutoTracking'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::SceneNode::setAutoTracking(bool,Ogre::SceneNode *,Ogre::Vector3 const &,Ogre::Vector3 const &)\n"
    "    Ogre::SceneNode::setAutoTracking(bool,Ogre::SceneNode *,Ogre::Vector3 const &)\n"
    "    Ogre::SceneNode::setAutoTracking(bool,Ogre::SceneNode *)\n"
    "    Ogre::SceneNode::setAutoTracking(bool)\n");
  lua_error(L);return 0;
}


static int _wrap_SceneNode_getAutoTrackTarget(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  Ogre::SceneNode *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneNode::getAutoTrackTarget",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::getAutoTrackTarget",1,"Ogre::SceneNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_getAutoTrackTarget",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  result = (Ogre::SceneNode *)(arg1)->getAutoTrackTarget();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__SceneNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_getAutoTrackOffset(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  Ogre::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneNode::getAutoTrackOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::getAutoTrackOffset",1,"Ogre::SceneNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_getAutoTrackOffset",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  result = (Ogre::Vector3 *) &(arg1)->getAutoTrackOffset();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_getAutoTrackLocalDirection(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  Ogre::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneNode::getAutoTrackLocalDirection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::getAutoTrackLocalDirection",1,"Ogre::SceneNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_getAutoTrackLocalDirection",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  result = (Ogre::Vector3 *) &(arg1)->getAutoTrackLocalDirection();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_getParentSceneNode(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  Ogre::SceneNode *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneNode::getParentSceneNode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::getParentSceneNode",1,"Ogre::SceneNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_getParentSceneNode",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  result = (Ogre::SceneNode *)((Ogre::SceneNode const *)arg1)->getParentSceneNode();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__SceneNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_setVisible__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("Ogre::SceneNode::setVisible",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::setVisible",1,"Ogre::SceneNode *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::SceneNode::setVisible",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Ogre::SceneNode::setVisible",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_setVisible",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->setVisible(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_setVisible__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Ogre::SceneNode::setVisible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::setVisible",1,"Ogre::SceneNode *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::SceneNode::setVisible",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_setVisible",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setVisible(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_setVisible(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_SceneNode_setVisible__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_SceneNode_setVisible__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SceneNode_setVisible'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::SceneNode::setVisible(bool,bool)\n"
    "    Ogre::SceneNode::setVisible(bool)\n");
  lua_error(L);return 0;
}


static int _wrap_SceneNode_flipVisibility__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Ogre::SceneNode::flipVisibility",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::flipVisibility",1,"Ogre::SceneNode *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::SceneNode::flipVisibility",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_flipVisibility",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->flipVisibility(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_flipVisibility__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  
  SWIG_check_num_args("Ogre::SceneNode::flipVisibility",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::flipVisibility",1,"Ogre::SceneNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_flipVisibility",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  (arg1)->flipVisibility();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_flipVisibility(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SceneNode_flipVisibility__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_SceneNode_flipVisibility__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SceneNode_flipVisibility'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::SceneNode::flipVisibility(bool)\n"
    "    Ogre::SceneNode::flipVisibility()\n");
  lua_error(L);return 0;
}


static int _wrap_SceneNode_setOrientation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  Ogre::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Ogre::SceneNode::setOrientation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::setOrientation",1,"Ogre::SceneNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::SceneNode::setOrientation",2,"Ogre::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_setOrientation",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Quaternion,0))){
    SWIG_fail_ptr("SceneNode_setOrientation",2,SWIGTYPE_p_Ogre__Quaternion);
  }
  
  (arg1)->setOrientation((Ogre::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_setOrientation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::Real arg4 ;
  Ogre::Real arg5 ;
  
  SWIG_check_num_args("Ogre::SceneNode::setOrientation",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneNode::setOrientation",1,"Ogre::SceneNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::SceneNode::setOrientation",2,"Ogre::Real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ogre::SceneNode::setOrientation",3,"Ogre::Real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Ogre::SceneNode::setOrientation",4,"Ogre::Real");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Ogre::SceneNode::setOrientation",5,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneNode_setOrientation",1,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  arg2 = (Ogre::Real)lua_tonumber(L, 2);
  arg3 = (Ogre::Real)lua_tonumber(L, 3);
  arg4 = (Ogre::Real)lua_tonumber(L, 4);
  arg5 = (Ogre::Real)lua_tonumber(L, 5);
  (arg1)->setOrientation(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneNode_setOrientation(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SceneNode_setOrientation__SWIG_0(L);
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_SceneNode_setOrientation__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SceneNode_setOrientation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::SceneNode::setOrientation(Ogre::Quaternion const &)\n"
    "    Ogre::SceneNode::setOrientation(Ogre::Real,Ogre::Real,Ogre::Real,Ogre::Real)\n");
  lua_error(L);return 0;
}


static void swig_delete_SceneNode(void *obj) {
Ogre::SceneNode *arg1 = (Ogre::SceneNode *) obj;
delete arg1;
}
static swig_lua_method swig_Ogre_SceneNode_methods[] = {
    {"yaw", _wrap_SceneNode_yaw}, 
    {"pitch", _wrap_SceneNode_pitch}, 
    {"roll", _wrap_SceneNode_roll}, 
    {"attachObject", _wrap_SceneNode_attachObject}, 
    {"numAttachedObjects", _wrap_SceneNode_numAttachedObjects}, 
    {"getAttachedObject", _wrap_SceneNode_getAttachedObject}, 
    {"detachObject", _wrap_SceneNode_detachObject}, 
    {"detachAllObjects", _wrap_SceneNode_detachAllObjects}, 
    {"getCreator", _wrap_SceneNode_getCreator}, 
    {"createChildSceneNode", _wrap_SceneNode_createChildSceneNode}, 
    {"removeAndDestroyChild", _wrap_SceneNode_removeAndDestroyChild}, 
    {"removeAndDestroyAllChildren", _wrap_SceneNode_removeAndDestroyAllChildren}, 
    {"showBoundingBox", _wrap_SceneNode_showBoundingBox}, 
    {"hideBoundingBox", _wrap_SceneNode_hideBoundingBox}, 
    {"setDirection", _wrap_SceneNode_setDirection}, 
    {"lookAt", _wrap_SceneNode_lookAt}, 
    {"setAutoTracking", _wrap_SceneNode_setAutoTracking}, 
    {"getAutoTrackTarget", _wrap_SceneNode_getAutoTrackTarget}, 
    {"getAutoTrackOffset", _wrap_SceneNode_getAutoTrackOffset}, 
    {"getAutoTrackLocalDirection", _wrap_SceneNode_getAutoTrackLocalDirection}, 
    {"getParentSceneNode", _wrap_SceneNode_getParentSceneNode}, 
    {"setVisible", _wrap_SceneNode_setVisible}, 
    {"flipVisibility", _wrap_SceneNode_flipVisibility}, 
    {"setOrientation", _wrap_SceneNode_setOrientation}, 
    {0,0}
};
static swig_lua_attribute swig_Ogre_SceneNode_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Ogre_SceneNode_bases[] = {0,0};
static const char *swig_Ogre_SceneNode_base_names[] = {"Ogre::Node *",0};
static swig_lua_class _wrap_class_Ogre_SceneNode = { "SceneNode", &SWIGTYPE_p_Ogre__SceneNode,0, swig_delete_SceneNode, swig_Ogre_SceneNode_methods, swig_Ogre_SceneNode_attributes, swig_Ogre_SceneNode_bases, swig_Ogre_SceneNode_base_names };

static int _wrap_new_Light__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Light *result = 0 ;
  
  SWIG_check_num_args("Ogre::Light::Light",0,0)
  result = (Ogre::Light *)new Ogre::Light();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Light,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Light__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::String *arg1 = 0 ;
  std::string temp1 ;
  Ogre::Light *result = 0 ;
  
  SWIG_check_num_args("Ogre::Light::Light",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Ogre::Light::Light",1,"Ogre::String const &");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  result = (Ogre::Light *)new Ogre::Light((Ogre::String const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Light,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Light(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Light__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Light__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Light'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::Light::Light()\n"
    "    Ogre::Light::Light(Ogre::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Light_setType(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Ogre::Light::LightTypes arg2 ;
  
  SWIG_check_num_args("Ogre::Light::setType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Light::setType",1,"Ogre::Light *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::Light::setType",2,"Ogre::Light::LightTypes");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Light,0))){
    SWIG_fail_ptr("Light_setType",1,SWIGTYPE_p_Ogre__Light);
  }
  
  arg2 = (Ogre::Light::LightTypes)(int)lua_tonumber(L, 2);
  (arg1)->setType(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_getType(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Ogre::Light::LightTypes result;
  
  SWIG_check_num_args("Ogre::Light::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Light::getType",1,"Ogre::Light const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Light,0))){
    SWIG_fail_ptr("Light_getType",1,SWIGTYPE_p_Ogre__Light);
  }
  
  result = (Ogre::Light::LightTypes)((Ogre::Light const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_setDiffuseColour__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::Real arg4 ;
  
  SWIG_check_num_args("Ogre::Light::setDiffuseColour",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Light::setDiffuseColour",1,"Ogre::Light *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::Light::setDiffuseColour",2,"Ogre::Real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ogre::Light::setDiffuseColour",3,"Ogre::Real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Ogre::Light::setDiffuseColour",4,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Light,0))){
    SWIG_fail_ptr("Light_setDiffuseColour",1,SWIGTYPE_p_Ogre__Light);
  }
  
  arg2 = (Ogre::Real)lua_tonumber(L, 2);
  arg3 = (Ogre::Real)lua_tonumber(L, 3);
  arg4 = (Ogre::Real)lua_tonumber(L, 4);
  (arg1)->setDiffuseColour(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_setDiffuseColour__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Ogre::ColourValue *arg2 = 0 ;
  
  SWIG_check_num_args("Ogre::Light::setDiffuseColour",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Light::setDiffuseColour",1,"Ogre::Light *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::Light::setDiffuseColour",2,"Ogre::ColourValue const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Light,0))){
    SWIG_fail_ptr("Light_setDiffuseColour",1,SWIGTYPE_p_Ogre__Light);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__ColourValue,0))){
    SWIG_fail_ptr("Light_setDiffuseColour",2,SWIGTYPE_p_Ogre__ColourValue);
  }
  
  (arg1)->setDiffuseColour((Ogre::ColourValue const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_setDiffuseColour(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Light, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__ColourValue, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Light_setDiffuseColour__SWIG_1(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Light, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Light_setDiffuseColour__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Light_setDiffuseColour'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::Light::setDiffuseColour(Ogre::Real,Ogre::Real,Ogre::Real)\n"
    "    Ogre::Light::setDiffuseColour(Ogre::ColourValue const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Light_getDiffuseColour(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Ogre::ColourValue *result = 0 ;
  
  SWIG_check_num_args("Ogre::Light::getDiffuseColour",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Light::getDiffuseColour",1,"Ogre::Light const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Light,0))){
    SWIG_fail_ptr("Light_getDiffuseColour",1,SWIGTYPE_p_Ogre__Light);
  }
  
  result = (Ogre::ColourValue *) &((Ogre::Light const *)arg1)->getDiffuseColour();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__ColourValue,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_setSpecularColour__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::Real arg4 ;
  
  SWIG_check_num_args("Ogre::Light::setSpecularColour",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Light::setSpecularColour",1,"Ogre::Light *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::Light::setSpecularColour",2,"Ogre::Real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ogre::Light::setSpecularColour",3,"Ogre::Real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Ogre::Light::setSpecularColour",4,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Light,0))){
    SWIG_fail_ptr("Light_setSpecularColour",1,SWIGTYPE_p_Ogre__Light);
  }
  
  arg2 = (Ogre::Real)lua_tonumber(L, 2);
  arg3 = (Ogre::Real)lua_tonumber(L, 3);
  arg4 = (Ogre::Real)lua_tonumber(L, 4);
  (arg1)->setSpecularColour(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_setSpecularColour__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Ogre::ColourValue *arg2 = 0 ;
  
  SWIG_check_num_args("Ogre::Light::setSpecularColour",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Light::setSpecularColour",1,"Ogre::Light *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::Light::setSpecularColour",2,"Ogre::ColourValue const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Light,0))){
    SWIG_fail_ptr("Light_setSpecularColour",1,SWIGTYPE_p_Ogre__Light);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__ColourValue,0))){
    SWIG_fail_ptr("Light_setSpecularColour",2,SWIGTYPE_p_Ogre__ColourValue);
  }
  
  (arg1)->setSpecularColour((Ogre::ColourValue const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_setSpecularColour(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Light, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__ColourValue, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Light_setSpecularColour__SWIG_1(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Light, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Light_setSpecularColour__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Light_setSpecularColour'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::Light::setSpecularColour(Ogre::Real,Ogre::Real,Ogre::Real)\n"
    "    Ogre::Light::setSpecularColour(Ogre::ColourValue const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Light_getSpecularColour(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Ogre::ColourValue *result = 0 ;
  
  SWIG_check_num_args("Ogre::Light::getSpecularColour",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Light::getSpecularColour",1,"Ogre::Light const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Light,0))){
    SWIG_fail_ptr("Light_getSpecularColour",1,SWIGTYPE_p_Ogre__Light);
  }
  
  result = (Ogre::ColourValue *) &((Ogre::Light const *)arg1)->getSpecularColour();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__ColourValue,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_setAttenuation(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::Real arg4 ;
  Ogre::Real arg5 ;
  
  SWIG_check_num_args("Ogre::Light::setAttenuation",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Light::setAttenuation",1,"Ogre::Light *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::Light::setAttenuation",2,"Ogre::Real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ogre::Light::setAttenuation",3,"Ogre::Real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Ogre::Light::setAttenuation",4,"Ogre::Real");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Ogre::Light::setAttenuation",5,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Light,0))){
    SWIG_fail_ptr("Light_setAttenuation",1,SWIGTYPE_p_Ogre__Light);
  }
  
  arg2 = (Ogre::Real)lua_tonumber(L, 2);
  arg3 = (Ogre::Real)lua_tonumber(L, 3);
  arg4 = (Ogre::Real)lua_tonumber(L, 4);
  arg5 = (Ogre::Real)lua_tonumber(L, 5);
  (arg1)->setAttenuation(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_getAttenuationRange(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Ogre::Real result;
  
  SWIG_check_num_args("Ogre::Light::getAttenuationRange",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Light::getAttenuationRange",1,"Ogre::Light const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Light,0))){
    SWIG_fail_ptr("Light_getAttenuationRange",1,SWIGTYPE_p_Ogre__Light);
  }
  
  result = (Ogre::Real)((Ogre::Light const *)arg1)->getAttenuationRange();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_getAttenuationConstant(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Ogre::Real result;
  
  SWIG_check_num_args("Ogre::Light::getAttenuationConstant",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Light::getAttenuationConstant",1,"Ogre::Light const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Light,0))){
    SWIG_fail_ptr("Light_getAttenuationConstant",1,SWIGTYPE_p_Ogre__Light);
  }
  
  result = (Ogre::Real)((Ogre::Light const *)arg1)->getAttenuationConstant();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_getAttenuationLinear(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Ogre::Real result;
  
  SWIG_check_num_args("Ogre::Light::getAttenuationLinear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Light::getAttenuationLinear",1,"Ogre::Light const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Light,0))){
    SWIG_fail_ptr("Light_getAttenuationLinear",1,SWIGTYPE_p_Ogre__Light);
  }
  
  result = (Ogre::Real)((Ogre::Light const *)arg1)->getAttenuationLinear();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_getAttenuationQuadric(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Ogre::Real result;
  
  SWIG_check_num_args("Ogre::Light::getAttenuationQuadric",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Light::getAttenuationQuadric",1,"Ogre::Light const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Light,0))){
    SWIG_fail_ptr("Light_getAttenuationQuadric",1,SWIGTYPE_p_Ogre__Light);
  }
  
  result = (Ogre::Real)((Ogre::Light const *)arg1)->getAttenuationQuadric();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_setPosition__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::Real arg4 ;
  
  SWIG_check_num_args("Ogre::Light::setPosition",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Light::setPosition",1,"Ogre::Light *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::Light::setPosition",2,"Ogre::Real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ogre::Light::setPosition",3,"Ogre::Real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Ogre::Light::setPosition",4,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Light,0))){
    SWIG_fail_ptr("Light_setPosition",1,SWIGTYPE_p_Ogre__Light);
  }
  
  arg2 = (Ogre::Real)lua_tonumber(L, 2);
  arg3 = (Ogre::Real)lua_tonumber(L, 3);
  arg4 = (Ogre::Real)lua_tonumber(L, 4);
  (arg1)->setPosition(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_setPosition__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Ogre::Light::setPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Light::setPosition",1,"Ogre::Light *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::Light::setPosition",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Light,0))){
    SWIG_fail_ptr("Light_setPosition",1,SWIGTYPE_p_Ogre__Light);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Light_setPosition",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  (arg1)->setPosition((Ogre::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_setPosition(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Light, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Light_setPosition__SWIG_1(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Light, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Light_setPosition__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Light_setPosition'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::Light::setPosition(Ogre::Real,Ogre::Real,Ogre::Real)\n"
    "    Ogre::Light::setPosition(Ogre::Vector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Light_getPosition(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Ogre::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Ogre::Light::getPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Light::getPosition",1,"Ogre::Light const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Light,0))){
    SWIG_fail_ptr("Light_getPosition",1,SWIGTYPE_p_Ogre__Light);
  }
  
  result = (Ogre::Vector3 *) &((Ogre::Light const *)arg1)->getPosition();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_setDirection__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::Real arg4 ;
  
  SWIG_check_num_args("Ogre::Light::setDirection",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Light::setDirection",1,"Ogre::Light *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::Light::setDirection",2,"Ogre::Real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ogre::Light::setDirection",3,"Ogre::Real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Ogre::Light::setDirection",4,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Light,0))){
    SWIG_fail_ptr("Light_setDirection",1,SWIGTYPE_p_Ogre__Light);
  }
  
  arg2 = (Ogre::Real)lua_tonumber(L, 2);
  arg3 = (Ogre::Real)lua_tonumber(L, 3);
  arg4 = (Ogre::Real)lua_tonumber(L, 4);
  (arg1)->setDirection(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_setDirection__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Ogre::Light::setDirection",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Light::setDirection",1,"Ogre::Light *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::Light::setDirection",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Light,0))){
    SWIG_fail_ptr("Light_setDirection",1,SWIGTYPE_p_Ogre__Light);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Light_setDirection",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  (arg1)->setDirection((Ogre::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_setDirection(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Light, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Light_setDirection__SWIG_1(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Light, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Light_setDirection__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Light_setDirection'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::Light::setDirection(Ogre::Real,Ogre::Real,Ogre::Real)\n"
    "    Ogre::Light::setDirection(Ogre::Vector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Light_getDirection(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Ogre::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Ogre::Light::getDirection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Light::getDirection",1,"Ogre::Light const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Light,0))){
    SWIG_fail_ptr("Light_getDirection",1,SWIGTYPE_p_Ogre__Light);
  }
  
  result = (Ogre::Vector3 *) &((Ogre::Light const *)arg1)->getDirection();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_setSpotlightRange__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Ogre::Radian *arg2 = 0 ;
  Ogre::Radian *arg3 = 0 ;
  Ogre::Real arg4 ;
  
  SWIG_check_num_args("Ogre::Light::setSpotlightRange",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Light::setSpotlightRange",1,"Ogre::Light *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::Light::setSpotlightRange",2,"Ogre::Radian const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Ogre::Light::setSpotlightRange",3,"Ogre::Radian const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Ogre::Light::setSpotlightRange",4,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Light,0))){
    SWIG_fail_ptr("Light_setSpotlightRange",1,SWIGTYPE_p_Ogre__Light);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Radian,0))){
    SWIG_fail_ptr("Light_setSpotlightRange",2,SWIGTYPE_p_Ogre__Radian);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Ogre__Radian,0))){
    SWIG_fail_ptr("Light_setSpotlightRange",3,SWIGTYPE_p_Ogre__Radian);
  }
  
  arg4 = (Ogre::Real)lua_tonumber(L, 4);
  (arg1)->setSpotlightRange((Ogre::Radian const &)*arg2,(Ogre::Radian const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_setSpotlightRange__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Ogre::Radian *arg2 = 0 ;
  Ogre::Radian *arg3 = 0 ;
  
  SWIG_check_num_args("Ogre::Light::setSpotlightRange",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Light::setSpotlightRange",1,"Ogre::Light *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::Light::setSpotlightRange",2,"Ogre::Radian const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Ogre::Light::setSpotlightRange",3,"Ogre::Radian const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Light,0))){
    SWIG_fail_ptr("Light_setSpotlightRange",1,SWIGTYPE_p_Ogre__Light);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Radian,0))){
    SWIG_fail_ptr("Light_setSpotlightRange",2,SWIGTYPE_p_Ogre__Radian);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Ogre__Radian,0))){
    SWIG_fail_ptr("Light_setSpotlightRange",3,SWIGTYPE_p_Ogre__Radian);
  }
  
  (arg1)->setSpotlightRange((Ogre::Radian const &)*arg2,(Ogre::Radian const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_setSpotlightRange(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Light, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Radian, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Ogre__Radian, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Light_setSpotlightRange__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Light, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Radian, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Ogre__Radian, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Light_setSpotlightRange__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Light_setSpotlightRange'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::Light::setSpotlightRange(Ogre::Radian const &,Ogre::Radian const &,Ogre::Real)\n"
    "    Ogre::Light::setSpotlightRange(Ogre::Radian const &,Ogre::Radian const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Light_getSpotlightInnerAngle(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Ogre::Radian *result = 0 ;
  
  SWIG_check_num_args("Ogre::Light::getSpotlightInnerAngle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Light::getSpotlightInnerAngle",1,"Ogre::Light const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Light,0))){
    SWIG_fail_ptr("Light_getSpotlightInnerAngle",1,SWIGTYPE_p_Ogre__Light);
  }
  
  result = (Ogre::Radian *) &((Ogre::Light const *)arg1)->getSpotlightInnerAngle();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Radian,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_getSpotlightOuterAngle(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Ogre::Radian *result = 0 ;
  
  SWIG_check_num_args("Ogre::Light::getSpotlightOuterAngle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Light::getSpotlightOuterAngle",1,"Ogre::Light const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Light,0))){
    SWIG_fail_ptr("Light_getSpotlightOuterAngle",1,SWIGTYPE_p_Ogre__Light);
  }
  
  result = (Ogre::Radian *) &((Ogre::Light const *)arg1)->getSpotlightOuterAngle();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Radian,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_getSpotlightFalloff(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Ogre::Real result;
  
  SWIG_check_num_args("Ogre::Light::getSpotlightFalloff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Light::getSpotlightFalloff",1,"Ogre::Light const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Light,0))){
    SWIG_fail_ptr("Light_getSpotlightFalloff",1,SWIGTYPE_p_Ogre__Light);
  }
  
  result = (Ogre::Real)((Ogre::Light const *)arg1)->getSpotlightFalloff();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_setSpotlightInnerAngle(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Ogre::Radian *arg2 = 0 ;
  
  SWIG_check_num_args("Ogre::Light::setSpotlightInnerAngle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Light::setSpotlightInnerAngle",1,"Ogre::Light *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::Light::setSpotlightInnerAngle",2,"Ogre::Radian const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Light,0))){
    SWIG_fail_ptr("Light_setSpotlightInnerAngle",1,SWIGTYPE_p_Ogre__Light);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Radian,0))){
    SWIG_fail_ptr("Light_setSpotlightInnerAngle",2,SWIGTYPE_p_Ogre__Radian);
  }
  
  (arg1)->setSpotlightInnerAngle((Ogre::Radian const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_setSpotlightOuterAngle(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Ogre::Radian *arg2 = 0 ;
  
  SWIG_check_num_args("Ogre::Light::setSpotlightOuterAngle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Light::setSpotlightOuterAngle",1,"Ogre::Light *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::Light::setSpotlightOuterAngle",2,"Ogre::Radian const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Light,0))){
    SWIG_fail_ptr("Light_setSpotlightOuterAngle",1,SWIGTYPE_p_Ogre__Light);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Radian,0))){
    SWIG_fail_ptr("Light_setSpotlightOuterAngle",2,SWIGTYPE_p_Ogre__Radian);
  }
  
  (arg1)->setSpotlightOuterAngle((Ogre::Radian const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_setSpotlightFalloff(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Ogre::Real arg2 ;
  
  SWIG_check_num_args("Ogre::Light::setSpotlightFalloff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Light::setSpotlightFalloff",1,"Ogre::Light *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::Light::setSpotlightFalloff",2,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Light,0))){
    SWIG_fail_ptr("Light_setSpotlightFalloff",1,SWIGTYPE_p_Ogre__Light);
  }
  
  arg2 = (Ogre::Real)lua_tonumber(L, 2);
  (arg1)->setSpotlightFalloff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_setPowerScale(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Ogre::Real arg2 ;
  
  SWIG_check_num_args("Ogre::Light::setPowerScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Light::setPowerScale",1,"Ogre::Light *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::Light::setPowerScale",2,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Light,0))){
    SWIG_fail_ptr("Light_setPowerScale",1,SWIGTYPE_p_Ogre__Light);
  }
  
  arg2 = (Ogre::Real)lua_tonumber(L, 2);
  (arg1)->setPowerScale(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_getPowerScale(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Ogre::Real result;
  
  SWIG_check_num_args("Ogre::Light::getPowerScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Light::getPowerScale",1,"Ogre::Light const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Light,0))){
    SWIG_fail_ptr("Light_getPowerScale",1,SWIGTYPE_p_Ogre__Light);
  }
  
  result = (Ogre::Real)((Ogre::Light const *)arg1)->getPowerScale();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_getBoundingBox(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Ogre::AxisAlignedBox *result = 0 ;
  
  SWIG_check_num_args("Ogre::Light::getBoundingBox",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Light::getBoundingBox",1,"Ogre::Light const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Light,0))){
    SWIG_fail_ptr("Light_getBoundingBox",1,SWIGTYPE_p_Ogre__Light);
  }
  
  result = (Ogre::AxisAlignedBox *) &((Ogre::Light const *)arg1)->getBoundingBox();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__AxisAlignedBox,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_getMovableType(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Ogre::String *result = 0 ;
  
  SWIG_check_num_args("Ogre::Light::getMovableType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Light::getMovableType",1,"Ogre::Light const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Light,0))){
    SWIG_fail_ptr("Light_getMovableType",1,SWIGTYPE_p_Ogre__Light);
  }
  
  result = (Ogre::String *) &((Ogre::Light const *)arg1)->getMovableType();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_getDerivedPosition__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  bool arg2 ;
  Ogre::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Ogre::Light::getDerivedPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Light::getDerivedPosition",1,"Ogre::Light const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::Light::getDerivedPosition",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Light,0))){
    SWIG_fail_ptr("Light_getDerivedPosition",1,SWIGTYPE_p_Ogre__Light);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (Ogre::Vector3 *) &((Ogre::Light const *)arg1)->getDerivedPosition(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_getDerivedPosition__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Ogre::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Ogre::Light::getDerivedPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Light::getDerivedPosition",1,"Ogre::Light const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Light,0))){
    SWIG_fail_ptr("Light_getDerivedPosition",1,SWIGTYPE_p_Ogre__Light);
  }
  
  result = (Ogre::Vector3 *) &((Ogre::Light const *)arg1)->getDerivedPosition();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_getDerivedPosition(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Light, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Light_getDerivedPosition__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Light, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Light_getDerivedPosition__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Light_getDerivedPosition'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::Light::getDerivedPosition(bool) const\n"
    "    Ogre::Light::getDerivedPosition() const\n");
  lua_error(L);return 0;
}


static int _wrap_Light_getDerivedDirection(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Ogre::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Ogre::Light::getDerivedDirection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Light::getDerivedDirection",1,"Ogre::Light const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Light,0))){
    SWIG_fail_ptr("Light_getDerivedDirection",1,SWIGTYPE_p_Ogre__Light);
  }
  
  result = (Ogre::Vector3 *) &((Ogre::Light const *)arg1)->getDerivedDirection();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_setVisible(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Ogre::Light::setVisible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Light::setVisible",1,"Ogre::Light *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::Light::setVisible",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Light,0))){
    SWIG_fail_ptr("Light_setVisible",1,SWIGTYPE_p_Ogre__Light);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setVisible(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Light(void *obj) {
Ogre::Light *arg1 = (Ogre::Light *) obj;
delete arg1;
}
static swig_lua_method swig_Ogre_Light_methods[] = {
    {"setType", _wrap_Light_setType}, 
    {"getType", _wrap_Light_getType}, 
    {"setDiffuseColour", _wrap_Light_setDiffuseColour}, 
    {"getDiffuseColour", _wrap_Light_getDiffuseColour}, 
    {"setSpecularColour", _wrap_Light_setSpecularColour}, 
    {"getSpecularColour", _wrap_Light_getSpecularColour}, 
    {"setAttenuation", _wrap_Light_setAttenuation}, 
    {"getAttenuationRange", _wrap_Light_getAttenuationRange}, 
    {"getAttenuationConstant", _wrap_Light_getAttenuationConstant}, 
    {"getAttenuationLinear", _wrap_Light_getAttenuationLinear}, 
    {"getAttenuationQuadric", _wrap_Light_getAttenuationQuadric}, 
    {"setPosition", _wrap_Light_setPosition}, 
    {"getPosition", _wrap_Light_getPosition}, 
    {"setDirection", _wrap_Light_setDirection}, 
    {"getDirection", _wrap_Light_getDirection}, 
    {"setSpotlightRange", _wrap_Light_setSpotlightRange}, 
    {"getSpotlightInnerAngle", _wrap_Light_getSpotlightInnerAngle}, 
    {"getSpotlightOuterAngle", _wrap_Light_getSpotlightOuterAngle}, 
    {"getSpotlightFalloff", _wrap_Light_getSpotlightFalloff}, 
    {"setSpotlightInnerAngle", _wrap_Light_setSpotlightInnerAngle}, 
    {"setSpotlightOuterAngle", _wrap_Light_setSpotlightOuterAngle}, 
    {"setSpotlightFalloff", _wrap_Light_setSpotlightFalloff}, 
    {"setPowerScale", _wrap_Light_setPowerScale}, 
    {"getPowerScale", _wrap_Light_getPowerScale}, 
    {"getBoundingBox", _wrap_Light_getBoundingBox}, 
    {"getMovableType", _wrap_Light_getMovableType}, 
    {"getDerivedPosition", _wrap_Light_getDerivedPosition}, 
    {"getDerivedDirection", _wrap_Light_getDerivedDirection}, 
    {"setVisible", _wrap_Light_setVisible}, 
    {0,0}
};
static swig_lua_attribute swig_Ogre_Light_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Ogre_Light_bases[] = {0,0};
static const char *swig_Ogre_Light_base_names[] = {"Ogre::MovableObject *",0};
static swig_lua_class _wrap_class_Ogre_Light = { "Light", &SWIGTYPE_p_Ogre__Light,_wrap_new_Light, swig_delete_Light, swig_Ogre_Light_methods, swig_Ogre_Light_attributes, swig_Ogre_Light_bases, swig_Ogre_Light_base_names };

static int _wrap_new_Camera(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::String *arg1 = 0 ;
  Ogre::SceneManager *arg2 = (Ogre::SceneManager *) 0 ;
  std::string temp1 ;
  Ogre::Camera *result = 0 ;
  
  SWIG_check_num_args("Ogre::Camera::Camera",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Ogre::Camera::Camera",1,"Ogre::String const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Ogre::Camera::Camera",2,"Ogre::SceneManager *");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("new_Camera",2,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  result = (Ogre::Camera *)new Ogre::Camera((Ogre::String const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Camera,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_getSceneManager(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Camera *arg1 = (Ogre::Camera *) 0 ;
  SceneManager *result = 0 ;
  
  SWIG_check_num_args("Ogre::Camera::getSceneManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Camera::getSceneManager",1,"Ogre::Camera const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Camera,0))){
    SWIG_fail_ptr("Camera_getSceneManager",1,SWIGTYPE_p_Ogre__Camera);
  }
  
  result = (SceneManager *)((Ogre::Camera const *)arg1)->getSceneManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SceneManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_setAspectRatio(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Camera *arg1 = (Ogre::Camera *) 0 ;
  Ogre::Real arg2 ;
  
  SWIG_check_num_args("Ogre::Camera::setAspectRatio",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Camera::setAspectRatio",1,"Ogre::Camera *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::Camera::setAspectRatio",2,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Camera,0))){
    SWIG_fail_ptr("Camera_setAspectRatio",1,SWIGTYPE_p_Ogre__Camera);
  }
  
  arg2 = (Ogre::Real)lua_tonumber(L, 2);
  (arg1)->setAspectRatio(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_setNearClipDistance(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Camera *arg1 = (Ogre::Camera *) 0 ;
  Ogre::Real arg2 ;
  
  SWIG_check_num_args("Ogre::Camera::setNearClipDistance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Camera::setNearClipDistance",1,"Ogre::Camera *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::Camera::setNearClipDistance",2,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Camera,0))){
    SWIG_fail_ptr("Camera_setNearClipDistance",1,SWIGTYPE_p_Ogre__Camera);
  }
  
  arg2 = (Ogre::Real)lua_tonumber(L, 2);
  (arg1)->setNearClipDistance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_getNearClipDistance(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Camera *arg1 = (Ogre::Camera *) 0 ;
  Ogre::Real result;
  
  SWIG_check_num_args("Ogre::Camera::getNearClipDistance",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Camera::getNearClipDistance",1,"Ogre::Camera const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Camera,0))){
    SWIG_fail_ptr("Camera_getNearClipDistance",1,SWIGTYPE_p_Ogre__Camera);
  }
  
  result = (Ogre::Real)((Ogre::Camera const *)arg1)->getNearClipDistance();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_setFarClipDistance(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Camera *arg1 = (Ogre::Camera *) 0 ;
  Ogre::Real arg2 ;
  
  SWIG_check_num_args("Ogre::Camera::setFarClipDistance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Camera::setFarClipDistance",1,"Ogre::Camera *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::Camera::setFarClipDistance",2,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Camera,0))){
    SWIG_fail_ptr("Camera_setFarClipDistance",1,SWIGTYPE_p_Ogre__Camera);
  }
  
  arg2 = (Ogre::Real)lua_tonumber(L, 2);
  (arg1)->setFarClipDistance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_getFarClipDistance(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Camera *arg1 = (Ogre::Camera *) 0 ;
  Ogre::Real result;
  
  SWIG_check_num_args("Ogre::Camera::getFarClipDistance",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Camera::getFarClipDistance",1,"Ogre::Camera const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Camera,0))){
    SWIG_fail_ptr("Camera_getFarClipDistance",1,SWIGTYPE_p_Ogre__Camera);
  }
  
  result = (Ogre::Real)((Ogre::Camera const *)arg1)->getFarClipDistance();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_setPolygonMode(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Camera *arg1 = (Ogre::Camera *) 0 ;
  Ogre::PolygonMode arg2 ;
  
  SWIG_check_num_args("Ogre::Camera::setPolygonMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Camera::setPolygonMode",1,"Ogre::Camera *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::Camera::setPolygonMode",2,"Ogre::PolygonMode");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Camera,0))){
    SWIG_fail_ptr("Camera_setPolygonMode",1,SWIGTYPE_p_Ogre__Camera);
  }
  
  arg2 = (Ogre::PolygonMode)(int)lua_tonumber(L, 2);
  (arg1)->setPolygonMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_getPolygonMode(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Camera *arg1 = (Ogre::Camera *) 0 ;
  Ogre::PolygonMode result;
  
  SWIG_check_num_args("Ogre::Camera::getPolygonMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Camera::getPolygonMode",1,"Ogre::Camera const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Camera,0))){
    SWIG_fail_ptr("Camera_getPolygonMode",1,SWIGTYPE_p_Ogre__Camera);
  }
  
  result = (Ogre::PolygonMode)((Ogre::Camera const *)arg1)->getPolygonMode();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_setPosition__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Camera *arg1 = (Ogre::Camera *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::Real arg4 ;
  
  SWIG_check_num_args("Ogre::Camera::setPosition",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Camera::setPosition",1,"Ogre::Camera *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::Camera::setPosition",2,"Ogre::Real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ogre::Camera::setPosition",3,"Ogre::Real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Ogre::Camera::setPosition",4,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Camera,0))){
    SWIG_fail_ptr("Camera_setPosition",1,SWIGTYPE_p_Ogre__Camera);
  }
  
  arg2 = (Ogre::Real)lua_tonumber(L, 2);
  arg3 = (Ogre::Real)lua_tonumber(L, 3);
  arg4 = (Ogre::Real)lua_tonumber(L, 4);
  (arg1)->setPosition(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_setPosition__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Camera *arg1 = (Ogre::Camera *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Ogre::Camera::setPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Camera::setPosition",1,"Ogre::Camera *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::Camera::setPosition",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Camera,0))){
    SWIG_fail_ptr("Camera_setPosition",1,SWIGTYPE_p_Ogre__Camera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Camera_setPosition",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  (arg1)->setPosition((Ogre::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_setPosition(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Camera, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Camera_setPosition__SWIG_1(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Camera, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Camera_setPosition__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Camera_setPosition'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::Camera::setPosition(Ogre::Real,Ogre::Real,Ogre::Real)\n"
    "    Ogre::Camera::setPosition(Ogre::Vector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Camera_getPosition(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Camera *arg1 = (Ogre::Camera *) 0 ;
  Ogre::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Ogre::Camera::getPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Camera::getPosition",1,"Ogre::Camera const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Camera,0))){
    SWIG_fail_ptr("Camera_getPosition",1,SWIGTYPE_p_Ogre__Camera);
  }
  
  result = (Ogre::Vector3 *) &((Ogre::Camera const *)arg1)->getPosition();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_move(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Camera *arg1 = (Ogre::Camera *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Ogre::Camera::move",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Camera::move",1,"Ogre::Camera *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::Camera::move",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Camera,0))){
    SWIG_fail_ptr("Camera_move",1,SWIGTYPE_p_Ogre__Camera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Camera_move",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  (arg1)->move((Ogre::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_moveRelative(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Camera *arg1 = (Ogre::Camera *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Ogre::Camera::moveRelative",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Camera::moveRelative",1,"Ogre::Camera *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::Camera::moveRelative",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Camera,0))){
    SWIG_fail_ptr("Camera_moveRelative",1,SWIGTYPE_p_Ogre__Camera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Camera_moveRelative",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  (arg1)->moveRelative((Ogre::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_setDirection__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Camera *arg1 = (Ogre::Camera *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::Real arg4 ;
  
  SWIG_check_num_args("Ogre::Camera::setDirection",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Camera::setDirection",1,"Ogre::Camera *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::Camera::setDirection",2,"Ogre::Real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ogre::Camera::setDirection",3,"Ogre::Real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Ogre::Camera::setDirection",4,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Camera,0))){
    SWIG_fail_ptr("Camera_setDirection",1,SWIGTYPE_p_Ogre__Camera);
  }
  
  arg2 = (Ogre::Real)lua_tonumber(L, 2);
  arg3 = (Ogre::Real)lua_tonumber(L, 3);
  arg4 = (Ogre::Real)lua_tonumber(L, 4);
  (arg1)->setDirection(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_setDirection__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Camera *arg1 = (Ogre::Camera *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Ogre::Camera::setDirection",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Camera::setDirection",1,"Ogre::Camera *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::Camera::setDirection",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Camera,0))){
    SWIG_fail_ptr("Camera_setDirection",1,SWIGTYPE_p_Ogre__Camera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Camera_setDirection",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  (arg1)->setDirection((Ogre::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_setDirection(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Camera, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Camera_setDirection__SWIG_1(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Camera, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Camera_setDirection__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Camera_setDirection'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::Camera::setDirection(Ogre::Real,Ogre::Real,Ogre::Real)\n"
    "    Ogre::Camera::setDirection(Ogre::Vector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Camera_getDirection(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Camera *arg1 = (Ogre::Camera *) 0 ;
  SwigValueWrapper< Ogre::Vector3 > result;
  
  SWIG_check_num_args("Ogre::Camera::getDirection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Camera::getDirection",1,"Ogre::Camera const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Camera,0))){
    SWIG_fail_ptr("Camera_getDirection",1,SWIGTYPE_p_Ogre__Camera);
  }
  
  result = ((Ogre::Camera const *)arg1)->getDirection();
  {
    Ogre::Vector3 * resultptr = new Ogre::Vector3((const Ogre::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_getUp(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Camera *arg1 = (Ogre::Camera *) 0 ;
  SwigValueWrapper< Ogre::Vector3 > result;
  
  SWIG_check_num_args("Ogre::Camera::getUp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Camera::getUp",1,"Ogre::Camera const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Camera,0))){
    SWIG_fail_ptr("Camera_getUp",1,SWIGTYPE_p_Ogre__Camera);
  }
  
  result = ((Ogre::Camera const *)arg1)->getUp();
  {
    Ogre::Vector3 * resultptr = new Ogre::Vector3((const Ogre::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_getRight(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Camera *arg1 = (Ogre::Camera *) 0 ;
  SwigValueWrapper< Ogre::Vector3 > result;
  
  SWIG_check_num_args("Ogre::Camera::getRight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Camera::getRight",1,"Ogre::Camera const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Camera,0))){
    SWIG_fail_ptr("Camera_getRight",1,SWIGTYPE_p_Ogre__Camera);
  }
  
  result = ((Ogre::Camera const *)arg1)->getRight();
  {
    Ogre::Vector3 * resultptr = new Ogre::Vector3((const Ogre::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_lookAt__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Camera *arg1 = (Ogre::Camera *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Ogre::Camera::lookAt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Camera::lookAt",1,"Ogre::Camera *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::Camera::lookAt",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Camera,0))){
    SWIG_fail_ptr("Camera_lookAt",1,SWIGTYPE_p_Ogre__Camera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Camera_lookAt",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  (arg1)->lookAt((Ogre::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_lookAt__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Camera *arg1 = (Ogre::Camera *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::Real arg4 ;
  
  SWIG_check_num_args("Ogre::Camera::lookAt",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Camera::lookAt",1,"Ogre::Camera *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::Camera::lookAt",2,"Ogre::Real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ogre::Camera::lookAt",3,"Ogre::Real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Ogre::Camera::lookAt",4,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Camera,0))){
    SWIG_fail_ptr("Camera_lookAt",1,SWIGTYPE_p_Ogre__Camera);
  }
  
  arg2 = (Ogre::Real)lua_tonumber(L, 2);
  arg3 = (Ogre::Real)lua_tonumber(L, 3);
  arg4 = (Ogre::Real)lua_tonumber(L, 4);
  (arg1)->lookAt(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_lookAt(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Camera, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Camera_lookAt__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Camera, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Camera_lookAt__SWIG_1(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Camera_lookAt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::Camera::lookAt(Ogre::Vector3 const &)\n"
    "    Ogre::Camera::lookAt(Ogre::Real,Ogre::Real,Ogre::Real)\n");
  lua_error(L);return 0;
}


static int _wrap_Camera_roll(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Camera *arg1 = (Ogre::Camera *) 0 ;
  Ogre::Radian *arg2 = 0 ;
  
  SWIG_check_num_args("Ogre::Camera::roll",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Camera::roll",1,"Ogre::Camera *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::Camera::roll",2,"Ogre::Radian const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Camera,0))){
    SWIG_fail_ptr("Camera_roll",1,SWIGTYPE_p_Ogre__Camera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Radian,0))){
    SWIG_fail_ptr("Camera_roll",2,SWIGTYPE_p_Ogre__Radian);
  }
  
  (arg1)->roll((Ogre::Radian const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_yaw(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Camera *arg1 = (Ogre::Camera *) 0 ;
  Ogre::Radian *arg2 = 0 ;
  
  SWIG_check_num_args("Ogre::Camera::yaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Camera::yaw",1,"Ogre::Camera *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::Camera::yaw",2,"Ogre::Radian const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Camera,0))){
    SWIG_fail_ptr("Camera_yaw",1,SWIGTYPE_p_Ogre__Camera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Radian,0))){
    SWIG_fail_ptr("Camera_yaw",2,SWIGTYPE_p_Ogre__Radian);
  }
  
  (arg1)->yaw((Ogre::Radian const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_pitch(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Camera *arg1 = (Ogre::Camera *) 0 ;
  Ogre::Radian *arg2 = 0 ;
  
  SWIG_check_num_args("Ogre::Camera::pitch",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Camera::pitch",1,"Ogre::Camera *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::Camera::pitch",2,"Ogre::Radian const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Camera,0))){
    SWIG_fail_ptr("Camera_pitch",1,SWIGTYPE_p_Ogre__Camera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Radian,0))){
    SWIG_fail_ptr("Camera_pitch",2,SWIGTYPE_p_Ogre__Radian);
  }
  
  (arg1)->pitch((Ogre::Radian const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_rotate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Camera *arg1 = (Ogre::Camera *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Ogre::Radian *arg3 = 0 ;
  
  SWIG_check_num_args("Ogre::Camera::rotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Camera::rotate",1,"Ogre::Camera *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::Camera::rotate",2,"Ogre::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Ogre::Camera::rotate",3,"Ogre::Radian const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Camera,0))){
    SWIG_fail_ptr("Camera_rotate",1,SWIGTYPE_p_Ogre__Camera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Camera_rotate",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Ogre__Radian,0))){
    SWIG_fail_ptr("Camera_rotate",3,SWIGTYPE_p_Ogre__Radian);
  }
  
  (arg1)->rotate((Ogre::Vector3 const &)*arg2,(Ogre::Radian const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_rotate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Camera *arg1 = (Ogre::Camera *) 0 ;
  Ogre::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Ogre::Camera::rotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Camera::rotate",1,"Ogre::Camera *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::Camera::rotate",2,"Ogre::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Camera,0))){
    SWIG_fail_ptr("Camera_rotate",1,SWIGTYPE_p_Ogre__Camera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Quaternion,0))){
    SWIG_fail_ptr("Camera_rotate",2,SWIGTYPE_p_Ogre__Quaternion);
  }
  
  (arg1)->rotate((Ogre::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_rotate(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Camera, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Camera_rotate__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Camera, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Ogre__Radian, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Camera_rotate__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Camera_rotate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::Camera::rotate(Ogre::Vector3 const &,Ogre::Radian const &)\n"
    "    Ogre::Camera::rotate(Ogre::Quaternion const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Camera_setFixedYawAxis__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Camera *arg1 = (Ogre::Camera *) 0 ;
  bool arg2 ;
  Ogre::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("Ogre::Camera::setFixedYawAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Camera::setFixedYawAxis",1,"Ogre::Camera *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::Camera::setFixedYawAxis",2,"bool");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Ogre::Camera::setFixedYawAxis",3,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Camera,0))){
    SWIG_fail_ptr("Camera_setFixedYawAxis",1,SWIGTYPE_p_Ogre__Camera);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Camera_setFixedYawAxis",3,SWIGTYPE_p_Ogre__Vector3);
  }
  
  (arg1)->setFixedYawAxis(arg2,(Ogre::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_setFixedYawAxis__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Camera *arg1 = (Ogre::Camera *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Ogre::Camera::setFixedYawAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Camera::setFixedYawAxis",1,"Ogre::Camera *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::Camera::setFixedYawAxis",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Camera,0))){
    SWIG_fail_ptr("Camera_setFixedYawAxis",1,SWIGTYPE_p_Ogre__Camera);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setFixedYawAxis(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_setFixedYawAxis(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Camera, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Camera_setFixedYawAxis__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Camera, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Camera_setFixedYawAxis__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Camera_setFixedYawAxis'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::Camera::setFixedYawAxis(bool,Ogre::Vector3 const &)\n"
    "    Ogre::Camera::setFixedYawAxis(bool)\n");
  lua_error(L);return 0;
}


static int _wrap_Camera_getOrientation(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Camera *arg1 = (Ogre::Camera *) 0 ;
  Ogre::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Ogre::Camera::getOrientation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Camera::getOrientation",1,"Ogre::Camera const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Camera,0))){
    SWIG_fail_ptr("Camera_getOrientation",1,SWIGTYPE_p_Ogre__Camera);
  }
  
  result = (Ogre::Quaternion *) &((Ogre::Camera const *)arg1)->getOrientation();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Quaternion,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_setOrientation(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Camera *arg1 = (Ogre::Camera *) 0 ;
  Ogre::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Ogre::Camera::setOrientation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Camera::setOrientation",1,"Ogre::Camera *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::Camera::setOrientation",2,"Ogre::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Camera,0))){
    SWIG_fail_ptr("Camera_setOrientation",1,SWIGTYPE_p_Ogre__Camera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Quaternion,0))){
    SWIG_fail_ptr("Camera_setOrientation",2,SWIGTYPE_p_Ogre__Quaternion);
  }
  
  (arg1)->setOrientation((Ogre::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_getViewport(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Camera *arg1 = (Ogre::Camera *) 0 ;
  Viewport *result = 0 ;
  
  SWIG_check_num_args("Ogre::Camera::getViewport",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Camera::getViewport",1,"Ogre::Camera const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Camera,0))){
    SWIG_fail_ptr("Camera_getViewport",1,SWIGTYPE_p_Ogre__Camera);
  }
  
  result = (Viewport *)((Ogre::Camera const *)arg1)->getViewport();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Viewport,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Camera(void *obj) {
Ogre::Camera *arg1 = (Ogre::Camera *) obj;
delete arg1;
}
static swig_lua_method swig_Ogre_Camera_methods[] = {
    {"getSceneManager", _wrap_Camera_getSceneManager}, 
    {"setAspectRatio", _wrap_Camera_setAspectRatio}, 
    {"setNearClipDistance", _wrap_Camera_setNearClipDistance}, 
    {"getNearClipDistance", _wrap_Camera_getNearClipDistance}, 
    {"setFarClipDistance", _wrap_Camera_setFarClipDistance}, 
    {"getFarClipDistance", _wrap_Camera_getFarClipDistance}, 
    {"setPolygonMode", _wrap_Camera_setPolygonMode}, 
    {"getPolygonMode", _wrap_Camera_getPolygonMode}, 
    {"setPosition", _wrap_Camera_setPosition}, 
    {"getPosition", _wrap_Camera_getPosition}, 
    {"move", _wrap_Camera_move}, 
    {"moveRelative", _wrap_Camera_moveRelative}, 
    {"setDirection", _wrap_Camera_setDirection}, 
    {"getDirection", _wrap_Camera_getDirection}, 
    {"getUp", _wrap_Camera_getUp}, 
    {"getRight", _wrap_Camera_getRight}, 
    {"lookAt", _wrap_Camera_lookAt}, 
    {"roll", _wrap_Camera_roll}, 
    {"yaw", _wrap_Camera_yaw}, 
    {"pitch", _wrap_Camera_pitch}, 
    {"rotate", _wrap_Camera_rotate}, 
    {"setFixedYawAxis", _wrap_Camera_setFixedYawAxis}, 
    {"getOrientation", _wrap_Camera_getOrientation}, 
    {"setOrientation", _wrap_Camera_setOrientation}, 
    {"getViewport", _wrap_Camera_getViewport}, 
    {0,0}
};
static swig_lua_attribute swig_Ogre_Camera_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Ogre_Camera_bases[] = {0};
static const char *swig_Ogre_Camera_base_names[] = {0};
static swig_lua_class _wrap_class_Ogre_Camera = { "Camera", &SWIGTYPE_p_Ogre__Camera,_wrap_new_Camera, swig_delete_Camera, swig_Ogre_Camera_methods, swig_Ogre_Camera_attributes, swig_Ogre_Camera_bases, swig_Ogre_Camera_base_names };

static void swig_delete_StaticGeometry(void *obj) {
Ogre::StaticGeometry *arg1 = (Ogre::StaticGeometry *) obj;
delete arg1;
}
static swig_lua_method swig_Ogre_StaticGeometry_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_Ogre_StaticGeometry_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Ogre_StaticGeometry_bases[] = {0};
static const char *swig_Ogre_StaticGeometry_base_names[] = {0};
static swig_lua_class _wrap_class_Ogre_StaticGeometry = { "StaticGeometry", &SWIGTYPE_p_Ogre__StaticGeometry,0, swig_delete_StaticGeometry, swig_Ogre_StaticGeometry_methods, swig_Ogre_StaticGeometry_attributes, swig_Ogre_StaticGeometry_bases, swig_Ogre_StaticGeometry_base_names };

static void swig_delete_InstancedGeometry(void *obj) {
Ogre::InstancedGeometry *arg1 = (Ogre::InstancedGeometry *) obj;
delete arg1;
}
static swig_lua_method swig_Ogre_InstancedGeometry_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_Ogre_InstancedGeometry_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Ogre_InstancedGeometry_bases[] = {0};
static const char *swig_Ogre_InstancedGeometry_base_names[] = {0};
static swig_lua_class _wrap_class_Ogre_InstancedGeometry = { "InstancedGeometry", &SWIGTYPE_p_Ogre__InstancedGeometry,0, swig_delete_InstancedGeometry, swig_Ogre_InstancedGeometry_methods, swig_Ogre_InstancedGeometry_attributes, swig_Ogre_InstancedGeometry_bases, swig_Ogre_InstancedGeometry_base_names };

static void swig_delete_Renderable(void *obj) {
Ogre::Renderable *arg1 = (Ogre::Renderable *) obj;
delete arg1;
}
static swig_lua_method swig_Ogre_Renderable_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_Ogre_Renderable_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Ogre_Renderable_bases[] = {0};
static const char *swig_Ogre_Renderable_base_names[] = {0};
static swig_lua_class _wrap_class_Ogre_Renderable = { "Renderable", &SWIGTYPE_p_Ogre__Renderable,0, swig_delete_Renderable, swig_Ogre_Renderable_methods, swig_Ogre_Renderable_attributes, swig_Ogre_Renderable_bases, swig_Ogre_Renderable_base_names };

static void swig_delete_RibbonTrail(void *obj) {
Ogre::RibbonTrail *arg1 = (Ogre::RibbonTrail *) obj;
delete arg1;
}
static swig_lua_method swig_Ogre_RibbonTrail_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_Ogre_RibbonTrail_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Ogre_RibbonTrail_bases[] = {0};
static const char *swig_Ogre_RibbonTrail_base_names[] = {0};
static swig_lua_class _wrap_class_Ogre_RibbonTrail = { "RibbonTrail", &SWIGTYPE_p_Ogre__RibbonTrail,0, swig_delete_RibbonTrail, swig_Ogre_RibbonTrail_methods, swig_Ogre_RibbonTrail_attributes, swig_Ogre_RibbonTrail_bases, swig_Ogre_RibbonTrail_base_names };

static void swig_delete_RenderTarget(void *obj) {
Ogre::RenderTarget *arg1 = (Ogre::RenderTarget *) obj;
delete arg1;
}
static swig_lua_method swig_Ogre_RenderTarget_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_Ogre_RenderTarget_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Ogre_RenderTarget_bases[] = {0};
static const char *swig_Ogre_RenderTarget_base_names[] = {0};
static swig_lua_class _wrap_class_Ogre_RenderTarget = { "RenderTarget", &SWIGTYPE_p_Ogre__RenderTarget,0, swig_delete_RenderTarget, swig_Ogre_RenderTarget_methods, swig_Ogre_RenderTarget_attributes, swig_Ogre_RenderTarget_bases, swig_Ogre_RenderTarget_base_names };

static int _wrap_RenderWindow_setFullscreen(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::RenderWindow *arg1 = (Ogre::RenderWindow *) 0 ;
  bool arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  
  SWIG_check_num_args("Ogre::RenderWindow::setFullscreen",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::RenderWindow::setFullscreen",1,"Ogre::RenderWindow *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::RenderWindow::setFullscreen",2,"bool");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ogre::RenderWindow::setFullscreen",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Ogre::RenderWindow::setFullscreen",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__RenderWindow,0))){
    SWIG_fail_ptr("RenderWindow_setFullscreen",1,SWIGTYPE_p_Ogre__RenderWindow);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  (arg1)->setFullscreen(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderWindow_destroy(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::RenderWindow *arg1 = (Ogre::RenderWindow *) 0 ;
  
  SWIG_check_num_args("Ogre::RenderWindow::destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::RenderWindow::destroy",1,"Ogre::RenderWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__RenderWindow,0))){
    SWIG_fail_ptr("RenderWindow_destroy",1,SWIGTYPE_p_Ogre__RenderWindow);
  }
  
  (arg1)->destroy();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderWindow_resize(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::RenderWindow *arg1 = (Ogre::RenderWindow *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("Ogre::RenderWindow::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::RenderWindow::resize",1,"Ogre::RenderWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::RenderWindow::resize",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ogre::RenderWindow::resize",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__RenderWindow,0))){
    SWIG_fail_ptr("RenderWindow_resize",1,SWIGTYPE_p_Ogre__RenderWindow);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderWindow_windowMovedOrResized(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::RenderWindow *arg1 = (Ogre::RenderWindow *) 0 ;
  
  SWIG_check_num_args("Ogre::RenderWindow::windowMovedOrResized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::RenderWindow::windowMovedOrResized",1,"Ogre::RenderWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__RenderWindow,0))){
    SWIG_fail_ptr("RenderWindow_windowMovedOrResized",1,SWIGTYPE_p_Ogre__RenderWindow);
  }
  
  (arg1)->windowMovedOrResized();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderWindow_reposition(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::RenderWindow *arg1 = (Ogre::RenderWindow *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("Ogre::RenderWindow::reposition",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::RenderWindow::reposition",1,"Ogre::RenderWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::RenderWindow::reposition",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ogre::RenderWindow::reposition",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__RenderWindow,0))){
    SWIG_fail_ptr("RenderWindow_reposition",1,SWIGTYPE_p_Ogre__RenderWindow);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->reposition(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderWindow_isVisible(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::RenderWindow *arg1 = (Ogre::RenderWindow *) 0 ;
  bool result;
  
  SWIG_check_num_args("Ogre::RenderWindow::isVisible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::RenderWindow::isVisible",1,"Ogre::RenderWindow const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__RenderWindow,0))){
    SWIG_fail_ptr("RenderWindow_isVisible",1,SWIGTYPE_p_Ogre__RenderWindow);
  }
  
  result = (bool)((Ogre::RenderWindow const *)arg1)->isVisible();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderWindow_setVisible(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::RenderWindow *arg1 = (Ogre::RenderWindow *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Ogre::RenderWindow::setVisible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::RenderWindow::setVisible",1,"Ogre::RenderWindow *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::RenderWindow::setVisible",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__RenderWindow,0))){
    SWIG_fail_ptr("RenderWindow_setVisible",1,SWIGTYPE_p_Ogre__RenderWindow);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setVisible(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderWindow_isHidden(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::RenderWindow *arg1 = (Ogre::RenderWindow *) 0 ;
  bool result;
  
  SWIG_check_num_args("Ogre::RenderWindow::isHidden",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::RenderWindow::isHidden",1,"Ogre::RenderWindow const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__RenderWindow,0))){
    SWIG_fail_ptr("RenderWindow_isHidden",1,SWIGTYPE_p_Ogre__RenderWindow);
  }
  
  result = (bool)((Ogre::RenderWindow const *)arg1)->isHidden();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderWindow_setHidden(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::RenderWindow *arg1 = (Ogre::RenderWindow *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Ogre::RenderWindow::setHidden",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::RenderWindow::setHidden",1,"Ogre::RenderWindow *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::RenderWindow::setHidden",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__RenderWindow,0))){
    SWIG_fail_ptr("RenderWindow_setHidden",1,SWIGTYPE_p_Ogre__RenderWindow);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setHidden(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderWindow_setVSyncEnabled(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::RenderWindow *arg1 = (Ogre::RenderWindow *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Ogre::RenderWindow::setVSyncEnabled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::RenderWindow::setVSyncEnabled",1,"Ogre::RenderWindow *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::RenderWindow::setVSyncEnabled",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__RenderWindow,0))){
    SWIG_fail_ptr("RenderWindow_setVSyncEnabled",1,SWIGTYPE_p_Ogre__RenderWindow);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setVSyncEnabled(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderWindow_isVSyncEnabled(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::RenderWindow *arg1 = (Ogre::RenderWindow *) 0 ;
  bool result;
  
  SWIG_check_num_args("Ogre::RenderWindow::isVSyncEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::RenderWindow::isVSyncEnabled",1,"Ogre::RenderWindow const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__RenderWindow,0))){
    SWIG_fail_ptr("RenderWindow_isVSyncEnabled",1,SWIGTYPE_p_Ogre__RenderWindow);
  }
  
  result = (bool)((Ogre::RenderWindow const *)arg1)->isVSyncEnabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderWindow_setVSyncInterval(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::RenderWindow *arg1 = (Ogre::RenderWindow *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Ogre::RenderWindow::setVSyncInterval",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::RenderWindow::setVSyncInterval",1,"Ogre::RenderWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::RenderWindow::setVSyncInterval",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__RenderWindow,0))){
    SWIG_fail_ptr("RenderWindow_setVSyncInterval",1,SWIGTYPE_p_Ogre__RenderWindow);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setVSyncInterval(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderWindow_getVSyncInterval(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::RenderWindow *arg1 = (Ogre::RenderWindow *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Ogre::RenderWindow::getVSyncInterval",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::RenderWindow::getVSyncInterval",1,"Ogre::RenderWindow const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__RenderWindow,0))){
    SWIG_fail_ptr("RenderWindow_getVSyncInterval",1,SWIGTYPE_p_Ogre__RenderWindow);
  }
  
  result = (unsigned int)((Ogre::RenderWindow const *)arg1)->getVSyncInterval();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderWindow_isActive(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::RenderWindow *arg1 = (Ogre::RenderWindow *) 0 ;
  bool result;
  
  SWIG_check_num_args("Ogre::RenderWindow::isActive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::RenderWindow::isActive",1,"Ogre::RenderWindow const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__RenderWindow,0))){
    SWIG_fail_ptr("RenderWindow_isActive",1,SWIGTYPE_p_Ogre__RenderWindow);
  }
  
  result = (bool)((Ogre::RenderWindow const *)arg1)->isActive();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderWindow_isClosed(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::RenderWindow *arg1 = (Ogre::RenderWindow *) 0 ;
  bool result;
  
  SWIG_check_num_args("Ogre::RenderWindow::isClosed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::RenderWindow::isClosed",1,"Ogre::RenderWindow const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__RenderWindow,0))){
    SWIG_fail_ptr("RenderWindow_isClosed",1,SWIGTYPE_p_Ogre__RenderWindow);
  }
  
  result = (bool)((Ogre::RenderWindow const *)arg1)->isClosed();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderWindow_isPrimary(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::RenderWindow *arg1 = (Ogre::RenderWindow *) 0 ;
  bool result;
  
  SWIG_check_num_args("Ogre::RenderWindow::isPrimary",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::RenderWindow::isPrimary",1,"Ogre::RenderWindow const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__RenderWindow,0))){
    SWIG_fail_ptr("RenderWindow_isPrimary",1,SWIGTYPE_p_Ogre__RenderWindow);
  }
  
  result = (bool)((Ogre::RenderWindow const *)arg1)->isPrimary();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderWindow_isFullScreen(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::RenderWindow *arg1 = (Ogre::RenderWindow *) 0 ;
  bool result;
  
  SWIG_check_num_args("Ogre::RenderWindow::isFullScreen",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::RenderWindow::isFullScreen",1,"Ogre::RenderWindow const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__RenderWindow,0))){
    SWIG_fail_ptr("RenderWindow_isFullScreen",1,SWIGTYPE_p_Ogre__RenderWindow);
  }
  
  result = (bool)((Ogre::RenderWindow const *)arg1)->isFullScreen();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderWindow_getMetrics(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::RenderWindow *arg1 = (Ogre::RenderWindow *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  int *arg5 = 0 ;
  int *arg6 = 0 ;
  
  SWIG_check_num_args("Ogre::RenderWindow::getMetrics",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::RenderWindow::getMetrics",1,"Ogre::RenderWindow *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::RenderWindow::getMetrics",2,"unsigned int &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Ogre::RenderWindow::getMetrics",3,"unsigned int &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Ogre::RenderWindow::getMetrics",4,"unsigned int &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Ogre::RenderWindow::getMetrics",5,"int &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("Ogre::RenderWindow::getMetrics",6,"int &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__RenderWindow,0))){
    SWIG_fail_ptr("RenderWindow_getMetrics",1,SWIGTYPE_p_Ogre__RenderWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("RenderWindow_getMetrics",2,SWIGTYPE_p_unsigned_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("RenderWindow_getMetrics",3,SWIGTYPE_p_unsigned_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("RenderWindow_getMetrics",4,SWIGTYPE_p_unsigned_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("RenderWindow_getMetrics",5,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("RenderWindow_getMetrics",6,SWIGTYPE_p_int);
  }
  
  (arg1)->getMetrics(*arg2,*arg3,*arg4,*arg5,*arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderWindow_suggestPixelFormat(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::RenderWindow *arg1 = (Ogre::RenderWindow *) 0 ;
  Ogre::PixelFormat result;
  
  SWIG_check_num_args("Ogre::RenderWindow::suggestPixelFormat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::RenderWindow::suggestPixelFormat",1,"Ogre::RenderWindow const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__RenderWindow,0))){
    SWIG_fail_ptr("RenderWindow_suggestPixelFormat",1,SWIGTYPE_p_Ogre__RenderWindow);
  }
  
  result = (Ogre::PixelFormat)((Ogre::RenderWindow const *)arg1)->suggestPixelFormat();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderWindow_isDeactivatedOnFocusChange(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::RenderWindow *arg1 = (Ogre::RenderWindow *) 0 ;
  bool result;
  
  SWIG_check_num_args("Ogre::RenderWindow::isDeactivatedOnFocusChange",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::RenderWindow::isDeactivatedOnFocusChange",1,"Ogre::RenderWindow const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__RenderWindow,0))){
    SWIG_fail_ptr("RenderWindow_isDeactivatedOnFocusChange",1,SWIGTYPE_p_Ogre__RenderWindow);
  }
  
  result = (bool)((Ogre::RenderWindow const *)arg1)->isDeactivatedOnFocusChange();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderWindow_setDeactivateOnFocusChange(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::RenderWindow *arg1 = (Ogre::RenderWindow *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Ogre::RenderWindow::setDeactivateOnFocusChange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::RenderWindow::setDeactivateOnFocusChange",1,"Ogre::RenderWindow *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::RenderWindow::setDeactivateOnFocusChange",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__RenderWindow,0))){
    SWIG_fail_ptr("RenderWindow_setDeactivateOnFocusChange",1,SWIGTYPE_p_Ogre__RenderWindow);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setDeactivateOnFocusChange(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_Ogre_RenderWindow_methods[] = {
    {"setFullscreen", _wrap_RenderWindow_setFullscreen}, 
    {"destroy", _wrap_RenderWindow_destroy}, 
    {"resize", _wrap_RenderWindow_resize}, 
    {"windowMovedOrResized", _wrap_RenderWindow_windowMovedOrResized}, 
    {"reposition", _wrap_RenderWindow_reposition}, 
    {"isVisible", _wrap_RenderWindow_isVisible}, 
    {"setVisible", _wrap_RenderWindow_setVisible}, 
    {"isHidden", _wrap_RenderWindow_isHidden}, 
    {"setHidden", _wrap_RenderWindow_setHidden}, 
    {"setVSyncEnabled", _wrap_RenderWindow_setVSyncEnabled}, 
    {"isVSyncEnabled", _wrap_RenderWindow_isVSyncEnabled}, 
    {"setVSyncInterval", _wrap_RenderWindow_setVSyncInterval}, 
    {"getVSyncInterval", _wrap_RenderWindow_getVSyncInterval}, 
    {"isActive", _wrap_RenderWindow_isActive}, 
    {"isClosed", _wrap_RenderWindow_isClosed}, 
    {"isPrimary", _wrap_RenderWindow_isPrimary}, 
    {"isFullScreen", _wrap_RenderWindow_isFullScreen}, 
    {"getMetrics", _wrap_RenderWindow_getMetrics}, 
    {"suggestPixelFormat", _wrap_RenderWindow_suggestPixelFormat}, 
    {"isDeactivatedOnFocusChange", _wrap_RenderWindow_isDeactivatedOnFocusChange}, 
    {"setDeactivateOnFocusChange", _wrap_RenderWindow_setDeactivateOnFocusChange}, 
    {0,0}
};
static swig_lua_attribute swig_Ogre_RenderWindow_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Ogre_RenderWindow_bases[] = {0,0};
static const char *swig_Ogre_RenderWindow_base_names[] = {"Ogre::RenderTarget *",0};
static swig_lua_class _wrap_class_Ogre_RenderWindow = { "RenderWindow", &SWIGTYPE_p_Ogre__RenderWindow,0,0, swig_Ogre_RenderWindow_methods, swig_Ogre_RenderWindow_attributes, swig_Ogre_RenderWindow_bases, swig_Ogre_RenderWindow_base_names };

static int _wrap_Billboard_mPosition_set(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Billboard *arg1 = (Ogre::Billboard *) 0 ;
  Ogre::Vector3 *arg2 = (Ogre::Vector3 *) 0 ;
  
  SWIG_check_num_args("Ogre::Billboard::mPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Billboard::mPosition",1,"Ogre::Billboard *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Ogre::Billboard::mPosition",2,"Ogre::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Billboard,0))){
    SWIG_fail_ptr("Billboard_mPosition_set",1,SWIGTYPE_p_Ogre__Billboard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Billboard_mPosition_set",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  if (arg1) (arg1)->mPosition = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Billboard_mPosition_get(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Billboard *arg1 = (Ogre::Billboard *) 0 ;
  Ogre::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Ogre::Billboard::mPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Billboard::mPosition",1,"Ogre::Billboard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Billboard,0))){
    SWIG_fail_ptr("Billboard_mPosition_get",1,SWIGTYPE_p_Ogre__Billboard);
  }
  
  result = (Ogre::Vector3 *)& ((arg1)->mPosition);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Billboard_mDirection_set(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Billboard *arg1 = (Ogre::Billboard *) 0 ;
  Ogre::Vector3 *arg2 = (Ogre::Vector3 *) 0 ;
  
  SWIG_check_num_args("Ogre::Billboard::mDirection",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Billboard::mDirection",1,"Ogre::Billboard *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Ogre::Billboard::mDirection",2,"Ogre::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Billboard,0))){
    SWIG_fail_ptr("Billboard_mDirection_set",1,SWIGTYPE_p_Ogre__Billboard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Billboard_mDirection_set",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  if (arg1) (arg1)->mDirection = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Billboard_mDirection_get(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Billboard *arg1 = (Ogre::Billboard *) 0 ;
  Ogre::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Ogre::Billboard::mDirection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Billboard::mDirection",1,"Ogre::Billboard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Billboard,0))){
    SWIG_fail_ptr("Billboard_mDirection_get",1,SWIGTYPE_p_Ogre__Billboard);
  }
  
  result = (Ogre::Vector3 *)& ((arg1)->mDirection);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Billboard_mParentSet_set(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Billboard *arg1 = (Ogre::Billboard *) 0 ;
  BillboardSet *arg2 = (BillboardSet *) 0 ;
  
  SWIG_check_num_args("Ogre::Billboard::mParentSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Billboard::mParentSet",1,"Ogre::Billboard *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Ogre::Billboard::mParentSet",2,"BillboardSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Billboard,0))){
    SWIG_fail_ptr("Billboard_mParentSet_set",1,SWIGTYPE_p_Ogre__Billboard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BillboardSet,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("Billboard_mParentSet_set",2,SWIGTYPE_p_BillboardSet);
  }
  
  if (arg1) (arg1)->mParentSet = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Billboard_mParentSet_get(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Billboard *arg1 = (Ogre::Billboard *) 0 ;
  BillboardSet *result = 0 ;
  
  SWIG_check_num_args("Ogre::Billboard::mParentSet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Billboard::mParentSet",1,"Ogre::Billboard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Billboard,0))){
    SWIG_fail_ptr("Billboard_mParentSet_get",1,SWIGTYPE_p_Ogre__Billboard);
  }
  
  result = (BillboardSet *) ((arg1)->mParentSet);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BillboardSet,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Billboard_mColour_set(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Billboard *arg1 = (Ogre::Billboard *) 0 ;
  Ogre::ColourValue *arg2 = (Ogre::ColourValue *) 0 ;
  
  SWIG_check_num_args("Ogre::Billboard::mColour",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Billboard::mColour",1,"Ogre::Billboard *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Ogre::Billboard::mColour",2,"Ogre::ColourValue *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Billboard,0))){
    SWIG_fail_ptr("Billboard_mColour_set",1,SWIGTYPE_p_Ogre__Billboard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__ColourValue,0))){
    SWIG_fail_ptr("Billboard_mColour_set",2,SWIGTYPE_p_Ogre__ColourValue);
  }
  
  if (arg1) (arg1)->mColour = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Billboard_mColour_get(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Billboard *arg1 = (Ogre::Billboard *) 0 ;
  Ogre::ColourValue *result = 0 ;
  
  SWIG_check_num_args("Ogre::Billboard::mColour",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Billboard::mColour",1,"Ogre::Billboard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Billboard,0))){
    SWIG_fail_ptr("Billboard_mColour_get",1,SWIGTYPE_p_Ogre__Billboard);
  }
  
  result = (Ogre::ColourValue *)& ((arg1)->mColour);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__ColourValue,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Billboard_mRotation_set(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Billboard *arg1 = (Ogre::Billboard *) 0 ;
  Ogre::Radian *arg2 = (Ogre::Radian *) 0 ;
  
  SWIG_check_num_args("Ogre::Billboard::mRotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Billboard::mRotation",1,"Ogre::Billboard *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Ogre::Billboard::mRotation",2,"Ogre::Radian *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Billboard,0))){
    SWIG_fail_ptr("Billboard_mRotation_set",1,SWIGTYPE_p_Ogre__Billboard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Radian,0))){
    SWIG_fail_ptr("Billboard_mRotation_set",2,SWIGTYPE_p_Ogre__Radian);
  }
  
  if (arg1) (arg1)->mRotation = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Billboard_mRotation_get(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Billboard *arg1 = (Ogre::Billboard *) 0 ;
  Ogre::Radian *result = 0 ;
  
  SWIG_check_num_args("Ogre::Billboard::mRotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Billboard::mRotation",1,"Ogre::Billboard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Billboard,0))){
    SWIG_fail_ptr("Billboard_mRotation_get",1,SWIGTYPE_p_Ogre__Billboard);
  }
  
  result = (Ogre::Radian *)& ((arg1)->mRotation);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Radian,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Billboard__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Billboard *result = 0 ;
  
  SWIG_check_num_args("Ogre::Billboard::Billboard",0,0)
  result = (Ogre::Billboard *)new Ogre::Billboard();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Billboard,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Billboard__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector3 *arg1 = 0 ;
  BillboardSet *arg2 = (BillboardSet *) 0 ;
  Ogre::ColourValue *arg3 = 0 ;
  Ogre::Billboard *result = 0 ;
  
  SWIG_check_num_args("Ogre::Billboard::Billboard",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ogre::Billboard::Billboard",1,"Ogre::Vector3 const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Ogre::Billboard::Billboard",2,"BillboardSet *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Ogre::Billboard::Billboard",3,"Ogre::ColourValue const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("new_Billboard",1,SWIGTYPE_p_Ogre__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BillboardSet,0))){
    SWIG_fail_ptr("new_Billboard",2,SWIGTYPE_p_BillboardSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Ogre__ColourValue,0))){
    SWIG_fail_ptr("new_Billboard",3,SWIGTYPE_p_Ogre__ColourValue);
  }
  
  result = (Ogre::Billboard *)new Ogre::Billboard((Ogre::Vector3 const &)*arg1,arg2,(Ogre::ColourValue const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Billboard,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Billboard__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector3 *arg1 = 0 ;
  BillboardSet *arg2 = (BillboardSet *) 0 ;
  Ogre::Billboard *result = 0 ;
  
  SWIG_check_num_args("Ogre::Billboard::Billboard",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ogre::Billboard::Billboard",1,"Ogre::Vector3 const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Ogre::Billboard::Billboard",2,"BillboardSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("new_Billboard",1,SWIGTYPE_p_Ogre__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BillboardSet,0))){
    SWIG_fail_ptr("new_Billboard",2,SWIGTYPE_p_BillboardSet);
  }
  
  result = (Ogre::Billboard *)new Ogre::Billboard((Ogre::Vector3 const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Billboard,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Billboard(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Billboard__SWIG_0(L);
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_BillboardSet, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Billboard__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_BillboardSet, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Ogre__ColourValue, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_Billboard__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Billboard'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::Billboard::Billboard()\n"
    "    Ogre::Billboard::Billboard(Ogre::Vector3 const &,BillboardSet *,Ogre::ColourValue const &)\n"
    "    Ogre::Billboard::Billboard(Ogre::Vector3 const &,BillboardSet *)\n");
  lua_error(L);return 0;
}


static int _wrap_Billboard_getRotation(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Billboard *arg1 = (Ogre::Billboard *) 0 ;
  Ogre::Radian *result = 0 ;
  
  SWIG_check_num_args("Ogre::Billboard::getRotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Billboard::getRotation",1,"Ogre::Billboard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Billboard,0))){
    SWIG_fail_ptr("Billboard_getRotation",1,SWIGTYPE_p_Ogre__Billboard);
  }
  
  result = (Ogre::Radian *) &((Ogre::Billboard const *)arg1)->getRotation();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Radian,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Billboard_setRotation(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Billboard *arg1 = (Ogre::Billboard *) 0 ;
  Ogre::Radian *arg2 = 0 ;
  
  SWIG_check_num_args("Ogre::Billboard::setRotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Billboard::setRotation",1,"Ogre::Billboard *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::Billboard::setRotation",2,"Ogre::Radian const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Billboard,0))){
    SWIG_fail_ptr("Billboard_setRotation",1,SWIGTYPE_p_Ogre__Billboard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Radian,0))){
    SWIG_fail_ptr("Billboard_setRotation",2,SWIGTYPE_p_Ogre__Radian);
  }
  
  (arg1)->setRotation((Ogre::Radian const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Billboard_setPosition__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Billboard *arg1 = (Ogre::Billboard *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Ogre::Billboard::setPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Billboard::setPosition",1,"Ogre::Billboard *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::Billboard::setPosition",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Billboard,0))){
    SWIG_fail_ptr("Billboard_setPosition",1,SWIGTYPE_p_Ogre__Billboard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Billboard_setPosition",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  (arg1)->setPosition((Ogre::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Billboard_setPosition__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Billboard *arg1 = (Ogre::Billboard *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::Real arg4 ;
  
  SWIG_check_num_args("Ogre::Billboard::setPosition",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Billboard::setPosition",1,"Ogre::Billboard *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::Billboard::setPosition",2,"Ogre::Real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ogre::Billboard::setPosition",3,"Ogre::Real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Ogre::Billboard::setPosition",4,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Billboard,0))){
    SWIG_fail_ptr("Billboard_setPosition",1,SWIGTYPE_p_Ogre__Billboard);
  }
  
  arg2 = (Ogre::Real)lua_tonumber(L, 2);
  arg3 = (Ogre::Real)lua_tonumber(L, 3);
  arg4 = (Ogre::Real)lua_tonumber(L, 4);
  (arg1)->setPosition(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Billboard_setPosition(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Billboard, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Billboard_setPosition__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Billboard, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Billboard_setPosition__SWIG_1(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Billboard_setPosition'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::Billboard::setPosition(Ogre::Vector3 const &)\n"
    "    Ogre::Billboard::setPosition(Ogre::Real,Ogre::Real,Ogre::Real)\n");
  lua_error(L);return 0;
}


static int _wrap_Billboard_getPosition(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Billboard *arg1 = (Ogre::Billboard *) 0 ;
  Ogre::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Ogre::Billboard::getPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Billboard::getPosition",1,"Ogre::Billboard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Billboard,0))){
    SWIG_fail_ptr("Billboard_getPosition",1,SWIGTYPE_p_Ogre__Billboard);
  }
  
  result = (Ogre::Vector3 *) &((Ogre::Billboard const *)arg1)->getPosition();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Billboard_setDimensions(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Billboard *arg1 = (Ogre::Billboard *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  
  SWIG_check_num_args("Ogre::Billboard::setDimensions",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Billboard::setDimensions",1,"Ogre::Billboard *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::Billboard::setDimensions",2,"Ogre::Real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ogre::Billboard::setDimensions",3,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Billboard,0))){
    SWIG_fail_ptr("Billboard_setDimensions",1,SWIGTYPE_p_Ogre__Billboard);
  }
  
  arg2 = (Ogre::Real)lua_tonumber(L, 2);
  arg3 = (Ogre::Real)lua_tonumber(L, 3);
  (arg1)->setDimensions(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Billboard_resetDimensions(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Billboard *arg1 = (Ogre::Billboard *) 0 ;
  
  SWIG_check_num_args("Ogre::Billboard::resetDimensions",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Billboard::resetDimensions",1,"Ogre::Billboard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Billboard,0))){
    SWIG_fail_ptr("Billboard_resetDimensions",1,SWIGTYPE_p_Ogre__Billboard);
  }
  
  (arg1)->resetDimensions();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Billboard_setColour(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Billboard *arg1 = (Ogre::Billboard *) 0 ;
  Ogre::ColourValue *arg2 = 0 ;
  
  SWIG_check_num_args("Ogre::Billboard::setColour",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Billboard::setColour",1,"Ogre::Billboard *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::Billboard::setColour",2,"Ogre::ColourValue const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Billboard,0))){
    SWIG_fail_ptr("Billboard_setColour",1,SWIGTYPE_p_Ogre__Billboard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__ColourValue,0))){
    SWIG_fail_ptr("Billboard_setColour",2,SWIGTYPE_p_Ogre__ColourValue);
  }
  
  (arg1)->setColour((Ogre::ColourValue const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Billboard_getColour(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Billboard *arg1 = (Ogre::Billboard *) 0 ;
  Ogre::ColourValue *result = 0 ;
  
  SWIG_check_num_args("Ogre::Billboard::getColour",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Billboard::getColour",1,"Ogre::Billboard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Billboard,0))){
    SWIG_fail_ptr("Billboard_getColour",1,SWIGTYPE_p_Ogre__Billboard);
  }
  
  result = (Ogre::ColourValue *) &((Ogre::Billboard const *)arg1)->getColour();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__ColourValue,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Billboard_hasOwnDimensions(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Billboard *arg1 = (Ogre::Billboard *) 0 ;
  bool result;
  
  SWIG_check_num_args("Ogre::Billboard::hasOwnDimensions",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Billboard::hasOwnDimensions",1,"Ogre::Billboard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Billboard,0))){
    SWIG_fail_ptr("Billboard_hasOwnDimensions",1,SWIGTYPE_p_Ogre__Billboard);
  }
  
  result = (bool)((Ogre::Billboard const *)arg1)->hasOwnDimensions();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Billboard_getOwnWidth(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Billboard *arg1 = (Ogre::Billboard *) 0 ;
  Ogre::Real result;
  
  SWIG_check_num_args("Ogre::Billboard::getOwnWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Billboard::getOwnWidth",1,"Ogre::Billboard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Billboard,0))){
    SWIG_fail_ptr("Billboard_getOwnWidth",1,SWIGTYPE_p_Ogre__Billboard);
  }
  
  result = (Ogre::Real)((Ogre::Billboard const *)arg1)->getOwnWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Billboard_getOwnHeight(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Billboard *arg1 = (Ogre::Billboard *) 0 ;
  Ogre::Real result;
  
  SWIG_check_num_args("Ogre::Billboard::getOwnHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Billboard::getOwnHeight",1,"Ogre::Billboard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Billboard,0))){
    SWIG_fail_ptr("Billboard_getOwnHeight",1,SWIGTYPE_p_Ogre__Billboard);
  }
  
  result = (Ogre::Real)((Ogre::Billboard const *)arg1)->getOwnHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Billboard__notifyOwner(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Billboard *arg1 = (Ogre::Billboard *) 0 ;
  BillboardSet *arg2 = (BillboardSet *) 0 ;
  
  SWIG_check_num_args("Ogre::Billboard::_notifyOwner",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Billboard::_notifyOwner",1,"Ogre::Billboard *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Ogre::Billboard::_notifyOwner",2,"BillboardSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Billboard,0))){
    SWIG_fail_ptr("Billboard__notifyOwner",1,SWIGTYPE_p_Ogre__Billboard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BillboardSet,0))){
    SWIG_fail_ptr("Billboard__notifyOwner",2,SWIGTYPE_p_BillboardSet);
  }
  
  (arg1)->_notifyOwner(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Billboard_isUseTexcoordRect(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Billboard *arg1 = (Ogre::Billboard *) 0 ;
  bool result;
  
  SWIG_check_num_args("Ogre::Billboard::isUseTexcoordRect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Billboard::isUseTexcoordRect",1,"Ogre::Billboard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Billboard,0))){
    SWIG_fail_ptr("Billboard_isUseTexcoordRect",1,SWIGTYPE_p_Ogre__Billboard);
  }
  
  result = (bool)((Ogre::Billboard const *)arg1)->isUseTexcoordRect();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Billboard_setTexcoordIndex(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Billboard *arg1 = (Ogre::Billboard *) 0 ;
  Ogre::uint16 arg2 ;
  Ogre::uint16 *argp2 ;
  
  SWIG_check_num_args("Ogre::Billboard::setTexcoordIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Billboard::setTexcoordIndex",1,"Ogre::Billboard *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::Billboard::setTexcoordIndex",2,"Ogre::uint16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Billboard,0))){
    SWIG_fail_ptr("Billboard_setTexcoordIndex",1,SWIGTYPE_p_Ogre__Billboard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Ogre__uint16,0))){
    SWIG_fail_ptr("Billboard_setTexcoordIndex",2,SWIGTYPE_p_Ogre__uint16);
  }
  arg2 = *argp2;
  
  (arg1)->setTexcoordIndex(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Billboard_getTexcoordIndex(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Billboard *arg1 = (Ogre::Billboard *) 0 ;
  Ogre::uint16 result;
  
  SWIG_check_num_args("Ogre::Billboard::getTexcoordIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Billboard::getTexcoordIndex",1,"Ogre::Billboard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Billboard,0))){
    SWIG_fail_ptr("Billboard_getTexcoordIndex",1,SWIGTYPE_p_Ogre__Billboard);
  }
  
  result = ((Ogre::Billboard const *)arg1)->getTexcoordIndex();
  {
    Ogre::uint16 * resultptr = new Ogre::uint16((const Ogre::uint16 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__uint16,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Billboard_setTexcoordRect(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Billboard *arg1 = (Ogre::Billboard *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::Real arg4 ;
  Ogre::Real arg5 ;
  
  SWIG_check_num_args("Ogre::Billboard::setTexcoordRect",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Billboard::setTexcoordRect",1,"Ogre::Billboard *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::Billboard::setTexcoordRect",2,"Ogre::Real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ogre::Billboard::setTexcoordRect",3,"Ogre::Real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Ogre::Billboard::setTexcoordRect",4,"Ogre::Real");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Ogre::Billboard::setTexcoordRect",5,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Billboard,0))){
    SWIG_fail_ptr("Billboard_setTexcoordRect",1,SWIGTYPE_p_Ogre__Billboard);
  }
  
  arg2 = (Ogre::Real)lua_tonumber(L, 2);
  arg3 = (Ogre::Real)lua_tonumber(L, 3);
  arg4 = (Ogre::Real)lua_tonumber(L, 4);
  arg5 = (Ogre::Real)lua_tonumber(L, 5);
  (arg1)->setTexcoordRect(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Billboard(void *obj) {
Ogre::Billboard *arg1 = (Ogre::Billboard *) obj;
delete arg1;
}
static swig_lua_method swig_Ogre_Billboard_methods[] = {
    {"getRotation", _wrap_Billboard_getRotation}, 
    {"setRotation", _wrap_Billboard_setRotation}, 
    {"setPosition", _wrap_Billboard_setPosition}, 
    {"getPosition", _wrap_Billboard_getPosition}, 
    {"setDimensions", _wrap_Billboard_setDimensions}, 
    {"resetDimensions", _wrap_Billboard_resetDimensions}, 
    {"setColour", _wrap_Billboard_setColour}, 
    {"getColour", _wrap_Billboard_getColour}, 
    {"hasOwnDimensions", _wrap_Billboard_hasOwnDimensions}, 
    {"getOwnWidth", _wrap_Billboard_getOwnWidth}, 
    {"getOwnHeight", _wrap_Billboard_getOwnHeight}, 
    {"_notifyOwner", _wrap_Billboard__notifyOwner}, 
    {"isUseTexcoordRect", _wrap_Billboard_isUseTexcoordRect}, 
    {"setTexcoordIndex", _wrap_Billboard_setTexcoordIndex}, 
    {"getTexcoordIndex", _wrap_Billboard_getTexcoordIndex}, 
    {"setTexcoordRect", _wrap_Billboard_setTexcoordRect}, 
    {0,0}
};
static swig_lua_attribute swig_Ogre_Billboard_attributes[] = {
    { "mPosition", _wrap_Billboard_mPosition_get, _wrap_Billboard_mPosition_set},
    { "mDirection", _wrap_Billboard_mDirection_get, _wrap_Billboard_mDirection_set},
    { "mParentSet", _wrap_Billboard_mParentSet_get, _wrap_Billboard_mParentSet_set},
    { "mColour", _wrap_Billboard_mColour_get, _wrap_Billboard_mColour_set},
    { "mRotation", _wrap_Billboard_mRotation_get, _wrap_Billboard_mRotation_set},
    {0,0,0}
};
static swig_lua_class *swig_Ogre_Billboard_bases[] = {0};
static const char *swig_Ogre_Billboard_base_names[] = {0};
static swig_lua_class _wrap_class_Ogre_Billboard = { "Billboard", &SWIGTYPE_p_Ogre__Billboard,_wrap_new_Billboard, swig_delete_Billboard, swig_Ogre_Billboard_methods, swig_Ogre_Billboard_attributes, swig_Ogre_Billboard_bases, swig_Ogre_Billboard_base_names };

static int _wrap_new_BillboardSet__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::String *arg1 = 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  std::string temp1 ;
  Ogre::BillboardSet *result = 0 ;
  
  SWIG_check_num_args("Ogre::BillboardSet::BillboardSet",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Ogre::BillboardSet::BillboardSet",1,"Ogre::String const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::BillboardSet::BillboardSet",2,"unsigned int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Ogre::BillboardSet::BillboardSet",3,"bool");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (Ogre::BillboardSet *)new Ogre::BillboardSet((Ogre::String const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__BillboardSet,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BillboardSet__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::String *arg1 = 0 ;
  unsigned int arg2 ;
  std::string temp1 ;
  Ogre::BillboardSet *result = 0 ;
  
  SWIG_check_num_args("Ogre::BillboardSet::BillboardSet",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Ogre::BillboardSet::BillboardSet",1,"Ogre::String const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::BillboardSet::BillboardSet",2,"unsigned int");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Ogre::BillboardSet *)new Ogre::BillboardSet((Ogre::String const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__BillboardSet,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BillboardSet__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::String *arg1 = 0 ;
  std::string temp1 ;
  Ogre::BillboardSet *result = 0 ;
  
  SWIG_check_num_args("Ogre::BillboardSet::BillboardSet",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Ogre::BillboardSet::BillboardSet",1,"Ogre::String const &");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  result = (Ogre::BillboardSet *)new Ogre::BillboardSet((Ogre::String const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__BillboardSet,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BillboardSet(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_BillboardSet__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_BillboardSet__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_BillboardSet__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_BillboardSet'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::BillboardSet::BillboardSet(Ogre::String const &,unsigned int,bool)\n"
    "    Ogre::BillboardSet::BillboardSet(Ogre::String const &,unsigned int)\n"
    "    Ogre::BillboardSet::BillboardSet(Ogre::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BillboardSet_createBillboard__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::BillboardSet *arg1 = (Ogre::BillboardSet *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Ogre::ColourValue *arg3 = 0 ;
  Ogre::Billboard *result = 0 ;
  
  SWIG_check_num_args("Ogre::BillboardSet::createBillboard",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::BillboardSet::createBillboard",1,"Ogre::BillboardSet *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::BillboardSet::createBillboard",2,"Ogre::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Ogre::BillboardSet::createBillboard",3,"Ogre::ColourValue const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__BillboardSet,0))){
    SWIG_fail_ptr("BillboardSet_createBillboard",1,SWIGTYPE_p_Ogre__BillboardSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("BillboardSet_createBillboard",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Ogre__ColourValue,0))){
    SWIG_fail_ptr("BillboardSet_createBillboard",3,SWIGTYPE_p_Ogre__ColourValue);
  }
  
  result = (Ogre::Billboard *)(arg1)->createBillboard((Ogre::Vector3 const &)*arg2,(Ogre::ColourValue const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Billboard,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BillboardSet_createBillboard__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::BillboardSet *arg1 = (Ogre::BillboardSet *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Ogre::Billboard *result = 0 ;
  
  SWIG_check_num_args("Ogre::BillboardSet::createBillboard",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::BillboardSet::createBillboard",1,"Ogre::BillboardSet *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::BillboardSet::createBillboard",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__BillboardSet,0))){
    SWIG_fail_ptr("BillboardSet_createBillboard",1,SWIGTYPE_p_Ogre__BillboardSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("BillboardSet_createBillboard",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  result = (Ogre::Billboard *)(arg1)->createBillboard((Ogre::Vector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Billboard,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BillboardSet_createBillboard__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::BillboardSet *arg1 = (Ogre::BillboardSet *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::Real arg4 ;
  Ogre::ColourValue *arg5 = 0 ;
  Ogre::Billboard *result = 0 ;
  
  SWIG_check_num_args("Ogre::BillboardSet::createBillboard",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::BillboardSet::createBillboard",1,"Ogre::BillboardSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::BillboardSet::createBillboard",2,"Ogre::Real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ogre::BillboardSet::createBillboard",3,"Ogre::Real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Ogre::BillboardSet::createBillboard",4,"Ogre::Real");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Ogre::BillboardSet::createBillboard",5,"Ogre::ColourValue const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__BillboardSet,0))){
    SWIG_fail_ptr("BillboardSet_createBillboard",1,SWIGTYPE_p_Ogre__BillboardSet);
  }
  
  arg2 = (Ogre::Real)lua_tonumber(L, 2);
  arg3 = (Ogre::Real)lua_tonumber(L, 3);
  arg4 = (Ogre::Real)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Ogre__ColourValue,0))){
    SWIG_fail_ptr("BillboardSet_createBillboard",5,SWIGTYPE_p_Ogre__ColourValue);
  }
  
  result = (Ogre::Billboard *)(arg1)->createBillboard(arg2,arg3,arg4,(Ogre::ColourValue const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Billboard,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BillboardSet_createBillboard__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::BillboardSet *arg1 = (Ogre::BillboardSet *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::Real arg4 ;
  Ogre::Billboard *result = 0 ;
  
  SWIG_check_num_args("Ogre::BillboardSet::createBillboard",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::BillboardSet::createBillboard",1,"Ogre::BillboardSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::BillboardSet::createBillboard",2,"Ogre::Real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ogre::BillboardSet::createBillboard",3,"Ogre::Real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Ogre::BillboardSet::createBillboard",4,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__BillboardSet,0))){
    SWIG_fail_ptr("BillboardSet_createBillboard",1,SWIGTYPE_p_Ogre__BillboardSet);
  }
  
  arg2 = (Ogre::Real)lua_tonumber(L, 2);
  arg3 = (Ogre::Real)lua_tonumber(L, 3);
  arg4 = (Ogre::Real)lua_tonumber(L, 4);
  result = (Ogre::Billboard *)(arg1)->createBillboard(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Billboard,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BillboardSet_createBillboard(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__BillboardSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BillboardSet_createBillboard__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__BillboardSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Ogre__ColourValue, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_BillboardSet_createBillboard__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__BillboardSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_BillboardSet_createBillboard__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__BillboardSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Ogre__ColourValue, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_BillboardSet_createBillboard__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'BillboardSet_createBillboard'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::BillboardSet::createBillboard(Ogre::Vector3 const &,Ogre::ColourValue const &)\n"
    "    Ogre::BillboardSet::createBillboard(Ogre::Vector3 const &)\n"
    "    Ogre::BillboardSet::createBillboard(Ogre::Real,Ogre::Real,Ogre::Real,Ogre::ColourValue const &)\n"
    "    Ogre::BillboardSet::createBillboard(Ogre::Real,Ogre::Real,Ogre::Real)\n");
  lua_error(L);return 0;
}


static int _wrap_BillboardSet_getNumBillboards(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::BillboardSet *arg1 = (Ogre::BillboardSet *) 0 ;
  int result;
  
  SWIG_check_num_args("Ogre::BillboardSet::getNumBillboards",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::BillboardSet::getNumBillboards",1,"Ogre::BillboardSet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__BillboardSet,0))){
    SWIG_fail_ptr("BillboardSet_getNumBillboards",1,SWIGTYPE_p_Ogre__BillboardSet);
  }
  
  result = (int)((Ogre::BillboardSet const *)arg1)->getNumBillboards();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BillboardSet_setAutoextend(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::BillboardSet *arg1 = (Ogre::BillboardSet *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Ogre::BillboardSet::setAutoextend",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::BillboardSet::setAutoextend",1,"Ogre::BillboardSet *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::BillboardSet::setAutoextend",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__BillboardSet,0))){
    SWIG_fail_ptr("BillboardSet_setAutoextend",1,SWIGTYPE_p_Ogre__BillboardSet);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setAutoextend(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BillboardSet_getAutoextend(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::BillboardSet *arg1 = (Ogre::BillboardSet *) 0 ;
  bool result;
  
  SWIG_check_num_args("Ogre::BillboardSet::getAutoextend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::BillboardSet::getAutoextend",1,"Ogre::BillboardSet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__BillboardSet,0))){
    SWIG_fail_ptr("BillboardSet_getAutoextend",1,SWIGTYPE_p_Ogre__BillboardSet);
  }
  
  result = (bool)((Ogre::BillboardSet const *)arg1)->getAutoextend();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BillboardSet_setSortingEnabled(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::BillboardSet *arg1 = (Ogre::BillboardSet *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Ogre::BillboardSet::setSortingEnabled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::BillboardSet::setSortingEnabled",1,"Ogre::BillboardSet *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::BillboardSet::setSortingEnabled",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__BillboardSet,0))){
    SWIG_fail_ptr("BillboardSet_setSortingEnabled",1,SWIGTYPE_p_Ogre__BillboardSet);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setSortingEnabled(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BillboardSet_getSortingEnabled(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::BillboardSet *arg1 = (Ogre::BillboardSet *) 0 ;
  bool result;
  
  SWIG_check_num_args("Ogre::BillboardSet::getSortingEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::BillboardSet::getSortingEnabled",1,"Ogre::BillboardSet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__BillboardSet,0))){
    SWIG_fail_ptr("BillboardSet_getSortingEnabled",1,SWIGTYPE_p_Ogre__BillboardSet);
  }
  
  result = (bool)((Ogre::BillboardSet const *)arg1)->getSortingEnabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BillboardSet_setPoolSize(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::BillboardSet *arg1 = (Ogre::BillboardSet *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Ogre::BillboardSet::setPoolSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::BillboardSet::setPoolSize",1,"Ogre::BillboardSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::BillboardSet::setPoolSize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__BillboardSet,0))){
    SWIG_fail_ptr("BillboardSet_setPoolSize",1,SWIGTYPE_p_Ogre__BillboardSet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->setPoolSize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BillboardSet_getPoolSize(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::BillboardSet *arg1 = (Ogre::BillboardSet *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Ogre::BillboardSet::getPoolSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::BillboardSet::getPoolSize",1,"Ogre::BillboardSet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__BillboardSet,0))){
    SWIG_fail_ptr("BillboardSet_getPoolSize",1,SWIGTYPE_p_Ogre__BillboardSet);
  }
  
  result = (unsigned int)((Ogre::BillboardSet const *)arg1)->getPoolSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BillboardSet_clear(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::BillboardSet *arg1 = (Ogre::BillboardSet *) 0 ;
  
  SWIG_check_num_args("Ogre::BillboardSet::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::BillboardSet::clear",1,"Ogre::BillboardSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__BillboardSet,0))){
    SWIG_fail_ptr("BillboardSet_clear",1,SWIGTYPE_p_Ogre__BillboardSet);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BillboardSet_getBillboard(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::BillboardSet *arg1 = (Ogre::BillboardSet *) 0 ;
  unsigned int arg2 ;
  Ogre::Billboard *result = 0 ;
  
  SWIG_check_num_args("Ogre::BillboardSet::getBillboard",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::BillboardSet::getBillboard",1,"Ogre::BillboardSet const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::BillboardSet::getBillboard",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__BillboardSet,0))){
    SWIG_fail_ptr("BillboardSet_getBillboard",1,SWIGTYPE_p_Ogre__BillboardSet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Ogre::Billboard *)((Ogre::BillboardSet const *)arg1)->getBillboard(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Billboard,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BillboardSet_removeBillboard__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::BillboardSet *arg1 = (Ogre::BillboardSet *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Ogre::BillboardSet::removeBillboard",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::BillboardSet::removeBillboard",1,"Ogre::BillboardSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::BillboardSet::removeBillboard",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__BillboardSet,0))){
    SWIG_fail_ptr("BillboardSet_removeBillboard",1,SWIGTYPE_p_Ogre__BillboardSet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->removeBillboard(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BillboardSet_removeBillboard__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::BillboardSet *arg1 = (Ogre::BillboardSet *) 0 ;
  Ogre::Billboard *arg2 = (Ogre::Billboard *) 0 ;
  
  SWIG_check_num_args("Ogre::BillboardSet::removeBillboard",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::BillboardSet::removeBillboard",1,"Ogre::BillboardSet *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Ogre::BillboardSet::removeBillboard",2,"Ogre::Billboard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__BillboardSet,0))){
    SWIG_fail_ptr("BillboardSet_removeBillboard",1,SWIGTYPE_p_Ogre__BillboardSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Billboard,0))){
    SWIG_fail_ptr("BillboardSet_removeBillboard",2,SWIGTYPE_p_Ogre__Billboard);
  }
  
  (arg1)->removeBillboard(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BillboardSet_removeBillboard(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__BillboardSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Billboard, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BillboardSet_removeBillboard__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__BillboardSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BillboardSet_removeBillboard__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'BillboardSet_removeBillboard'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::BillboardSet::removeBillboard(unsigned int)\n"
    "    Ogre::BillboardSet::removeBillboard(Ogre::Billboard *)\n");
  lua_error(L);return 0;
}


static int _wrap_BillboardSet_setBillboardOrigin(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::BillboardSet *arg1 = (Ogre::BillboardSet *) 0 ;
  Ogre::BillboardOrigin arg2 ;
  
  SWIG_check_num_args("Ogre::BillboardSet::setBillboardOrigin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::BillboardSet::setBillboardOrigin",1,"Ogre::BillboardSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::BillboardSet::setBillboardOrigin",2,"Ogre::BillboardOrigin");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__BillboardSet,0))){
    SWIG_fail_ptr("BillboardSet_setBillboardOrigin",1,SWIGTYPE_p_Ogre__BillboardSet);
  }
  
  arg2 = (Ogre::BillboardOrigin)(int)lua_tonumber(L, 2);
  (arg1)->setBillboardOrigin(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BillboardSet_getBillboardOrigin(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::BillboardSet *arg1 = (Ogre::BillboardSet *) 0 ;
  Ogre::BillboardOrigin result;
  
  SWIG_check_num_args("Ogre::BillboardSet::getBillboardOrigin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::BillboardSet::getBillboardOrigin",1,"Ogre::BillboardSet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__BillboardSet,0))){
    SWIG_fail_ptr("BillboardSet_getBillboardOrigin",1,SWIGTYPE_p_Ogre__BillboardSet);
  }
  
  result = (Ogre::BillboardOrigin)((Ogre::BillboardSet const *)arg1)->getBillboardOrigin();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BillboardSet_setBillboardRotationType(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::BillboardSet *arg1 = (Ogre::BillboardSet *) 0 ;
  Ogre::BillboardRotationType arg2 ;
  
  SWIG_check_num_args("Ogre::BillboardSet::setBillboardRotationType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::BillboardSet::setBillboardRotationType",1,"Ogre::BillboardSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::BillboardSet::setBillboardRotationType",2,"Ogre::BillboardRotationType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__BillboardSet,0))){
    SWIG_fail_ptr("BillboardSet_setBillboardRotationType",1,SWIGTYPE_p_Ogre__BillboardSet);
  }
  
  arg2 = (Ogre::BillboardRotationType)(int)lua_tonumber(L, 2);
  (arg1)->setBillboardRotationType(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BillboardSet_getBillboardRotationType(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::BillboardSet *arg1 = (Ogre::BillboardSet *) 0 ;
  Ogre::BillboardRotationType result;
  
  SWIG_check_num_args("Ogre::BillboardSet::getBillboardRotationType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::BillboardSet::getBillboardRotationType",1,"Ogre::BillboardSet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__BillboardSet,0))){
    SWIG_fail_ptr("BillboardSet_getBillboardRotationType",1,SWIGTYPE_p_Ogre__BillboardSet);
  }
  
  result = (Ogre::BillboardRotationType)((Ogre::BillboardSet const *)arg1)->getBillboardRotationType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BillboardSet_setDefaultDimensions(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::BillboardSet *arg1 = (Ogre::BillboardSet *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  
  SWIG_check_num_args("Ogre::BillboardSet::setDefaultDimensions",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::BillboardSet::setDefaultDimensions",1,"Ogre::BillboardSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::BillboardSet::setDefaultDimensions",2,"Ogre::Real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ogre::BillboardSet::setDefaultDimensions",3,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__BillboardSet,0))){
    SWIG_fail_ptr("BillboardSet_setDefaultDimensions",1,SWIGTYPE_p_Ogre__BillboardSet);
  }
  
  arg2 = (Ogre::Real)lua_tonumber(L, 2);
  arg3 = (Ogre::Real)lua_tonumber(L, 3);
  (arg1)->setDefaultDimensions(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BillboardSet_setDefaultWidth(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::BillboardSet *arg1 = (Ogre::BillboardSet *) 0 ;
  Ogre::Real arg2 ;
  
  SWIG_check_num_args("Ogre::BillboardSet::setDefaultWidth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::BillboardSet::setDefaultWidth",1,"Ogre::BillboardSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::BillboardSet::setDefaultWidth",2,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__BillboardSet,0))){
    SWIG_fail_ptr("BillboardSet_setDefaultWidth",1,SWIGTYPE_p_Ogre__BillboardSet);
  }
  
  arg2 = (Ogre::Real)lua_tonumber(L, 2);
  (arg1)->setDefaultWidth(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BillboardSet_getDefaultWidth(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::BillboardSet *arg1 = (Ogre::BillboardSet *) 0 ;
  Ogre::Real result;
  
  SWIG_check_num_args("Ogre::BillboardSet::getDefaultWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::BillboardSet::getDefaultWidth",1,"Ogre::BillboardSet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__BillboardSet,0))){
    SWIG_fail_ptr("BillboardSet_getDefaultWidth",1,SWIGTYPE_p_Ogre__BillboardSet);
  }
  
  result = (Ogre::Real)((Ogre::BillboardSet const *)arg1)->getDefaultWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BillboardSet_setDefaultHeight(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::BillboardSet *arg1 = (Ogre::BillboardSet *) 0 ;
  Ogre::Real arg2 ;
  
  SWIG_check_num_args("Ogre::BillboardSet::setDefaultHeight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::BillboardSet::setDefaultHeight",1,"Ogre::BillboardSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::BillboardSet::setDefaultHeight",2,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__BillboardSet,0))){
    SWIG_fail_ptr("BillboardSet_setDefaultHeight",1,SWIGTYPE_p_Ogre__BillboardSet);
  }
  
  arg2 = (Ogre::Real)lua_tonumber(L, 2);
  (arg1)->setDefaultHeight(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BillboardSet_getDefaultHeight(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::BillboardSet *arg1 = (Ogre::BillboardSet *) 0 ;
  Ogre::Real result;
  
  SWIG_check_num_args("Ogre::BillboardSet::getDefaultHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::BillboardSet::getDefaultHeight",1,"Ogre::BillboardSet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__BillboardSet,0))){
    SWIG_fail_ptr("BillboardSet_getDefaultHeight",1,SWIGTYPE_p_Ogre__BillboardSet);
  }
  
  result = (Ogre::Real)((Ogre::BillboardSet const *)arg1)->getDefaultHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BillboardSet_setMaterialName__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::BillboardSet *arg1 = (Ogre::BillboardSet *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Ogre::BillboardSet::setMaterialName",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::BillboardSet::setMaterialName",1,"Ogre::BillboardSet *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::BillboardSet::setMaterialName",2,"Ogre::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Ogre::BillboardSet::setMaterialName",3,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__BillboardSet,0))){
    SWIG_fail_ptr("BillboardSet_setMaterialName",1,SWIGTYPE_p_Ogre__BillboardSet);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  (arg1)->setMaterialName((Ogre::String const &)*arg2,(Ogre::String const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BillboardSet_setMaterialName__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::BillboardSet *arg1 = (Ogre::BillboardSet *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Ogre::BillboardSet::setMaterialName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::BillboardSet::setMaterialName",1,"Ogre::BillboardSet *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::BillboardSet::setMaterialName",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__BillboardSet,0))){
    SWIG_fail_ptr("BillboardSet_setMaterialName",1,SWIGTYPE_p_Ogre__BillboardSet);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->setMaterialName((Ogre::String const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BillboardSet_setMaterialName(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__BillboardSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_BillboardSet_setMaterialName__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__BillboardSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_BillboardSet_setMaterialName__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'BillboardSet_setMaterialName'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::BillboardSet::setMaterialName(Ogre::String const &,Ogre::String const &)\n"
    "    Ogre::BillboardSet::setMaterialName(Ogre::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BillboardSet_getMaterialName(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::BillboardSet *arg1 = (Ogre::BillboardSet *) 0 ;
  Ogre::String *result = 0 ;
  
  SWIG_check_num_args("Ogre::BillboardSet::getMaterialName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::BillboardSet::getMaterialName",1,"Ogre::BillboardSet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__BillboardSet,0))){
    SWIG_fail_ptr("BillboardSet_getMaterialName",1,SWIGTYPE_p_Ogre__BillboardSet);
  }
  
  result = (Ogre::String *) &((Ogre::BillboardSet const *)arg1)->getMaterialName();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BillboardSet_getCullIndividually(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::BillboardSet *arg1 = (Ogre::BillboardSet *) 0 ;
  bool result;
  
  SWIG_check_num_args("Ogre::BillboardSet::getCullIndividually",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::BillboardSet::getCullIndividually",1,"Ogre::BillboardSet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__BillboardSet,0))){
    SWIG_fail_ptr("BillboardSet_getCullIndividually",1,SWIGTYPE_p_Ogre__BillboardSet);
  }
  
  result = (bool)((Ogre::BillboardSet const *)arg1)->getCullIndividually();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BillboardSet_setCullIndividually(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::BillboardSet *arg1 = (Ogre::BillboardSet *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Ogre::BillboardSet::setCullIndividually",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::BillboardSet::setCullIndividually",1,"Ogre::BillboardSet *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::BillboardSet::setCullIndividually",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__BillboardSet,0))){
    SWIG_fail_ptr("BillboardSet_setCullIndividually",1,SWIGTYPE_p_Ogre__BillboardSet);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setCullIndividually(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BillboardSet_setBillboardType(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::BillboardSet *arg1 = (Ogre::BillboardSet *) 0 ;
  Ogre::BillboardType arg2 ;
  
  SWIG_check_num_args("Ogre::BillboardSet::setBillboardType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::BillboardSet::setBillboardType",1,"Ogre::BillboardSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::BillboardSet::setBillboardType",2,"Ogre::BillboardType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__BillboardSet,0))){
    SWIG_fail_ptr("BillboardSet_setBillboardType",1,SWIGTYPE_p_Ogre__BillboardSet);
  }
  
  arg2 = (Ogre::BillboardType)(int)lua_tonumber(L, 2);
  (arg1)->setBillboardType(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BillboardSet_getBillboardType(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::BillboardSet *arg1 = (Ogre::BillboardSet *) 0 ;
  Ogre::BillboardType result;
  
  SWIG_check_num_args("Ogre::BillboardSet::getBillboardType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::BillboardSet::getBillboardType",1,"Ogre::BillboardSet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__BillboardSet,0))){
    SWIG_fail_ptr("BillboardSet_getBillboardType",1,SWIGTYPE_p_Ogre__BillboardSet);
  }
  
  result = (Ogre::BillboardType)((Ogre::BillboardSet const *)arg1)->getBillboardType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BillboardSet_setCommonDirection(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::BillboardSet *arg1 = (Ogre::BillboardSet *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Ogre::BillboardSet::setCommonDirection",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::BillboardSet::setCommonDirection",1,"Ogre::BillboardSet *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::BillboardSet::setCommonDirection",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__BillboardSet,0))){
    SWIG_fail_ptr("BillboardSet_setCommonDirection",1,SWIGTYPE_p_Ogre__BillboardSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("BillboardSet_setCommonDirection",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  (arg1)->setCommonDirection((Ogre::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BillboardSet_getCommonDirection(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::BillboardSet *arg1 = (Ogre::BillboardSet *) 0 ;
  Ogre::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Ogre::BillboardSet::getCommonDirection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::BillboardSet::getCommonDirection",1,"Ogre::BillboardSet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__BillboardSet,0))){
    SWIG_fail_ptr("BillboardSet_getCommonDirection",1,SWIGTYPE_p_Ogre__BillboardSet);
  }
  
  result = (Ogre::Vector3 *) &((Ogre::BillboardSet const *)arg1)->getCommonDirection();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BillboardSet_setCommonUpVector(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::BillboardSet *arg1 = (Ogre::BillboardSet *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Ogre::BillboardSet::setCommonUpVector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::BillboardSet::setCommonUpVector",1,"Ogre::BillboardSet *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::BillboardSet::setCommonUpVector",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__BillboardSet,0))){
    SWIG_fail_ptr("BillboardSet_setCommonUpVector",1,SWIGTYPE_p_Ogre__BillboardSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("BillboardSet_setCommonUpVector",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  (arg1)->setCommonUpVector((Ogre::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BillboardSet_getCommonUpVector(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::BillboardSet *arg1 = (Ogre::BillboardSet *) 0 ;
  Ogre::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Ogre::BillboardSet::getCommonUpVector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::BillboardSet::getCommonUpVector",1,"Ogre::BillboardSet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__BillboardSet,0))){
    SWIG_fail_ptr("BillboardSet_getCommonUpVector",1,SWIGTYPE_p_Ogre__BillboardSet);
  }
  
  result = (Ogre::Vector3 *) &((Ogre::BillboardSet const *)arg1)->getCommonUpVector();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BillboardSet(void *obj) {
Ogre::BillboardSet *arg1 = (Ogre::BillboardSet *) obj;
delete arg1;
}
static swig_lua_method swig_Ogre_BillboardSet_methods[] = {
    {"createBillboard", _wrap_BillboardSet_createBillboard}, 
    {"getNumBillboards", _wrap_BillboardSet_getNumBillboards}, 
    {"setAutoextend", _wrap_BillboardSet_setAutoextend}, 
    {"getAutoextend", _wrap_BillboardSet_getAutoextend}, 
    {"setSortingEnabled", _wrap_BillboardSet_setSortingEnabled}, 
    {"getSortingEnabled", _wrap_BillboardSet_getSortingEnabled}, 
    {"setPoolSize", _wrap_BillboardSet_setPoolSize}, 
    {"getPoolSize", _wrap_BillboardSet_getPoolSize}, 
    {"clear", _wrap_BillboardSet_clear}, 
    {"getBillboard", _wrap_BillboardSet_getBillboard}, 
    {"removeBillboard", _wrap_BillboardSet_removeBillboard}, 
    {"setBillboardOrigin", _wrap_BillboardSet_setBillboardOrigin}, 
    {"getBillboardOrigin", _wrap_BillboardSet_getBillboardOrigin}, 
    {"setBillboardRotationType", _wrap_BillboardSet_setBillboardRotationType}, 
    {"getBillboardRotationType", _wrap_BillboardSet_getBillboardRotationType}, 
    {"setDefaultDimensions", _wrap_BillboardSet_setDefaultDimensions}, 
    {"setDefaultWidth", _wrap_BillboardSet_setDefaultWidth}, 
    {"getDefaultWidth", _wrap_BillboardSet_getDefaultWidth}, 
    {"setDefaultHeight", _wrap_BillboardSet_setDefaultHeight}, 
    {"getDefaultHeight", _wrap_BillboardSet_getDefaultHeight}, 
    {"setMaterialName", _wrap_BillboardSet_setMaterialName}, 
    {"getMaterialName", _wrap_BillboardSet_getMaterialName}, 
    {"getCullIndividually", _wrap_BillboardSet_getCullIndividually}, 
    {"setCullIndividually", _wrap_BillboardSet_setCullIndividually}, 
    {"setBillboardType", _wrap_BillboardSet_setBillboardType}, 
    {"getBillboardType", _wrap_BillboardSet_getBillboardType}, 
    {"setCommonDirection", _wrap_BillboardSet_setCommonDirection}, 
    {"getCommonDirection", _wrap_BillboardSet_getCommonDirection}, 
    {"setCommonUpVector", _wrap_BillboardSet_setCommonUpVector}, 
    {"getCommonUpVector", _wrap_BillboardSet_getCommonUpVector}, 
    {0,0}
};
static swig_lua_attribute swig_Ogre_BillboardSet_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Ogre_BillboardSet_bases[] = {0,0,0};
static const char *swig_Ogre_BillboardSet_base_names[] = {"Ogre::MovableObject *","Ogre::Renderable *",0};
static swig_lua_class _wrap_class_Ogre_BillboardSet = { "BillboardSet", &SWIGTYPE_p_Ogre__BillboardSet,_wrap_new_BillboardSet, swig_delete_BillboardSet, swig_Ogre_BillboardSet_methods, swig_Ogre_BillboardSet_attributes, swig_Ogre_BillboardSet_bases, swig_Ogre_BillboardSet_base_names };

static int _wrap_SceneManager_createCamera(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  Ogre::Camera *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::createCamera",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::createCamera",1,"Ogre::SceneManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::SceneManager::createCamera",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_createCamera",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (Ogre::Camera *)(arg1)->createCamera((Ogre::String const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Camera,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_getCamera(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  Ogre::Camera *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::getCamera",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::getCamera",1,"Ogre::SceneManager const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::SceneManager::getCamera",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_getCamera",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (Ogre::Camera *)((Ogre::SceneManager const *)arg1)->getCamera((Ogre::String const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Camera,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_hasCamera(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("Ogre::SceneManager::hasCamera",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::hasCamera",1,"Ogre::SceneManager const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::SceneManager::hasCamera",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_hasCamera",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (bool)((Ogre::SceneManager const *)arg1)->hasCamera((Ogre::String const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_destroyAllCameras(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::destroyAllCameras",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::destroyAllCameras",1,"Ogre::SceneManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_destroyAllCameras",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  (arg1)->destroyAllCameras();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_destroyCamera(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::Camera *arg2 = (Ogre::Camera *) 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::destroyCamera",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::destroyCamera",1,"Ogre::SceneManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Ogre::SceneManager::destroyCamera",2,"Ogre::Camera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_destroyCamera",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Camera,0))){
    SWIG_fail_ptr("SceneManager_destroyCamera",2,SWIGTYPE_p_Ogre__Camera);
  }
  
  (arg1)->destroyCamera(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_createLight__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  Ogre::Light *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::createLight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::createLight",1,"Ogre::SceneManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::SceneManager::createLight",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_createLight",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (Ogre::Light *)(arg1)->createLight((Ogre::String const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Light,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_createLight__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::Light *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::createLight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::createLight",1,"Ogre::SceneManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_createLight",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  result = (Ogre::Light *)(arg1)->createLight();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Light,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_createLight(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SceneManager_createLight__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SceneManager_createLight__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SceneManager_createLight'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::SceneManager::createLight(Ogre::String const &)\n"
    "    Ogre::SceneManager::createLight()\n");
  lua_error(L);return 0;
}


static int _wrap_SceneManager_getLight(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  Ogre::Light *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::getLight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::getLight",1,"Ogre::SceneManager const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::SceneManager::getLight",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_getLight",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (Ogre::Light *)((Ogre::SceneManager const *)arg1)->getLight((Ogre::String const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Light,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_hasLight(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("Ogre::SceneManager::hasLight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::hasLight",1,"Ogre::SceneManager const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::SceneManager::hasLight",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_hasLight",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (bool)((Ogre::SceneManager const *)arg1)->hasLight((Ogre::String const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_destroyLight__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Ogre::SceneManager::destroyLight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::destroyLight",1,"Ogre::SceneManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::SceneManager::destroyLight",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_destroyLight",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->destroyLight((Ogre::String const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_destroyLight__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::Light *arg2 = (Ogre::Light *) 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::destroyLight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::destroyLight",1,"Ogre::SceneManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Ogre::SceneManager::destroyLight",2,"Ogre::Light *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_destroyLight",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Light,0))){
    SWIG_fail_ptr("SceneManager_destroyLight",2,SWIGTYPE_p_Ogre__Light);
  }
  
  (arg1)->destroyLight(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_destroyLight(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Light, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SceneManager_destroyLight__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SceneManager_destroyLight__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SceneManager_destroyLight'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::SceneManager::destroyLight(Ogre::String const &)\n"
    "    Ogre::SceneManager::destroyLight(Ogre::Light *)\n");
  lua_error(L);return 0;
}


static int _wrap_SceneManager_destroyAllLights(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::destroyAllLights",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::destroyAllLights",1,"Ogre::SceneManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_destroyAllLights",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  (arg1)->destroyAllLights();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_setAmbientLight(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::ColourValue *arg2 = 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::setAmbientLight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::setAmbientLight",1,"Ogre::SceneManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::SceneManager::setAmbientLight",2,"Ogre::ColourValue const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_setAmbientLight",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__ColourValue,0))){
    SWIG_fail_ptr("SceneManager_setAmbientLight",2,SWIGTYPE_p_Ogre__ColourValue);
  }
  
  (arg1)->setAmbientLight((Ogre::ColourValue const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_getAmbientLight(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::ColourValue *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::getAmbientLight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::getAmbientLight",1,"Ogre::SceneManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_getAmbientLight",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  result = (Ogre::ColourValue *) &((Ogre::SceneManager const *)arg1)->getAmbientLight();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__ColourValue,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_setWorldGeometry(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Ogre::SceneManager::setWorldGeometry",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::setWorldGeometry",1,"Ogre::SceneManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::SceneManager::setWorldGeometry",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_setWorldGeometry",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->setWorldGeometry((Ogre::String const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_clearScene(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::clearScene",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::clearScene",1,"Ogre::SceneManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_clearScene",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  (arg1)->clearScene();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_createSceneNode__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::SceneNode *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::createSceneNode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::createSceneNode",1,"Ogre::SceneManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_createSceneNode",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  result = (Ogre::SceneNode *)(arg1)->createSceneNode();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__SceneNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_createSceneNode__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  Ogre::SceneNode *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::createSceneNode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::createSceneNode",1,"Ogre::SceneManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::SceneManager::createSceneNode",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_createSceneNode",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (Ogre::SceneNode *)(arg1)->createSceneNode((Ogre::String const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__SceneNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_createSceneNode(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SceneManager_createSceneNode__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SceneManager_createSceneNode__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SceneManager_createSceneNode'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::SceneManager::createSceneNode()\n"
    "    Ogre::SceneManager::createSceneNode(Ogre::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SceneManager_destroySceneNode__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Ogre::SceneManager::destroySceneNode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::destroySceneNode",1,"Ogre::SceneManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::SceneManager::destroySceneNode",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_destroySceneNode",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->destroySceneNode((Ogre::String const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_destroySceneNode__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::SceneNode *arg2 = (Ogre::SceneNode *) 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::destroySceneNode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::destroySceneNode",1,"Ogre::SceneManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Ogre::SceneManager::destroySceneNode",2,"Ogre::SceneNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_destroySceneNode",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SceneManager_destroySceneNode",2,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  (arg1)->destroySceneNode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_destroySceneNode(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__SceneNode, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SceneManager_destroySceneNode__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SceneManager_destroySceneNode__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SceneManager_destroySceneNode'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::SceneManager::destroySceneNode(Ogre::String const &)\n"
    "    Ogre::SceneManager::destroySceneNode(Ogre::SceneNode *)\n");
  lua_error(L);return 0;
}


static int _wrap_SceneManager_getRootSceneNode(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::SceneNode *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::getRootSceneNode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::getRootSceneNode",1,"Ogre::SceneManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_getRootSceneNode",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  result = (Ogre::SceneNode *)(arg1)->getRootSceneNode();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__SceneNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_getSceneNode(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  Ogre::SceneNode *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::getSceneNode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::getSceneNode",1,"Ogre::SceneManager const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::SceneManager::getSceneNode",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_getSceneNode",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (Ogre::SceneNode *)((Ogre::SceneManager const *)arg1)->getSceneNode((Ogre::String const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__SceneNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_hasSceneNode(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("Ogre::SceneManager::hasSceneNode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::hasSceneNode",1,"Ogre::SceneManager const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::SceneManager::hasSceneNode",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_hasSceneNode",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (bool)((Ogre::SceneManager const *)arg1)->hasSceneNode((Ogre::String const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_createEntity__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::String *arg4 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  std::string temp4 ;
  Ogre::Entity *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::createEntity",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::createEntity",1,"Ogre::SceneManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::SceneManager::createEntity",2,"Ogre::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Ogre::SceneManager::createEntity",3,"Ogre::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Ogre::SceneManager::createEntity",4,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_createEntity",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_strlen(L,4)); arg4=&temp4;
  result = (Ogre::Entity *)(arg1)->createEntity((Ogre::String const &)*arg2,(Ogre::String const &)*arg3,(Ogre::String const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Entity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_createEntity__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  Ogre::Entity *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::createEntity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::createEntity",1,"Ogre::SceneManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::SceneManager::createEntity",2,"Ogre::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Ogre::SceneManager::createEntity",3,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_createEntity",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  result = (Ogre::Entity *)(arg1)->createEntity((Ogre::String const &)*arg2,(Ogre::String const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Entity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_createEntity__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  Ogre::Entity *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::createEntity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::createEntity",1,"Ogre::SceneManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::SceneManager::createEntity",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_createEntity",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (Ogre::Entity *)(arg1)->createEntity((Ogre::String const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Entity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_createEntity(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SceneManager_createEntity__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_SceneManager_createEntity__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_SceneManager_createEntity__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SceneManager_createEntity'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::SceneManager::createEntity(Ogre::String const &,Ogre::String const &,Ogre::String const &)\n"
    "    Ogre::SceneManager::createEntity(Ogre::String const &,Ogre::String const &)\n"
    "    Ogre::SceneManager::createEntity(Ogre::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SceneManager_getEntity(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  Ogre::Entity *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::getEntity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::getEntity",1,"Ogre::SceneManager const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::SceneManager::getEntity",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_getEntity",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (Ogre::Entity *)((Ogre::SceneManager const *)arg1)->getEntity((Ogre::String const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Entity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_hasEntity(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("Ogre::SceneManager::hasEntity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::hasEntity",1,"Ogre::SceneManager const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::SceneManager::hasEntity",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_hasEntity",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (bool)((Ogre::SceneManager const *)arg1)->hasEntity((Ogre::String const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_destroyEntity__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::Entity *arg2 = (Ogre::Entity *) 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::destroyEntity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::destroyEntity",1,"Ogre::SceneManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Ogre::SceneManager::destroyEntity",2,"Ogre::Entity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_destroyEntity",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Entity,0))){
    SWIG_fail_ptr("SceneManager_destroyEntity",2,SWIGTYPE_p_Ogre__Entity);
  }
  
  (arg1)->destroyEntity(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_destroyEntity__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Ogre::SceneManager::destroyEntity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::destroyEntity",1,"Ogre::SceneManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::SceneManager::destroyEntity",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_destroyEntity",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->destroyEntity((Ogre::String const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_destroyEntity(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Entity, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SceneManager_destroyEntity__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SceneManager_destroyEntity__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SceneManager_destroyEntity'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::SceneManager::destroyEntity(Ogre::Entity *)\n"
    "    Ogre::SceneManager::destroyEntity(Ogre::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SceneManager_destroyAllEntities(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::destroyAllEntities",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::destroyAllEntities",1,"Ogre::SceneManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_destroyAllEntities",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  (arg1)->destroyAllEntities();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_setSkyPlane__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  bool arg2 ;
  Ogre::Plane *arg3 = 0 ;
  Ogre::String *arg4 = 0 ;
  Ogre::Real arg5 ;
  Ogre::Real arg6 ;
  bool arg7 ;
  Ogre::Real arg8 ;
  int arg9 ;
  int arg10 ;
  Ogre::String *arg11 = 0 ;
  std::string temp4 ;
  std::string temp11 ;
  
  SWIG_check_num_args("Ogre::SceneManager::setSkyPlane",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",1,"Ogre::SceneManager *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",2,"bool");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",3,"Ogre::Plane const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",4,"Ogre::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",5,"Ogre::Real");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",6,"Ogre::Real");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",7,"bool");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",8,"Ogre::Real");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",9,"int");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",10,"int");
  if(!lua_isstring(L,11)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",11,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_setSkyPlane",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Ogre__Plane,0))){
    SWIG_fail_ptr("SceneManager_setSkyPlane",3,SWIGTYPE_p_Ogre__Plane);
  }
  
  temp4.assign(lua_tostring(L,4),lua_strlen(L,4)); arg4=&temp4;
  arg5 = (Ogre::Real)lua_tonumber(L, 5);
  arg6 = (Ogre::Real)lua_tonumber(L, 6);
  arg7 = (lua_toboolean(L, 7)!=0);
  arg8 = (Ogre::Real)lua_tonumber(L, 8);
  arg9 = (int)lua_tonumber(L, 9);
  arg10 = (int)lua_tonumber(L, 10);
  temp11.assign(lua_tostring(L,11),lua_strlen(L,11)); arg11=&temp11;
  (arg1)->setSkyPlane(arg2,(Ogre::Plane const &)*arg3,(Ogre::String const &)*arg4,arg5,arg6,arg7,arg8,arg9,arg10,(Ogre::String const &)*arg11);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_setSkyPlane__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  bool arg2 ;
  Ogre::Plane *arg3 = 0 ;
  Ogre::String *arg4 = 0 ;
  Ogre::Real arg5 ;
  Ogre::Real arg6 ;
  bool arg7 ;
  Ogre::Real arg8 ;
  int arg9 ;
  int arg10 ;
  std::string temp4 ;
  
  SWIG_check_num_args("Ogre::SceneManager::setSkyPlane",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",1,"Ogre::SceneManager *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",2,"bool");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",3,"Ogre::Plane const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",4,"Ogre::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",5,"Ogre::Real");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",6,"Ogre::Real");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",7,"bool");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",8,"Ogre::Real");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",9,"int");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",10,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_setSkyPlane",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Ogre__Plane,0))){
    SWIG_fail_ptr("SceneManager_setSkyPlane",3,SWIGTYPE_p_Ogre__Plane);
  }
  
  temp4.assign(lua_tostring(L,4),lua_strlen(L,4)); arg4=&temp4;
  arg5 = (Ogre::Real)lua_tonumber(L, 5);
  arg6 = (Ogre::Real)lua_tonumber(L, 6);
  arg7 = (lua_toboolean(L, 7)!=0);
  arg8 = (Ogre::Real)lua_tonumber(L, 8);
  arg9 = (int)lua_tonumber(L, 9);
  arg10 = (int)lua_tonumber(L, 10);
  (arg1)->setSkyPlane(arg2,(Ogre::Plane const &)*arg3,(Ogre::String const &)*arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_setSkyPlane__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  bool arg2 ;
  Ogre::Plane *arg3 = 0 ;
  Ogre::String *arg4 = 0 ;
  Ogre::Real arg5 ;
  Ogre::Real arg6 ;
  bool arg7 ;
  Ogre::Real arg8 ;
  int arg9 ;
  std::string temp4 ;
  
  SWIG_check_num_args("Ogre::SceneManager::setSkyPlane",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",1,"Ogre::SceneManager *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",2,"bool");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",3,"Ogre::Plane const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",4,"Ogre::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",5,"Ogre::Real");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",6,"Ogre::Real");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",7,"bool");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",8,"Ogre::Real");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",9,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_setSkyPlane",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Ogre__Plane,0))){
    SWIG_fail_ptr("SceneManager_setSkyPlane",3,SWIGTYPE_p_Ogre__Plane);
  }
  
  temp4.assign(lua_tostring(L,4),lua_strlen(L,4)); arg4=&temp4;
  arg5 = (Ogre::Real)lua_tonumber(L, 5);
  arg6 = (Ogre::Real)lua_tonumber(L, 6);
  arg7 = (lua_toboolean(L, 7)!=0);
  arg8 = (Ogre::Real)lua_tonumber(L, 8);
  arg9 = (int)lua_tonumber(L, 9);
  (arg1)->setSkyPlane(arg2,(Ogre::Plane const &)*arg3,(Ogre::String const &)*arg4,arg5,arg6,arg7,arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_setSkyPlane__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  bool arg2 ;
  Ogre::Plane *arg3 = 0 ;
  Ogre::String *arg4 = 0 ;
  Ogre::Real arg5 ;
  Ogre::Real arg6 ;
  bool arg7 ;
  Ogre::Real arg8 ;
  std::string temp4 ;
  
  SWIG_check_num_args("Ogre::SceneManager::setSkyPlane",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",1,"Ogre::SceneManager *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",2,"bool");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",3,"Ogre::Plane const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",4,"Ogre::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",5,"Ogre::Real");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",6,"Ogre::Real");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",7,"bool");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",8,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_setSkyPlane",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Ogre__Plane,0))){
    SWIG_fail_ptr("SceneManager_setSkyPlane",3,SWIGTYPE_p_Ogre__Plane);
  }
  
  temp4.assign(lua_tostring(L,4),lua_strlen(L,4)); arg4=&temp4;
  arg5 = (Ogre::Real)lua_tonumber(L, 5);
  arg6 = (Ogre::Real)lua_tonumber(L, 6);
  arg7 = (lua_toboolean(L, 7)!=0);
  arg8 = (Ogre::Real)lua_tonumber(L, 8);
  (arg1)->setSkyPlane(arg2,(Ogre::Plane const &)*arg3,(Ogre::String const &)*arg4,arg5,arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_setSkyPlane__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  bool arg2 ;
  Ogre::Plane *arg3 = 0 ;
  Ogre::String *arg4 = 0 ;
  Ogre::Real arg5 ;
  Ogre::Real arg6 ;
  bool arg7 ;
  std::string temp4 ;
  
  SWIG_check_num_args("Ogre::SceneManager::setSkyPlane",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",1,"Ogre::SceneManager *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",2,"bool");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",3,"Ogre::Plane const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",4,"Ogre::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",5,"Ogre::Real");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",6,"Ogre::Real");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",7,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_setSkyPlane",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Ogre__Plane,0))){
    SWIG_fail_ptr("SceneManager_setSkyPlane",3,SWIGTYPE_p_Ogre__Plane);
  }
  
  temp4.assign(lua_tostring(L,4),lua_strlen(L,4)); arg4=&temp4;
  arg5 = (Ogre::Real)lua_tonumber(L, 5);
  arg6 = (Ogre::Real)lua_tonumber(L, 6);
  arg7 = (lua_toboolean(L, 7)!=0);
  (arg1)->setSkyPlane(arg2,(Ogre::Plane const &)*arg3,(Ogre::String const &)*arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_setSkyPlane__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  bool arg2 ;
  Ogre::Plane *arg3 = 0 ;
  Ogre::String *arg4 = 0 ;
  Ogre::Real arg5 ;
  Ogre::Real arg6 ;
  std::string temp4 ;
  
  SWIG_check_num_args("Ogre::SceneManager::setSkyPlane",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",1,"Ogre::SceneManager *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",2,"bool");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",3,"Ogre::Plane const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",4,"Ogre::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",5,"Ogre::Real");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",6,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_setSkyPlane",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Ogre__Plane,0))){
    SWIG_fail_ptr("SceneManager_setSkyPlane",3,SWIGTYPE_p_Ogre__Plane);
  }
  
  temp4.assign(lua_tostring(L,4),lua_strlen(L,4)); arg4=&temp4;
  arg5 = (Ogre::Real)lua_tonumber(L, 5);
  arg6 = (Ogre::Real)lua_tonumber(L, 6);
  (arg1)->setSkyPlane(arg2,(Ogre::Plane const &)*arg3,(Ogre::String const &)*arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_setSkyPlane__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  bool arg2 ;
  Ogre::Plane *arg3 = 0 ;
  Ogre::String *arg4 = 0 ;
  Ogre::Real arg5 ;
  std::string temp4 ;
  
  SWIG_check_num_args("Ogre::SceneManager::setSkyPlane",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",1,"Ogre::SceneManager *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",2,"bool");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",3,"Ogre::Plane const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",4,"Ogre::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",5,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_setSkyPlane",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Ogre__Plane,0))){
    SWIG_fail_ptr("SceneManager_setSkyPlane",3,SWIGTYPE_p_Ogre__Plane);
  }
  
  temp4.assign(lua_tostring(L,4),lua_strlen(L,4)); arg4=&temp4;
  arg5 = (Ogre::Real)lua_tonumber(L, 5);
  (arg1)->setSkyPlane(arg2,(Ogre::Plane const &)*arg3,(Ogre::String const &)*arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_setSkyPlane__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  bool arg2 ;
  Ogre::Plane *arg3 = 0 ;
  Ogre::String *arg4 = 0 ;
  std::string temp4 ;
  
  SWIG_check_num_args("Ogre::SceneManager::setSkyPlane",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",1,"Ogre::SceneManager *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",2,"bool");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",3,"Ogre::Plane const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlane",4,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_setSkyPlane",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Ogre__Plane,0))){
    SWIG_fail_ptr("SceneManager_setSkyPlane",3,SWIGTYPE_p_Ogre__Plane);
  }
  
  temp4.assign(lua_tostring(L,4),lua_strlen(L,4)); arg4=&temp4;
  (arg1)->setSkyPlane(arg2,(Ogre::Plane const &)*arg3,(Ogre::String const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_setSkyPlane(lua_State* L) {
  int argc;
  int argv[12]={
    1,2,3,4,5,6,7,8,9,10,11,12
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Ogre__Plane, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_SceneManager_setSkyPlane__SWIG_7(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Ogre__Plane, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_SceneManager_setSkyPlane__SWIG_6(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Ogre__Plane, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_SceneManager_setSkyPlane__SWIG_5(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Ogre__Plane, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  return _wrap_SceneManager_setSkyPlane__SWIG_4(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Ogre__Plane, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_SceneManager_setSkyPlane__SWIG_3(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Ogre__Plane, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      return _wrap_SceneManager_setSkyPlane__SWIG_2(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Ogre__Plane, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        return _wrap_SceneManager_setSkyPlane__SWIG_1(L);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 11) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Ogre__Plane, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isstring(L,argv[10]);
                        }
                        if (_v) {
                          return _wrap_SceneManager_setSkyPlane__SWIG_0(L);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SceneManager_setSkyPlane'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::SceneManager::setSkyPlane(bool,Ogre::Plane const &,Ogre::String const &,Ogre::Real,Ogre::Real,bool,Ogre::Real,int,int,Ogre::String const &)\n"
    "    Ogre::SceneManager::setSkyPlane(bool,Ogre::Plane const &,Ogre::String const &,Ogre::Real,Ogre::Real,bool,Ogre::Real,int,int)\n"
    "    Ogre::SceneManager::setSkyPlane(bool,Ogre::Plane const &,Ogre::String const &,Ogre::Real,Ogre::Real,bool,Ogre::Real,int)\n"
    "    Ogre::SceneManager::setSkyPlane(bool,Ogre::Plane const &,Ogre::String const &,Ogre::Real,Ogre::Real,bool,Ogre::Real)\n"
    "    Ogre::SceneManager::setSkyPlane(bool,Ogre::Plane const &,Ogre::String const &,Ogre::Real,Ogre::Real,bool)\n"
    "    Ogre::SceneManager::setSkyPlane(bool,Ogre::Plane const &,Ogre::String const &,Ogre::Real,Ogre::Real)\n"
    "    Ogre::SceneManager::setSkyPlane(bool,Ogre::Plane const &,Ogre::String const &,Ogre::Real)\n"
    "    Ogre::SceneManager::setSkyPlane(bool,Ogre::Plane const &,Ogre::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SceneManager_setSkyPlaneEnabled(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Ogre::SceneManager::setSkyPlaneEnabled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlaneEnabled",1,"Ogre::SceneManager *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::SceneManager::setSkyPlaneEnabled",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_setSkyPlaneEnabled",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setSkyPlaneEnabled(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_isSkyPlaneEnabled(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  bool result;
  
  SWIG_check_num_args("Ogre::SceneManager::isSkyPlaneEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::isSkyPlaneEnabled",1,"Ogre::SceneManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_isSkyPlaneEnabled",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  result = (bool)((Ogre::SceneManager const *)arg1)->isSkyPlaneEnabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_getSkyPlaneNode(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::SceneNode *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::getSkyPlaneNode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::getSkyPlaneNode",1,"Ogre::SceneManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_getSkyPlaneNode",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  result = (Ogre::SceneNode *)((Ogre::SceneManager const *)arg1)->getSkyPlaneNode();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__SceneNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_setSkyBox__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  bool arg2 ;
  Ogre::String *arg3 = 0 ;
  Ogre::Real arg4 ;
  bool arg5 ;
  Ogre::Quaternion *arg6 = 0 ;
  Ogre::String *arg7 = 0 ;
  std::string temp3 ;
  std::string temp7 ;
  
  SWIG_check_num_args("Ogre::SceneManager::setSkyBox",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::setSkyBox",1,"Ogre::SceneManager *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::SceneManager::setSkyBox",2,"bool");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Ogre::SceneManager::setSkyBox",3,"Ogre::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Ogre::SceneManager::setSkyBox",4,"Ogre::Real");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Ogre::SceneManager::setSkyBox",5,"bool");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("Ogre::SceneManager::setSkyBox",6,"Ogre::Quaternion const &");
  if(!lua_isstring(L,7)) SWIG_fail_arg("Ogre::SceneManager::setSkyBox",7,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_setSkyBox",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  arg4 = (Ogre::Real)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_Ogre__Quaternion,0))){
    SWIG_fail_ptr("SceneManager_setSkyBox",6,SWIGTYPE_p_Ogre__Quaternion);
  }
  
  temp7.assign(lua_tostring(L,7),lua_strlen(L,7)); arg7=&temp7;
  (arg1)->setSkyBox(arg2,(Ogre::String const &)*arg3,arg4,arg5,(Ogre::Quaternion const &)*arg6,(Ogre::String const &)*arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_setSkyBox__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  bool arg2 ;
  Ogre::String *arg3 = 0 ;
  Ogre::Real arg4 ;
  bool arg5 ;
  Ogre::Quaternion *arg6 = 0 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Ogre::SceneManager::setSkyBox",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::setSkyBox",1,"Ogre::SceneManager *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::SceneManager::setSkyBox",2,"bool");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Ogre::SceneManager::setSkyBox",3,"Ogre::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Ogre::SceneManager::setSkyBox",4,"Ogre::Real");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Ogre::SceneManager::setSkyBox",5,"bool");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("Ogre::SceneManager::setSkyBox",6,"Ogre::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_setSkyBox",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  arg4 = (Ogre::Real)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_Ogre__Quaternion,0))){
    SWIG_fail_ptr("SceneManager_setSkyBox",6,SWIGTYPE_p_Ogre__Quaternion);
  }
  
  (arg1)->setSkyBox(arg2,(Ogre::String const &)*arg3,arg4,arg5,(Ogre::Quaternion const &)*arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_setSkyBox__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  bool arg2 ;
  Ogre::String *arg3 = 0 ;
  Ogre::Real arg4 ;
  bool arg5 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Ogre::SceneManager::setSkyBox",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::setSkyBox",1,"Ogre::SceneManager *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::SceneManager::setSkyBox",2,"bool");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Ogre::SceneManager::setSkyBox",3,"Ogre::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Ogre::SceneManager::setSkyBox",4,"Ogre::Real");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Ogre::SceneManager::setSkyBox",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_setSkyBox",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  arg4 = (Ogre::Real)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->setSkyBox(arg2,(Ogre::String const &)*arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_setSkyBox__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  bool arg2 ;
  Ogre::String *arg3 = 0 ;
  Ogre::Real arg4 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Ogre::SceneManager::setSkyBox",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::setSkyBox",1,"Ogre::SceneManager *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::SceneManager::setSkyBox",2,"bool");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Ogre::SceneManager::setSkyBox",3,"Ogre::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Ogre::SceneManager::setSkyBox",4,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_setSkyBox",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  arg4 = (Ogre::Real)lua_tonumber(L, 4);
  (arg1)->setSkyBox(arg2,(Ogre::String const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_setSkyBox__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  bool arg2 ;
  Ogre::String *arg3 = 0 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Ogre::SceneManager::setSkyBox",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::setSkyBox",1,"Ogre::SceneManager *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::SceneManager::setSkyBox",2,"bool");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Ogre::SceneManager::setSkyBox",3,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_setSkyBox",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  (arg1)->setSkyBox(arg2,(Ogre::String const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_setSkyBox(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_SceneManager_setSkyBox__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SceneManager_setSkyBox__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_SceneManager_setSkyBox__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_Ogre__Quaternion, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_SceneManager_setSkyBox__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_Ogre__Quaternion, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = lua_isstring(L,argv[6]);
                }
                if (_v) {
                  return _wrap_SceneManager_setSkyBox__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SceneManager_setSkyBox'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::SceneManager::setSkyBox(bool,Ogre::String const &,Ogre::Real,bool,Ogre::Quaternion const &,Ogre::String const &)\n"
    "    Ogre::SceneManager::setSkyBox(bool,Ogre::String const &,Ogre::Real,bool,Ogre::Quaternion const &)\n"
    "    Ogre::SceneManager::setSkyBox(bool,Ogre::String const &,Ogre::Real,bool)\n"
    "    Ogre::SceneManager::setSkyBox(bool,Ogre::String const &,Ogre::Real)\n"
    "    Ogre::SceneManager::setSkyBox(bool,Ogre::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SceneManager_setSkyBoxEnabled(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Ogre::SceneManager::setSkyBoxEnabled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::setSkyBoxEnabled",1,"Ogre::SceneManager *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::SceneManager::setSkyBoxEnabled",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_setSkyBoxEnabled",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setSkyBoxEnabled(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_isSkyBoxEnabled(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  bool result;
  
  SWIG_check_num_args("Ogre::SceneManager::isSkyBoxEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::isSkyBoxEnabled",1,"Ogre::SceneManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_isSkyBoxEnabled",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  result = (bool)((Ogre::SceneManager const *)arg1)->isSkyBoxEnabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_getSkyBoxNode(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::SceneNode *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::getSkyBoxNode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::getSkyBoxNode",1,"Ogre::SceneManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_getSkyBoxNode",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  result = (Ogre::SceneNode *)((Ogre::SceneManager const *)arg1)->getSkyBoxNode();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__SceneNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_setSkyDome__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  bool arg2 ;
  Ogre::String *arg3 = 0 ;
  Ogre::Real arg4 ;
  Ogre::Real arg5 ;
  Ogre::Real arg6 ;
  bool arg7 ;
  Ogre::Quaternion *arg8 = 0 ;
  int arg9 ;
  int arg10 ;
  int arg11 ;
  Ogre::String *arg12 = 0 ;
  std::string temp3 ;
  std::string temp12 ;
  
  SWIG_check_num_args("Ogre::SceneManager::setSkyDome",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",1,"Ogre::SceneManager *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",2,"bool");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",3,"Ogre::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",4,"Ogre::Real");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",5,"Ogre::Real");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",6,"Ogre::Real");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",7,"bool");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",8,"Ogre::Quaternion const &");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",9,"int");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",10,"int");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",11,"int");
  if(!lua_isstring(L,12)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",12,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_setSkyDome",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  arg4 = (Ogre::Real)lua_tonumber(L, 4);
  arg5 = (Ogre::Real)lua_tonumber(L, 5);
  arg6 = (Ogre::Real)lua_tonumber(L, 6);
  arg7 = (lua_toboolean(L, 7)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_Ogre__Quaternion,0))){
    SWIG_fail_ptr("SceneManager_setSkyDome",8,SWIGTYPE_p_Ogre__Quaternion);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  arg10 = (int)lua_tonumber(L, 10);
  arg11 = (int)lua_tonumber(L, 11);
  temp12.assign(lua_tostring(L,12),lua_strlen(L,12)); arg12=&temp12;
  (arg1)->setSkyDome(arg2,(Ogre::String const &)*arg3,arg4,arg5,arg6,arg7,(Ogre::Quaternion const &)*arg8,arg9,arg10,arg11,(Ogre::String const &)*arg12);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_setSkyDome__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  bool arg2 ;
  Ogre::String *arg3 = 0 ;
  Ogre::Real arg4 ;
  Ogre::Real arg5 ;
  Ogre::Real arg6 ;
  bool arg7 ;
  Ogre::Quaternion *arg8 = 0 ;
  int arg9 ;
  int arg10 ;
  int arg11 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Ogre::SceneManager::setSkyDome",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",1,"Ogre::SceneManager *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",2,"bool");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",3,"Ogre::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",4,"Ogre::Real");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",5,"Ogre::Real");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",6,"Ogre::Real");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",7,"bool");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",8,"Ogre::Quaternion const &");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",9,"int");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",10,"int");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",11,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_setSkyDome",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  arg4 = (Ogre::Real)lua_tonumber(L, 4);
  arg5 = (Ogre::Real)lua_tonumber(L, 5);
  arg6 = (Ogre::Real)lua_tonumber(L, 6);
  arg7 = (lua_toboolean(L, 7)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_Ogre__Quaternion,0))){
    SWIG_fail_ptr("SceneManager_setSkyDome",8,SWIGTYPE_p_Ogre__Quaternion);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  arg10 = (int)lua_tonumber(L, 10);
  arg11 = (int)lua_tonumber(L, 11);
  (arg1)->setSkyDome(arg2,(Ogre::String const &)*arg3,arg4,arg5,arg6,arg7,(Ogre::Quaternion const &)*arg8,arg9,arg10,arg11);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_setSkyDome__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  bool arg2 ;
  Ogre::String *arg3 = 0 ;
  Ogre::Real arg4 ;
  Ogre::Real arg5 ;
  Ogre::Real arg6 ;
  bool arg7 ;
  Ogre::Quaternion *arg8 = 0 ;
  int arg9 ;
  int arg10 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Ogre::SceneManager::setSkyDome",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",1,"Ogre::SceneManager *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",2,"bool");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",3,"Ogre::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",4,"Ogre::Real");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",5,"Ogre::Real");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",6,"Ogre::Real");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",7,"bool");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",8,"Ogre::Quaternion const &");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",9,"int");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",10,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_setSkyDome",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  arg4 = (Ogre::Real)lua_tonumber(L, 4);
  arg5 = (Ogre::Real)lua_tonumber(L, 5);
  arg6 = (Ogre::Real)lua_tonumber(L, 6);
  arg7 = (lua_toboolean(L, 7)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_Ogre__Quaternion,0))){
    SWIG_fail_ptr("SceneManager_setSkyDome",8,SWIGTYPE_p_Ogre__Quaternion);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  arg10 = (int)lua_tonumber(L, 10);
  (arg1)->setSkyDome(arg2,(Ogre::String const &)*arg3,arg4,arg5,arg6,arg7,(Ogre::Quaternion const &)*arg8,arg9,arg10);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_setSkyDome__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  bool arg2 ;
  Ogre::String *arg3 = 0 ;
  Ogre::Real arg4 ;
  Ogre::Real arg5 ;
  Ogre::Real arg6 ;
  bool arg7 ;
  Ogre::Quaternion *arg8 = 0 ;
  int arg9 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Ogre::SceneManager::setSkyDome",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",1,"Ogre::SceneManager *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",2,"bool");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",3,"Ogre::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",4,"Ogre::Real");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",5,"Ogre::Real");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",6,"Ogre::Real");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",7,"bool");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",8,"Ogre::Quaternion const &");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",9,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_setSkyDome",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  arg4 = (Ogre::Real)lua_tonumber(L, 4);
  arg5 = (Ogre::Real)lua_tonumber(L, 5);
  arg6 = (Ogre::Real)lua_tonumber(L, 6);
  arg7 = (lua_toboolean(L, 7)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_Ogre__Quaternion,0))){
    SWIG_fail_ptr("SceneManager_setSkyDome",8,SWIGTYPE_p_Ogre__Quaternion);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  (arg1)->setSkyDome(arg2,(Ogre::String const &)*arg3,arg4,arg5,arg6,arg7,(Ogre::Quaternion const &)*arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_setSkyDome__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  bool arg2 ;
  Ogre::String *arg3 = 0 ;
  Ogre::Real arg4 ;
  Ogre::Real arg5 ;
  Ogre::Real arg6 ;
  bool arg7 ;
  Ogre::Quaternion *arg8 = 0 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Ogre::SceneManager::setSkyDome",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",1,"Ogre::SceneManager *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",2,"bool");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",3,"Ogre::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",4,"Ogre::Real");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",5,"Ogre::Real");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",6,"Ogre::Real");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",7,"bool");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",8,"Ogre::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_setSkyDome",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  arg4 = (Ogre::Real)lua_tonumber(L, 4);
  arg5 = (Ogre::Real)lua_tonumber(L, 5);
  arg6 = (Ogre::Real)lua_tonumber(L, 6);
  arg7 = (lua_toboolean(L, 7)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_Ogre__Quaternion,0))){
    SWIG_fail_ptr("SceneManager_setSkyDome",8,SWIGTYPE_p_Ogre__Quaternion);
  }
  
  (arg1)->setSkyDome(arg2,(Ogre::String const &)*arg3,arg4,arg5,arg6,arg7,(Ogre::Quaternion const &)*arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_setSkyDome__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  bool arg2 ;
  Ogre::String *arg3 = 0 ;
  Ogre::Real arg4 ;
  Ogre::Real arg5 ;
  Ogre::Real arg6 ;
  bool arg7 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Ogre::SceneManager::setSkyDome",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",1,"Ogre::SceneManager *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",2,"bool");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",3,"Ogre::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",4,"Ogre::Real");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",5,"Ogre::Real");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",6,"Ogre::Real");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",7,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_setSkyDome",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  arg4 = (Ogre::Real)lua_tonumber(L, 4);
  arg5 = (Ogre::Real)lua_tonumber(L, 5);
  arg6 = (Ogre::Real)lua_tonumber(L, 6);
  arg7 = (lua_toboolean(L, 7)!=0);
  (arg1)->setSkyDome(arg2,(Ogre::String const &)*arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_setSkyDome__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  bool arg2 ;
  Ogre::String *arg3 = 0 ;
  Ogre::Real arg4 ;
  Ogre::Real arg5 ;
  Ogre::Real arg6 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Ogre::SceneManager::setSkyDome",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",1,"Ogre::SceneManager *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",2,"bool");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",3,"Ogre::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",4,"Ogre::Real");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",5,"Ogre::Real");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",6,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_setSkyDome",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  arg4 = (Ogre::Real)lua_tonumber(L, 4);
  arg5 = (Ogre::Real)lua_tonumber(L, 5);
  arg6 = (Ogre::Real)lua_tonumber(L, 6);
  (arg1)->setSkyDome(arg2,(Ogre::String const &)*arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_setSkyDome__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  bool arg2 ;
  Ogre::String *arg3 = 0 ;
  Ogre::Real arg4 ;
  Ogre::Real arg5 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Ogre::SceneManager::setSkyDome",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",1,"Ogre::SceneManager *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",2,"bool");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",3,"Ogre::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",4,"Ogre::Real");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",5,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_setSkyDome",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  arg4 = (Ogre::Real)lua_tonumber(L, 4);
  arg5 = (Ogre::Real)lua_tonumber(L, 5);
  (arg1)->setSkyDome(arg2,(Ogre::String const &)*arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_setSkyDome__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  bool arg2 ;
  Ogre::String *arg3 = 0 ;
  Ogre::Real arg4 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Ogre::SceneManager::setSkyDome",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",1,"Ogre::SceneManager *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",2,"bool");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",3,"Ogre::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",4,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_setSkyDome",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  arg4 = (Ogre::Real)lua_tonumber(L, 4);
  (arg1)->setSkyDome(arg2,(Ogre::String const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_setSkyDome__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  bool arg2 ;
  Ogre::String *arg3 = 0 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Ogre::SceneManager::setSkyDome",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",1,"Ogre::SceneManager *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",2,"bool");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Ogre::SceneManager::setSkyDome",3,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_setSkyDome",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  (arg1)->setSkyDome(arg2,(Ogre::String const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_setSkyDome(lua_State* L) {
  int argc;
  int argv[13]={
    1,2,3,4,5,6,7,8,9,10,11,12,13
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_SceneManager_setSkyDome__SWIG_9(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SceneManager_setSkyDome__SWIG_8(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_SceneManager_setSkyDome__SWIG_7(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_SceneManager_setSkyDome__SWIG_6(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  return _wrap_SceneManager_setSkyDome__SWIG_5(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_Ogre__Quaternion, 0)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    return _wrap_SceneManager_setSkyDome__SWIG_4(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_Ogre__Quaternion, 0)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      return _wrap_SceneManager_setSkyDome__SWIG_3(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_Ogre__Quaternion, 0)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        return _wrap_SceneManager_setSkyDome__SWIG_2(L);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 11) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_Ogre__Quaternion, 0)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isnumber(L,argv[10]);
                        }
                        if (_v) {
                          return _wrap_SceneManager_setSkyDome__SWIG_1(L);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 12) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_Ogre__Quaternion, 0)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isnumber(L,argv[10]);
                        }
                        if (_v) {
                          {
                            _v = lua_isstring(L,argv[11]);
                          }
                          if (_v) {
                            return _wrap_SceneManager_setSkyDome__SWIG_0(L);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SceneManager_setSkyDome'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::SceneManager::setSkyDome(bool,Ogre::String const &,Ogre::Real,Ogre::Real,Ogre::Real,bool,Ogre::Quaternion const &,int,int,int,Ogre::String const &)\n"
    "    Ogre::SceneManager::setSkyDome(bool,Ogre::String const &,Ogre::Real,Ogre::Real,Ogre::Real,bool,Ogre::Quaternion const &,int,int,int)\n"
    "    Ogre::SceneManager::setSkyDome(bool,Ogre::String const &,Ogre::Real,Ogre::Real,Ogre::Real,bool,Ogre::Quaternion const &,int,int)\n"
    "    Ogre::SceneManager::setSkyDome(bool,Ogre::String const &,Ogre::Real,Ogre::Real,Ogre::Real,bool,Ogre::Quaternion const &,int)\n"
    "    Ogre::SceneManager::setSkyDome(bool,Ogre::String const &,Ogre::Real,Ogre::Real,Ogre::Real,bool,Ogre::Quaternion const &)\n"
    "    Ogre::SceneManager::setSkyDome(bool,Ogre::String const &,Ogre::Real,Ogre::Real,Ogre::Real,bool)\n"
    "    Ogre::SceneManager::setSkyDome(bool,Ogre::String const &,Ogre::Real,Ogre::Real,Ogre::Real)\n"
    "    Ogre::SceneManager::setSkyDome(bool,Ogre::String const &,Ogre::Real,Ogre::Real)\n"
    "    Ogre::SceneManager::setSkyDome(bool,Ogre::String const &,Ogre::Real)\n"
    "    Ogre::SceneManager::setSkyDome(bool,Ogre::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SceneManager_setFog__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::FogMode arg2 ;
  Ogre::ColourValue *arg3 = 0 ;
  Ogre::Real arg4 ;
  Ogre::Real arg5 ;
  Ogre::Real arg6 ;
  
  SWIG_check_num_args("Ogre::SceneManager::setFog",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::setFog",1,"Ogre::SceneManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::SceneManager::setFog",2,"Ogre::FogMode");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Ogre::SceneManager::setFog",3,"Ogre::ColourValue const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Ogre::SceneManager::setFog",4,"Ogre::Real");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Ogre::SceneManager::setFog",5,"Ogre::Real");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Ogre::SceneManager::setFog",6,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_setFog",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  arg2 = (Ogre::FogMode)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Ogre__ColourValue,0))){
    SWIG_fail_ptr("SceneManager_setFog",3,SWIGTYPE_p_Ogre__ColourValue);
  }
  
  arg4 = (Ogre::Real)lua_tonumber(L, 4);
  arg5 = (Ogre::Real)lua_tonumber(L, 5);
  arg6 = (Ogre::Real)lua_tonumber(L, 6);
  (arg1)->setFog(arg2,(Ogre::ColourValue const &)*arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_setFog__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::FogMode arg2 ;
  Ogre::ColourValue *arg3 = 0 ;
  Ogre::Real arg4 ;
  Ogre::Real arg5 ;
  
  SWIG_check_num_args("Ogre::SceneManager::setFog",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::setFog",1,"Ogre::SceneManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::SceneManager::setFog",2,"Ogre::FogMode");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Ogre::SceneManager::setFog",3,"Ogre::ColourValue const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Ogre::SceneManager::setFog",4,"Ogre::Real");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Ogre::SceneManager::setFog",5,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_setFog",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  arg2 = (Ogre::FogMode)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Ogre__ColourValue,0))){
    SWIG_fail_ptr("SceneManager_setFog",3,SWIGTYPE_p_Ogre__ColourValue);
  }
  
  arg4 = (Ogre::Real)lua_tonumber(L, 4);
  arg5 = (Ogre::Real)lua_tonumber(L, 5);
  (arg1)->setFog(arg2,(Ogre::ColourValue const &)*arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_setFog__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::FogMode arg2 ;
  Ogre::ColourValue *arg3 = 0 ;
  Ogre::Real arg4 ;
  
  SWIG_check_num_args("Ogre::SceneManager::setFog",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::setFog",1,"Ogre::SceneManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::SceneManager::setFog",2,"Ogre::FogMode");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Ogre::SceneManager::setFog",3,"Ogre::ColourValue const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Ogre::SceneManager::setFog",4,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_setFog",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  arg2 = (Ogre::FogMode)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Ogre__ColourValue,0))){
    SWIG_fail_ptr("SceneManager_setFog",3,SWIGTYPE_p_Ogre__ColourValue);
  }
  
  arg4 = (Ogre::Real)lua_tonumber(L, 4);
  (arg1)->setFog(arg2,(Ogre::ColourValue const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_setFog__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::FogMode arg2 ;
  Ogre::ColourValue *arg3 = 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::setFog",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::setFog",1,"Ogre::SceneManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::SceneManager::setFog",2,"Ogre::FogMode");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Ogre::SceneManager::setFog",3,"Ogre::ColourValue const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_setFog",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  arg2 = (Ogre::FogMode)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Ogre__ColourValue,0))){
    SWIG_fail_ptr("SceneManager_setFog",3,SWIGTYPE_p_Ogre__ColourValue);
  }
  
  (arg1)->setFog(arg2,(Ogre::ColourValue const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_setFog__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::FogMode arg2 ;
  
  SWIG_check_num_args("Ogre::SceneManager::setFog",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::setFog",1,"Ogre::SceneManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::SceneManager::setFog",2,"Ogre::FogMode");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_setFog",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  arg2 = (Ogre::FogMode)(int)lua_tonumber(L, 2);
  (arg1)->setFog(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_setFog__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::setFog",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::setFog",1,"Ogre::SceneManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_setFog",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  (arg1)->setFog();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_setFog(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SceneManager_setFog__SWIG_5(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SceneManager_setFog__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Ogre__ColourValue, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SceneManager_setFog__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Ogre__ColourValue, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SceneManager_setFog__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Ogre__ColourValue, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_SceneManager_setFog__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Ogre__ColourValue, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_SceneManager_setFog__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SceneManager_setFog'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::SceneManager::setFog(Ogre::FogMode,Ogre::ColourValue const &,Ogre::Real,Ogre::Real,Ogre::Real)\n"
    "    Ogre::SceneManager::setFog(Ogre::FogMode,Ogre::ColourValue const &,Ogre::Real,Ogre::Real)\n"
    "    Ogre::SceneManager::setFog(Ogre::FogMode,Ogre::ColourValue const &,Ogre::Real)\n"
    "    Ogre::SceneManager::setFog(Ogre::FogMode,Ogre::ColourValue const &)\n"
    "    Ogre::SceneManager::setFog(Ogre::FogMode)\n"
    "    Ogre::SceneManager::setFog()\n");
  lua_error(L);return 0;
}


static int _wrap_SceneManager_getFogMode(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::FogMode result;
  
  SWIG_check_num_args("Ogre::SceneManager::getFogMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::getFogMode",1,"Ogre::SceneManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_getFogMode",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  result = (Ogre::FogMode)((Ogre::SceneManager const *)arg1)->getFogMode();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_getFogColour(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::ColourValue *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::getFogColour",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::getFogColour",1,"Ogre::SceneManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_getFogColour",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  result = (Ogre::ColourValue *) &((Ogre::SceneManager const *)arg1)->getFogColour();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__ColourValue,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_getFogStart(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::Real result;
  
  SWIG_check_num_args("Ogre::SceneManager::getFogStart",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::getFogStart",1,"Ogre::SceneManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_getFogStart",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  result = (Ogre::Real)((Ogre::SceneManager const *)arg1)->getFogStart();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_getFogEnd(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::Real result;
  
  SWIG_check_num_args("Ogre::SceneManager::getFogEnd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::getFogEnd",1,"Ogre::SceneManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_getFogEnd",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  result = (Ogre::Real)((Ogre::SceneManager const *)arg1)->getFogEnd();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_getFogDensity(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::Real result;
  
  SWIG_check_num_args("Ogre::SceneManager::getFogDensity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::getFogDensity",1,"Ogre::SceneManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_getFogDensity",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  result = (Ogre::Real)((Ogre::SceneManager const *)arg1)->getFogDensity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_setShadowTechnique(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::ShadowTechnique arg2 ;
  
  SWIG_check_num_args("Ogre::SceneManager::setShadowTechnique",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::setShadowTechnique",1,"Ogre::SceneManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::SceneManager::setShadowTechnique",2,"Ogre::ShadowTechnique");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_setShadowTechnique",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  arg2 = (Ogre::ShadowTechnique)(int)lua_tonumber(L, 2);
  (arg1)->setShadowTechnique(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_getShadowTechnique(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::ShadowTechnique result;
  
  SWIG_check_num_args("Ogre::SceneManager::getShadowTechnique",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::getShadowTechnique",1,"Ogre::SceneManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_getShadowTechnique",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  result = (Ogre::ShadowTechnique)((Ogre::SceneManager const *)arg1)->getShadowTechnique();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_setShadowColour(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::ColourValue *arg2 = 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::setShadowColour",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::setShadowColour",1,"Ogre::SceneManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::SceneManager::setShadowColour",2,"Ogre::ColourValue const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_setShadowColour",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__ColourValue,0))){
    SWIG_fail_ptr("SceneManager_setShadowColour",2,SWIGTYPE_p_Ogre__ColourValue);
  }
  
  (arg1)->setShadowColour((Ogre::ColourValue const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_getShadowColour(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::ColourValue *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::getShadowColour",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::getShadowColour",1,"Ogre::SceneManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_getShadowColour",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  result = (Ogre::ColourValue *) &((Ogre::SceneManager const *)arg1)->getShadowColour();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__ColourValue,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_createStaticGeometry(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  Ogre::StaticGeometry *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::createStaticGeometry",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::createStaticGeometry",1,"Ogre::SceneManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::SceneManager::createStaticGeometry",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_createStaticGeometry",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (Ogre::StaticGeometry *)(arg1)->createStaticGeometry((Ogre::String const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__StaticGeometry,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_getStaticGeometry(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  Ogre::StaticGeometry *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::getStaticGeometry",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::getStaticGeometry",1,"Ogre::SceneManager const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::SceneManager::getStaticGeometry",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_getStaticGeometry",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (Ogre::StaticGeometry *)((Ogre::SceneManager const *)arg1)->getStaticGeometry((Ogre::String const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__StaticGeometry,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_hasStaticGeometry(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("Ogre::SceneManager::hasStaticGeometry",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::hasStaticGeometry",1,"Ogre::SceneManager const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::SceneManager::hasStaticGeometry",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_hasStaticGeometry",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (bool)((Ogre::SceneManager const *)arg1)->hasStaticGeometry((Ogre::String const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_destroyStaticGeometry__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::StaticGeometry *arg2 = (Ogre::StaticGeometry *) 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::destroyStaticGeometry",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::destroyStaticGeometry",1,"Ogre::SceneManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Ogre::SceneManager::destroyStaticGeometry",2,"Ogre::StaticGeometry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_destroyStaticGeometry",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__StaticGeometry,0))){
    SWIG_fail_ptr("SceneManager_destroyStaticGeometry",2,SWIGTYPE_p_Ogre__StaticGeometry);
  }
  
  (arg1)->destroyStaticGeometry(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_destroyStaticGeometry__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Ogre::SceneManager::destroyStaticGeometry",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::destroyStaticGeometry",1,"Ogre::SceneManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::SceneManager::destroyStaticGeometry",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_destroyStaticGeometry",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->destroyStaticGeometry((Ogre::String const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_destroyStaticGeometry(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__StaticGeometry, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SceneManager_destroyStaticGeometry__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SceneManager_destroyStaticGeometry__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SceneManager_destroyStaticGeometry'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::SceneManager::destroyStaticGeometry(Ogre::StaticGeometry *)\n"
    "    Ogre::SceneManager::destroyStaticGeometry(Ogre::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SceneManager_destroyAllStaticGeometry(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::destroyAllStaticGeometry",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::destroyAllStaticGeometry",1,"Ogre::SceneManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_destroyAllStaticGeometry",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  (arg1)->destroyAllStaticGeometry();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_createInstancedGeometry(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  Ogre::InstancedGeometry *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::createInstancedGeometry",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::createInstancedGeometry",1,"Ogre::SceneManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::SceneManager::createInstancedGeometry",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_createInstancedGeometry",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (Ogre::InstancedGeometry *)(arg1)->createInstancedGeometry((Ogre::String const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__InstancedGeometry,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_getInstancedGeometry(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  Ogre::InstancedGeometry *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::getInstancedGeometry",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::getInstancedGeometry",1,"Ogre::SceneManager const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::SceneManager::getInstancedGeometry",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_getInstancedGeometry",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (Ogre::InstancedGeometry *)((Ogre::SceneManager const *)arg1)->getInstancedGeometry((Ogre::String const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__InstancedGeometry,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_destroyInstancedGeometry__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::InstancedGeometry *arg2 = (Ogre::InstancedGeometry *) 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::destroyInstancedGeometry",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::destroyInstancedGeometry",1,"Ogre::SceneManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Ogre::SceneManager::destroyInstancedGeometry",2,"Ogre::InstancedGeometry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_destroyInstancedGeometry",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__InstancedGeometry,0))){
    SWIG_fail_ptr("SceneManager_destroyInstancedGeometry",2,SWIGTYPE_p_Ogre__InstancedGeometry);
  }
  
  (arg1)->destroyInstancedGeometry(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_destroyInstancedGeometry__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Ogre::SceneManager::destroyInstancedGeometry",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::destroyInstancedGeometry",1,"Ogre::SceneManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::SceneManager::destroyInstancedGeometry",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_destroyInstancedGeometry",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->destroyInstancedGeometry((Ogre::String const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_destroyInstancedGeometry(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__InstancedGeometry, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SceneManager_destroyInstancedGeometry__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SceneManager_destroyInstancedGeometry__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SceneManager_destroyInstancedGeometry'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::SceneManager::destroyInstancedGeometry(Ogre::InstancedGeometry *)\n"
    "    Ogre::SceneManager::destroyInstancedGeometry(Ogre::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SceneManager_destroyAllInstancedGeometry(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::destroyAllInstancedGeometry",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::destroyAllInstancedGeometry",1,"Ogre::SceneManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_destroyAllInstancedGeometry",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  (arg1)->destroyAllInstancedGeometry();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_createRibbonTrail__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  Ogre::RibbonTrail *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::createRibbonTrail",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::createRibbonTrail",1,"Ogre::SceneManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::SceneManager::createRibbonTrail",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_createRibbonTrail",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (Ogre::RibbonTrail *)(arg1)->createRibbonTrail((Ogre::String const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__RibbonTrail,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_createRibbonTrail__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::RibbonTrail *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::createRibbonTrail",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::createRibbonTrail",1,"Ogre::SceneManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_createRibbonTrail",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  result = (Ogre::RibbonTrail *)(arg1)->createRibbonTrail();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__RibbonTrail,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_createRibbonTrail(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SceneManager_createRibbonTrail__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SceneManager_createRibbonTrail__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SceneManager_createRibbonTrail'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::SceneManager::createRibbonTrail(Ogre::String const &)\n"
    "    Ogre::SceneManager::createRibbonTrail()\n");
  lua_error(L);return 0;
}


static int _wrap_SceneManager_getRibbonTrail(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  Ogre::RibbonTrail *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::getRibbonTrail",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::getRibbonTrail",1,"Ogre::SceneManager const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::SceneManager::getRibbonTrail",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_getRibbonTrail",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (Ogre::RibbonTrail *)((Ogre::SceneManager const *)arg1)->getRibbonTrail((Ogre::String const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__RibbonTrail,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_hasRibbonTrail(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("Ogre::SceneManager::hasRibbonTrail",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::hasRibbonTrail",1,"Ogre::SceneManager const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::SceneManager::hasRibbonTrail",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_hasRibbonTrail",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (bool)((Ogre::SceneManager const *)arg1)->hasRibbonTrail((Ogre::String const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_destroyRibbonTrail__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::RibbonTrail *arg2 = (Ogre::RibbonTrail *) 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::destroyRibbonTrail",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::destroyRibbonTrail",1,"Ogre::SceneManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Ogre::SceneManager::destroyRibbonTrail",2,"Ogre::RibbonTrail *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_destroyRibbonTrail",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__RibbonTrail,0))){
    SWIG_fail_ptr("SceneManager_destroyRibbonTrail",2,SWIGTYPE_p_Ogre__RibbonTrail);
  }
  
  (arg1)->destroyRibbonTrail(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_destroyRibbonTrail__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Ogre::SceneManager::destroyRibbonTrail",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::destroyRibbonTrail",1,"Ogre::SceneManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::SceneManager::destroyRibbonTrail",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_destroyRibbonTrail",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->destroyRibbonTrail((Ogre::String const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_destroyRibbonTrail(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__RibbonTrail, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SceneManager_destroyRibbonTrail__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SceneManager_destroyRibbonTrail__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SceneManager_destroyRibbonTrail'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::SceneManager::destroyRibbonTrail(Ogre::RibbonTrail *)\n"
    "    Ogre::SceneManager::destroyRibbonTrail(Ogre::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SceneManager_destroyAllRibbonTrails(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::destroyAllRibbonTrails",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::destroyAllRibbonTrails",1,"Ogre::SceneManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_destroyAllRibbonTrails",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  (arg1)->destroyAllRibbonTrails();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_createBillboardSet__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  unsigned int arg3 ;
  std::string temp2 ;
  Ogre::BillboardSet *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::createBillboardSet",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::createBillboardSet",1,"Ogre::SceneManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::SceneManager::createBillboardSet",2,"Ogre::String const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ogre::SceneManager::createBillboardSet",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_createBillboardSet",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (Ogre::BillboardSet *)(arg1)->createBillboardSet((Ogre::String const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__BillboardSet,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_createBillboardSet__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  Ogre::BillboardSet *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::createBillboardSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::createBillboardSet",1,"Ogre::SceneManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::SceneManager::createBillboardSet",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_createBillboardSet",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (Ogre::BillboardSet *)(arg1)->createBillboardSet((Ogre::String const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__BillboardSet,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_createBillboardSet__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  unsigned int arg2 ;
  Ogre::BillboardSet *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::createBillboardSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::createBillboardSet",1,"Ogre::SceneManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ogre::SceneManager::createBillboardSet",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_createBillboardSet",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Ogre::BillboardSet *)(arg1)->createBillboardSet(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__BillboardSet,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_createBillboardSet__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::BillboardSet *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::createBillboardSet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::createBillboardSet",1,"Ogre::SceneManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_createBillboardSet",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  result = (Ogre::BillboardSet *)(arg1)->createBillboardSet();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__BillboardSet,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_createBillboardSet(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SceneManager_createBillboardSet__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SceneManager_createBillboardSet__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SceneManager_createBillboardSet__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SceneManager_createBillboardSet__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SceneManager_createBillboardSet'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::SceneManager::createBillboardSet(Ogre::String const &,unsigned int)\n"
    "    Ogre::SceneManager::createBillboardSet(Ogre::String const &)\n"
    "    Ogre::SceneManager::createBillboardSet(unsigned int)\n"
    "    Ogre::SceneManager::createBillboardSet()\n");
  lua_error(L);return 0;
}


static int _wrap_SceneManager_getBillboardSet(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  Ogre::BillboardSet *result = 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::getBillboardSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::getBillboardSet",1,"Ogre::SceneManager const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::SceneManager::getBillboardSet",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_getBillboardSet",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (Ogre::BillboardSet *)((Ogre::SceneManager const *)arg1)->getBillboardSet((Ogre::String const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__BillboardSet,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_hasBillboardSet(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("Ogre::SceneManager::hasBillboardSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::hasBillboardSet",1,"Ogre::SceneManager const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::SceneManager::hasBillboardSet",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_hasBillboardSet",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (bool)((Ogre::SceneManager const *)arg1)->hasBillboardSet((Ogre::String const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_destroyBillboardSet__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::BillboardSet *arg2 = (Ogre::BillboardSet *) 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::destroyBillboardSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::destroyBillboardSet",1,"Ogre::SceneManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Ogre::SceneManager::destroyBillboardSet",2,"Ogre::BillboardSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_destroyBillboardSet",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__BillboardSet,0))){
    SWIG_fail_ptr("SceneManager_destroyBillboardSet",2,SWIGTYPE_p_Ogre__BillboardSet);
  }
  
  (arg1)->destroyBillboardSet(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_destroyBillboardSet__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Ogre::SceneManager::destroyBillboardSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::destroyBillboardSet",1,"Ogre::SceneManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::SceneManager::destroyBillboardSet",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_destroyBillboardSet",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->destroyBillboardSet((Ogre::String const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneManager_destroyBillboardSet(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__BillboardSet, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SceneManager_destroyBillboardSet__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__SceneManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SceneManager_destroyBillboardSet__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SceneManager_destroyBillboardSet'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::SceneManager::destroyBillboardSet(Ogre::BillboardSet *)\n"
    "    Ogre::SceneManager::destroyBillboardSet(Ogre::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SceneManager_destroyAllBillboardSets(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  
  SWIG_check_num_args("Ogre::SceneManager::destroyAllBillboardSets",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::SceneManager::destroyAllBillboardSets",1,"Ogre::SceneManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("SceneManager_destroyAllBillboardSets",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  (arg1)->destroyAllBillboardSets();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_Ogre_SceneManager_methods[] = {
    {"createCamera", _wrap_SceneManager_createCamera}, 
    {"getCamera", _wrap_SceneManager_getCamera}, 
    {"hasCamera", _wrap_SceneManager_hasCamera}, 
    {"destroyAllCameras", _wrap_SceneManager_destroyAllCameras}, 
    {"destroyCamera", _wrap_SceneManager_destroyCamera}, 
    {"createLight", _wrap_SceneManager_createLight}, 
    {"getLight", _wrap_SceneManager_getLight}, 
    {"hasLight", _wrap_SceneManager_hasLight}, 
    {"destroyLight", _wrap_SceneManager_destroyLight}, 
    {"destroyAllLights", _wrap_SceneManager_destroyAllLights}, 
    {"setAmbientLight", _wrap_SceneManager_setAmbientLight}, 
    {"getAmbientLight", _wrap_SceneManager_getAmbientLight}, 
    {"setWorldGeometry", _wrap_SceneManager_setWorldGeometry}, 
    {"clearScene", _wrap_SceneManager_clearScene}, 
    {"createSceneNode", _wrap_SceneManager_createSceneNode}, 
    {"destroySceneNode", _wrap_SceneManager_destroySceneNode}, 
    {"getRootSceneNode", _wrap_SceneManager_getRootSceneNode}, 
    {"getSceneNode", _wrap_SceneManager_getSceneNode}, 
    {"hasSceneNode", _wrap_SceneManager_hasSceneNode}, 
    {"createEntity", _wrap_SceneManager_createEntity}, 
    {"getEntity", _wrap_SceneManager_getEntity}, 
    {"hasEntity", _wrap_SceneManager_hasEntity}, 
    {"destroyEntity", _wrap_SceneManager_destroyEntity}, 
    {"destroyAllEntities", _wrap_SceneManager_destroyAllEntities}, 
    {"setSkyPlane", _wrap_SceneManager_setSkyPlane}, 
    {"setSkyPlaneEnabled", _wrap_SceneManager_setSkyPlaneEnabled}, 
    {"isSkyPlaneEnabled", _wrap_SceneManager_isSkyPlaneEnabled}, 
    {"getSkyPlaneNode", _wrap_SceneManager_getSkyPlaneNode}, 
    {"setSkyBox", _wrap_SceneManager_setSkyBox}, 
    {"setSkyBoxEnabled", _wrap_SceneManager_setSkyBoxEnabled}, 
    {"isSkyBoxEnabled", _wrap_SceneManager_isSkyBoxEnabled}, 
    {"getSkyBoxNode", _wrap_SceneManager_getSkyBoxNode}, 
    {"setSkyDome", _wrap_SceneManager_setSkyDome}, 
    {"setFog", _wrap_SceneManager_setFog}, 
    {"getFogMode", _wrap_SceneManager_getFogMode}, 
    {"getFogColour", _wrap_SceneManager_getFogColour}, 
    {"getFogStart", _wrap_SceneManager_getFogStart}, 
    {"getFogEnd", _wrap_SceneManager_getFogEnd}, 
    {"getFogDensity", _wrap_SceneManager_getFogDensity}, 
    {"setShadowTechnique", _wrap_SceneManager_setShadowTechnique}, 
    {"getShadowTechnique", _wrap_SceneManager_getShadowTechnique}, 
    {"setShadowColour", _wrap_SceneManager_setShadowColour}, 
    {"getShadowColour", _wrap_SceneManager_getShadowColour}, 
    {"createStaticGeometry", _wrap_SceneManager_createStaticGeometry}, 
    {"getStaticGeometry", _wrap_SceneManager_getStaticGeometry}, 
    {"hasStaticGeometry", _wrap_SceneManager_hasStaticGeometry}, 
    {"destroyStaticGeometry", _wrap_SceneManager_destroyStaticGeometry}, 
    {"destroyAllStaticGeometry", _wrap_SceneManager_destroyAllStaticGeometry}, 
    {"createInstancedGeometry", _wrap_SceneManager_createInstancedGeometry}, 
    {"getInstancedGeometry", _wrap_SceneManager_getInstancedGeometry}, 
    {"destroyInstancedGeometry", _wrap_SceneManager_destroyInstancedGeometry}, 
    {"destroyAllInstancedGeometry", _wrap_SceneManager_destroyAllInstancedGeometry}, 
    {"createRibbonTrail", _wrap_SceneManager_createRibbonTrail}, 
    {"getRibbonTrail", _wrap_SceneManager_getRibbonTrail}, 
    {"hasRibbonTrail", _wrap_SceneManager_hasRibbonTrail}, 
    {"destroyRibbonTrail", _wrap_SceneManager_destroyRibbonTrail}, 
    {"destroyAllRibbonTrails", _wrap_SceneManager_destroyAllRibbonTrails}, 
    {"createBillboardSet", _wrap_SceneManager_createBillboardSet}, 
    {"getBillboardSet", _wrap_SceneManager_getBillboardSet}, 
    {"hasBillboardSet", _wrap_SceneManager_hasBillboardSet}, 
    {"destroyBillboardSet", _wrap_SceneManager_destroyBillboardSet}, 
    {"destroyAllBillboardSets", _wrap_SceneManager_destroyAllBillboardSets}, 
    {0,0}
};
static swig_lua_attribute swig_Ogre_SceneManager_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Ogre_SceneManager_bases[] = {0};
static const char *swig_Ogre_SceneManager_base_names[] = {0};
static swig_lua_class _wrap_class_Ogre_SceneManager = { "SceneManager", &SWIGTYPE_p_Ogre__SceneManager,0,0, swig_Ogre_SceneManager_methods, swig_Ogre_SceneManager_attributes, swig_Ogre_SceneManager_bases, swig_Ogre_SceneManager_base_names };

static int _wrap_Viewport_getActualDimensions(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Viewport *arg1 = (Ogre::Viewport *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  
  SWIG_check_num_args("Ogre::Viewport::getActualDimensions",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Viewport::getActualDimensions",1,"Ogre::Viewport const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::Viewport::getActualDimensions",2,"int &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Ogre::Viewport::getActualDimensions",3,"int &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Ogre::Viewport::getActualDimensions",4,"int &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Ogre::Viewport::getActualDimensions",5,"int &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Viewport,0))){
    SWIG_fail_ptr("Viewport_getActualDimensions",1,SWIGTYPE_p_Ogre__Viewport);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("Viewport_getActualDimensions",2,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("Viewport_getActualDimensions",3,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("Viewport_getActualDimensions",4,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("Viewport_getActualDimensions",5,SWIGTYPE_p_int);
  }
  
  ((Ogre::Viewport const *)arg1)->getActualDimensions(*arg2,*arg3,*arg4,*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Viewport_getCamera(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Viewport *arg1 = (Ogre::Viewport *) 0 ;
  Ogre::Camera *result = 0 ;
  
  SWIG_check_num_args("Ogre::Viewport::getCamera",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Viewport::getCamera",1,"Ogre::Viewport const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Viewport,0))){
    SWIG_fail_ptr("Viewport_getCamera",1,SWIGTYPE_p_Ogre__Viewport);
  }
  
  result = (Ogre::Camera *)((Ogre::Viewport const *)arg1)->getCamera();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Camera,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Viewport_setCamera(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Viewport *arg1 = (Ogre::Viewport *) 0 ;
  Ogre::Camera *arg2 = (Ogre::Camera *) 0 ;
  
  SWIG_check_num_args("Ogre::Viewport::setCamera",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Viewport::setCamera",1,"Ogre::Viewport *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Ogre::Viewport::setCamera",2,"Ogre::Camera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Viewport,0))){
    SWIG_fail_ptr("Viewport_setCamera",1,SWIGTYPE_p_Ogre__Viewport);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Camera,0))){
    SWIG_fail_ptr("Viewport_setCamera",2,SWIGTYPE_p_Ogre__Camera);
  }
  
  (arg1)->setCamera(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Viewport_getLeft(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Viewport *arg1 = (Ogre::Viewport *) 0 ;
  Ogre::Real result;
  
  SWIG_check_num_args("Ogre::Viewport::getLeft",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Viewport::getLeft",1,"Ogre::Viewport const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Viewport,0))){
    SWIG_fail_ptr("Viewport_getLeft",1,SWIGTYPE_p_Ogre__Viewport);
  }
  
  result = (Ogre::Real)((Ogre::Viewport const *)arg1)->getLeft();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Viewport_getTop(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Viewport *arg1 = (Ogre::Viewport *) 0 ;
  Ogre::Real result;
  
  SWIG_check_num_args("Ogre::Viewport::getTop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Viewport::getTop",1,"Ogre::Viewport const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Viewport,0))){
    SWIG_fail_ptr("Viewport_getTop",1,SWIGTYPE_p_Ogre__Viewport);
  }
  
  result = (Ogre::Real)((Ogre::Viewport const *)arg1)->getTop();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Viewport_getWidth(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Viewport *arg1 = (Ogre::Viewport *) 0 ;
  Ogre::Real result;
  
  SWIG_check_num_args("Ogre::Viewport::getWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Viewport::getWidth",1,"Ogre::Viewport const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Viewport,0))){
    SWIG_fail_ptr("Viewport_getWidth",1,SWIGTYPE_p_Ogre__Viewport);
  }
  
  result = (Ogre::Real)((Ogre::Viewport const *)arg1)->getWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Viewport_getHeight(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Viewport *arg1 = (Ogre::Viewport *) 0 ;
  Ogre::Real result;
  
  SWIG_check_num_args("Ogre::Viewport::getHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Viewport::getHeight",1,"Ogre::Viewport const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Viewport,0))){
    SWIG_fail_ptr("Viewport_getHeight",1,SWIGTYPE_p_Ogre__Viewport);
  }
  
  result = (Ogre::Real)((Ogre::Viewport const *)arg1)->getHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Viewport_getActualLeft(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Viewport *arg1 = (Ogre::Viewport *) 0 ;
  int result;
  
  SWIG_check_num_args("Ogre::Viewport::getActualLeft",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Viewport::getActualLeft",1,"Ogre::Viewport const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Viewport,0))){
    SWIG_fail_ptr("Viewport_getActualLeft",1,SWIGTYPE_p_Ogre__Viewport);
  }
  
  result = (int)((Ogre::Viewport const *)arg1)->getActualLeft();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Viewport_getActualTop(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Viewport *arg1 = (Ogre::Viewport *) 0 ;
  int result;
  
  SWIG_check_num_args("Ogre::Viewport::getActualTop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Viewport::getActualTop",1,"Ogre::Viewport const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Viewport,0))){
    SWIG_fail_ptr("Viewport_getActualTop",1,SWIGTYPE_p_Ogre__Viewport);
  }
  
  result = (int)((Ogre::Viewport const *)arg1)->getActualTop();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Viewport_getActualWidth(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Viewport *arg1 = (Ogre::Viewport *) 0 ;
  int result;
  
  SWIG_check_num_args("Ogre::Viewport::getActualWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Viewport::getActualWidth",1,"Ogre::Viewport const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Viewport,0))){
    SWIG_fail_ptr("Viewport_getActualWidth",1,SWIGTYPE_p_Ogre__Viewport);
  }
  
  result = (int)((Ogre::Viewport const *)arg1)->getActualWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Viewport_getActualHeight(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Viewport *arg1 = (Ogre::Viewport *) 0 ;
  int result;
  
  SWIG_check_num_args("Ogre::Viewport::getActualHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Viewport::getActualHeight",1,"Ogre::Viewport const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Viewport,0))){
    SWIG_fail_ptr("Viewport_getActualHeight",1,SWIGTYPE_p_Ogre__Viewport);
  }
  
  result = (int)((Ogre::Viewport const *)arg1)->getActualHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Viewport_setBackgroundColour(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Viewport *arg1 = (Ogre::Viewport *) 0 ;
  Ogre::ColourValue *arg2 = 0 ;
  
  SWIG_check_num_args("Ogre::Viewport::setBackgroundColour",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Viewport::setBackgroundColour",1,"Ogre::Viewport *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ogre::Viewport::setBackgroundColour",2,"Ogre::ColourValue const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Viewport,0))){
    SWIG_fail_ptr("Viewport_setBackgroundColour",1,SWIGTYPE_p_Ogre__Viewport);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__ColourValue,0))){
    SWIG_fail_ptr("Viewport_setBackgroundColour",2,SWIGTYPE_p_Ogre__ColourValue);
  }
  
  (arg1)->setBackgroundColour((Ogre::ColourValue const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Viewport_getBackgroundColour(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Viewport *arg1 = (Ogre::Viewport *) 0 ;
  Ogre::ColourValue *result = 0 ;
  
  SWIG_check_num_args("Ogre::Viewport::getBackgroundColour",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::Viewport::getBackgroundColour",1,"Ogre::Viewport const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Viewport,0))){
    SWIG_fail_ptr("Viewport_getBackgroundColour",1,SWIGTYPE_p_Ogre__Viewport);
  }
  
  result = (Ogre::ColourValue *) &((Ogre::Viewport const *)arg1)->getBackgroundColour();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__ColourValue,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_Ogre_Viewport_methods[] = {
    {"getActualDimensions", _wrap_Viewport_getActualDimensions}, 
    {"getCamera", _wrap_Viewport_getCamera}, 
    {"setCamera", _wrap_Viewport_setCamera}, 
    {"getLeft", _wrap_Viewport_getLeft}, 
    {"getTop", _wrap_Viewport_getTop}, 
    {"getWidth", _wrap_Viewport_getWidth}, 
    {"getHeight", _wrap_Viewport_getHeight}, 
    {"getActualLeft", _wrap_Viewport_getActualLeft}, 
    {"getActualTop", _wrap_Viewport_getActualTop}, 
    {"getActualWidth", _wrap_Viewport_getActualWidth}, 
    {"getActualHeight", _wrap_Viewport_getActualHeight}, 
    {"setBackgroundColour", _wrap_Viewport_setBackgroundColour}, 
    {"getBackgroundColour", _wrap_Viewport_getBackgroundColour}, 
    {0,0}
};
static swig_lua_attribute swig_Ogre_Viewport_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Ogre_Viewport_bases[] = {0};
static const char *swig_Ogre_Viewport_base_names[] = {0};
static swig_lua_class _wrap_class_Ogre_Viewport = { "Viewport", &SWIGTYPE_p_Ogre__Viewport,0,0, swig_Ogre_Viewport_methods, swig_Ogre_Viewport_attributes, swig_Ogre_Viewport_bases, swig_Ogre_Viewport_base_names };

static void swig_delete_MeshPtr(void *obj) {
Ogre::MeshPtr *arg1 = (Ogre::MeshPtr *) obj;
delete arg1;
}
static swig_lua_method swig_Ogre_MeshPtr_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_Ogre_MeshPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Ogre_MeshPtr_bases[] = {0};
static const char *swig_Ogre_MeshPtr_base_names[] = {0};
static swig_lua_class _wrap_class_Ogre_MeshPtr = { "MeshPtr", &SWIGTYPE_p_Ogre__MeshPtr,0, swig_delete_MeshPtr, swig_Ogre_MeshPtr_methods, swig_Ogre_MeshPtr_attributes, swig_Ogre_MeshPtr_bases, swig_Ogre_MeshPtr_base_names };

static int _wrap_MeshManager_getSingleton(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::MeshManager *result = 0 ;
  
  SWIG_check_num_args("Ogre::MeshManager::getSingleton",0,0)
  result = (Ogre::MeshManager *) &Ogre::MeshManager::getSingleton();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__MeshManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MeshManager_createPlane__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::MeshManager *arg1 = (Ogre::MeshManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::Plane *arg4 = 0 ;
  Ogre::Real arg5 ;
  Ogre::Real arg6 ;
  int arg7 ;
  int arg8 ;
  bool arg9 ;
  unsigned short arg10 ;
  Ogre::Real arg11 ;
  Ogre::Real arg12 ;
  Ogre::Vector3 *arg13 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  Ogre::MeshPtr result;
  
  SWIG_check_num_args("Ogre::MeshManager::createPlane",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::MeshManager::createPlane",1,"Ogre::MeshManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::MeshManager::createPlane",2,"Ogre::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Ogre::MeshManager::createPlane",3,"Ogre::String const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Ogre::MeshManager::createPlane",4,"Ogre::Plane const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Ogre::MeshManager::createPlane",5,"Ogre::Real");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Ogre::MeshManager::createPlane",6,"Ogre::Real");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("Ogre::MeshManager::createPlane",7,"int");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("Ogre::MeshManager::createPlane",8,"int");
  if(!lua_isboolean(L,9)) SWIG_fail_arg("Ogre::MeshManager::createPlane",9,"bool");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("Ogre::MeshManager::createPlane",10,"unsigned short");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("Ogre::MeshManager::createPlane",11,"Ogre::Real");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("Ogre::MeshManager::createPlane",12,"Ogre::Real");
  if(!lua_isuserdata(L,13)) SWIG_fail_arg("Ogre::MeshManager::createPlane",13,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__MeshManager,0))){
    SWIG_fail_ptr("MeshManager_createPlane",1,SWIGTYPE_p_Ogre__MeshManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Ogre__Plane,0))){
    SWIG_fail_ptr("MeshManager_createPlane",4,SWIGTYPE_p_Ogre__Plane);
  }
  
  arg5 = (Ogre::Real)lua_tonumber(L, 5);
  arg6 = (Ogre::Real)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  arg8 = (int)lua_tonumber(L, 8);
  arg9 = (lua_toboolean(L, 9)!=0);
  SWIG_contract_assert((lua_tonumber(L,10)>=0),"number must not be negative")
  arg10 = (unsigned short)lua_tonumber(L, 10);
  arg11 = (Ogre::Real)lua_tonumber(L, 11);
  arg12 = (Ogre::Real)lua_tonumber(L, 12);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("MeshManager_createPlane",13,SWIGTYPE_p_Ogre__Vector3);
  }
  
  result = (arg1)->createPlane((Ogre::String const &)*arg2,(Ogre::String const &)*arg3,(Ogre::Plane const &)*arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,(Ogre::Vector3 const &)*arg13);
  {
    Ogre::MeshPtr * resultptr = new Ogre::MeshPtr((const Ogre::MeshPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__MeshPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MeshManager_createPlane__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::MeshManager *arg1 = (Ogre::MeshManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::Plane *arg4 = 0 ;
  Ogre::Real arg5 ;
  Ogre::Real arg6 ;
  int arg7 ;
  int arg8 ;
  bool arg9 ;
  unsigned short arg10 ;
  Ogre::Real arg11 ;
  Ogre::Real arg12 ;
  std::string temp2 ;
  std::string temp3 ;
  Ogre::MeshPtr result;
  
  SWIG_check_num_args("Ogre::MeshManager::createPlane",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::MeshManager::createPlane",1,"Ogre::MeshManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::MeshManager::createPlane",2,"Ogre::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Ogre::MeshManager::createPlane",3,"Ogre::String const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Ogre::MeshManager::createPlane",4,"Ogre::Plane const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Ogre::MeshManager::createPlane",5,"Ogre::Real");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Ogre::MeshManager::createPlane",6,"Ogre::Real");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("Ogre::MeshManager::createPlane",7,"int");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("Ogre::MeshManager::createPlane",8,"int");
  if(!lua_isboolean(L,9)) SWIG_fail_arg("Ogre::MeshManager::createPlane",9,"bool");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("Ogre::MeshManager::createPlane",10,"unsigned short");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("Ogre::MeshManager::createPlane",11,"Ogre::Real");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("Ogre::MeshManager::createPlane",12,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__MeshManager,0))){
    SWIG_fail_ptr("MeshManager_createPlane",1,SWIGTYPE_p_Ogre__MeshManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Ogre__Plane,0))){
    SWIG_fail_ptr("MeshManager_createPlane",4,SWIGTYPE_p_Ogre__Plane);
  }
  
  arg5 = (Ogre::Real)lua_tonumber(L, 5);
  arg6 = (Ogre::Real)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  arg8 = (int)lua_tonumber(L, 8);
  arg9 = (lua_toboolean(L, 9)!=0);
  SWIG_contract_assert((lua_tonumber(L,10)>=0),"number must not be negative")
  arg10 = (unsigned short)lua_tonumber(L, 10);
  arg11 = (Ogre::Real)lua_tonumber(L, 11);
  arg12 = (Ogre::Real)lua_tonumber(L, 12);
  result = (arg1)->createPlane((Ogre::String const &)*arg2,(Ogre::String const &)*arg3,(Ogre::Plane const &)*arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  {
    Ogre::MeshPtr * resultptr = new Ogre::MeshPtr((const Ogre::MeshPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__MeshPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MeshManager_createPlane__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::MeshManager *arg1 = (Ogre::MeshManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::Plane *arg4 = 0 ;
  Ogre::Real arg5 ;
  Ogre::Real arg6 ;
  int arg7 ;
  int arg8 ;
  bool arg9 ;
  unsigned short arg10 ;
  Ogre::Real arg11 ;
  std::string temp2 ;
  std::string temp3 ;
  Ogre::MeshPtr result;
  
  SWIG_check_num_args("Ogre::MeshManager::createPlane",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::MeshManager::createPlane",1,"Ogre::MeshManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::MeshManager::createPlane",2,"Ogre::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Ogre::MeshManager::createPlane",3,"Ogre::String const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Ogre::MeshManager::createPlane",4,"Ogre::Plane const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Ogre::MeshManager::createPlane",5,"Ogre::Real");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Ogre::MeshManager::createPlane",6,"Ogre::Real");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("Ogre::MeshManager::createPlane",7,"int");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("Ogre::MeshManager::createPlane",8,"int");
  if(!lua_isboolean(L,9)) SWIG_fail_arg("Ogre::MeshManager::createPlane",9,"bool");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("Ogre::MeshManager::createPlane",10,"unsigned short");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("Ogre::MeshManager::createPlane",11,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__MeshManager,0))){
    SWIG_fail_ptr("MeshManager_createPlane",1,SWIGTYPE_p_Ogre__MeshManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Ogre__Plane,0))){
    SWIG_fail_ptr("MeshManager_createPlane",4,SWIGTYPE_p_Ogre__Plane);
  }
  
  arg5 = (Ogre::Real)lua_tonumber(L, 5);
  arg6 = (Ogre::Real)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  arg8 = (int)lua_tonumber(L, 8);
  arg9 = (lua_toboolean(L, 9)!=0);
  SWIG_contract_assert((lua_tonumber(L,10)>=0),"number must not be negative")
  arg10 = (unsigned short)lua_tonumber(L, 10);
  arg11 = (Ogre::Real)lua_tonumber(L, 11);
  result = (arg1)->createPlane((Ogre::String const &)*arg2,(Ogre::String const &)*arg3,(Ogre::Plane const &)*arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  {
    Ogre::MeshPtr * resultptr = new Ogre::MeshPtr((const Ogre::MeshPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__MeshPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MeshManager_createPlane__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::MeshManager *arg1 = (Ogre::MeshManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::Plane *arg4 = 0 ;
  Ogre::Real arg5 ;
  Ogre::Real arg6 ;
  int arg7 ;
  int arg8 ;
  bool arg9 ;
  unsigned short arg10 ;
  std::string temp2 ;
  std::string temp3 ;
  Ogre::MeshPtr result;
  
  SWIG_check_num_args("Ogre::MeshManager::createPlane",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::MeshManager::createPlane",1,"Ogre::MeshManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::MeshManager::createPlane",2,"Ogre::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Ogre::MeshManager::createPlane",3,"Ogre::String const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Ogre::MeshManager::createPlane",4,"Ogre::Plane const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Ogre::MeshManager::createPlane",5,"Ogre::Real");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Ogre::MeshManager::createPlane",6,"Ogre::Real");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("Ogre::MeshManager::createPlane",7,"int");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("Ogre::MeshManager::createPlane",8,"int");
  if(!lua_isboolean(L,9)) SWIG_fail_arg("Ogre::MeshManager::createPlane",9,"bool");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("Ogre::MeshManager::createPlane",10,"unsigned short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__MeshManager,0))){
    SWIG_fail_ptr("MeshManager_createPlane",1,SWIGTYPE_p_Ogre__MeshManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Ogre__Plane,0))){
    SWIG_fail_ptr("MeshManager_createPlane",4,SWIGTYPE_p_Ogre__Plane);
  }
  
  arg5 = (Ogre::Real)lua_tonumber(L, 5);
  arg6 = (Ogre::Real)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  arg8 = (int)lua_tonumber(L, 8);
  arg9 = (lua_toboolean(L, 9)!=0);
  SWIG_contract_assert((lua_tonumber(L,10)>=0),"number must not be negative")
  arg10 = (unsigned short)lua_tonumber(L, 10);
  result = (arg1)->createPlane((Ogre::String const &)*arg2,(Ogre::String const &)*arg3,(Ogre::Plane const &)*arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  {
    Ogre::MeshPtr * resultptr = new Ogre::MeshPtr((const Ogre::MeshPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__MeshPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MeshManager_createPlane__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::MeshManager *arg1 = (Ogre::MeshManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::Plane *arg4 = 0 ;
  Ogre::Real arg5 ;
  Ogre::Real arg6 ;
  int arg7 ;
  int arg8 ;
  bool arg9 ;
  std::string temp2 ;
  std::string temp3 ;
  Ogre::MeshPtr result;
  
  SWIG_check_num_args("Ogre::MeshManager::createPlane",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::MeshManager::createPlane",1,"Ogre::MeshManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::MeshManager::createPlane",2,"Ogre::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Ogre::MeshManager::createPlane",3,"Ogre::String const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Ogre::MeshManager::createPlane",4,"Ogre::Plane const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Ogre::MeshManager::createPlane",5,"Ogre::Real");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Ogre::MeshManager::createPlane",6,"Ogre::Real");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("Ogre::MeshManager::createPlane",7,"int");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("Ogre::MeshManager::createPlane",8,"int");
  if(!lua_isboolean(L,9)) SWIG_fail_arg("Ogre::MeshManager::createPlane",9,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__MeshManager,0))){
    SWIG_fail_ptr("MeshManager_createPlane",1,SWIGTYPE_p_Ogre__MeshManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Ogre__Plane,0))){
    SWIG_fail_ptr("MeshManager_createPlane",4,SWIGTYPE_p_Ogre__Plane);
  }
  
  arg5 = (Ogre::Real)lua_tonumber(L, 5);
  arg6 = (Ogre::Real)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  arg8 = (int)lua_tonumber(L, 8);
  arg9 = (lua_toboolean(L, 9)!=0);
  result = (arg1)->createPlane((Ogre::String const &)*arg2,(Ogre::String const &)*arg3,(Ogre::Plane const &)*arg4,arg5,arg6,arg7,arg8,arg9);
  {
    Ogre::MeshPtr * resultptr = new Ogre::MeshPtr((const Ogre::MeshPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__MeshPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MeshManager_createPlane__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::MeshManager *arg1 = (Ogre::MeshManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::Plane *arg4 = 0 ;
  Ogre::Real arg5 ;
  Ogre::Real arg6 ;
  int arg7 ;
  int arg8 ;
  std::string temp2 ;
  std::string temp3 ;
  Ogre::MeshPtr result;
  
  SWIG_check_num_args("Ogre::MeshManager::createPlane",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::MeshManager::createPlane",1,"Ogre::MeshManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::MeshManager::createPlane",2,"Ogre::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Ogre::MeshManager::createPlane",3,"Ogre::String const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Ogre::MeshManager::createPlane",4,"Ogre::Plane const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Ogre::MeshManager::createPlane",5,"Ogre::Real");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Ogre::MeshManager::createPlane",6,"Ogre::Real");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("Ogre::MeshManager::createPlane",7,"int");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("Ogre::MeshManager::createPlane",8,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__MeshManager,0))){
    SWIG_fail_ptr("MeshManager_createPlane",1,SWIGTYPE_p_Ogre__MeshManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Ogre__Plane,0))){
    SWIG_fail_ptr("MeshManager_createPlane",4,SWIGTYPE_p_Ogre__Plane);
  }
  
  arg5 = (Ogre::Real)lua_tonumber(L, 5);
  arg6 = (Ogre::Real)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  arg8 = (int)lua_tonumber(L, 8);
  result = (arg1)->createPlane((Ogre::String const &)*arg2,(Ogre::String const &)*arg3,(Ogre::Plane const &)*arg4,arg5,arg6,arg7,arg8);
  {
    Ogre::MeshPtr * resultptr = new Ogre::MeshPtr((const Ogre::MeshPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__MeshPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MeshManager_createPlane__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::MeshManager *arg1 = (Ogre::MeshManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::Plane *arg4 = 0 ;
  Ogre::Real arg5 ;
  Ogre::Real arg6 ;
  int arg7 ;
  std::string temp2 ;
  std::string temp3 ;
  Ogre::MeshPtr result;
  
  SWIG_check_num_args("Ogre::MeshManager::createPlane",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::MeshManager::createPlane",1,"Ogre::MeshManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::MeshManager::createPlane",2,"Ogre::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Ogre::MeshManager::createPlane",3,"Ogre::String const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Ogre::MeshManager::createPlane",4,"Ogre::Plane const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Ogre::MeshManager::createPlane",5,"Ogre::Real");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Ogre::MeshManager::createPlane",6,"Ogre::Real");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("Ogre::MeshManager::createPlane",7,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__MeshManager,0))){
    SWIG_fail_ptr("MeshManager_createPlane",1,SWIGTYPE_p_Ogre__MeshManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Ogre__Plane,0))){
    SWIG_fail_ptr("MeshManager_createPlane",4,SWIGTYPE_p_Ogre__Plane);
  }
  
  arg5 = (Ogre::Real)lua_tonumber(L, 5);
  arg6 = (Ogre::Real)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  result = (arg1)->createPlane((Ogre::String const &)*arg2,(Ogre::String const &)*arg3,(Ogre::Plane const &)*arg4,arg5,arg6,arg7);
  {
    Ogre::MeshPtr * resultptr = new Ogre::MeshPtr((const Ogre::MeshPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__MeshPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MeshManager_createPlane__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::MeshManager *arg1 = (Ogre::MeshManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::Plane *arg4 = 0 ;
  Ogre::Real arg5 ;
  Ogre::Real arg6 ;
  std::string temp2 ;
  std::string temp3 ;
  Ogre::MeshPtr result;
  
  SWIG_check_num_args("Ogre::MeshManager::createPlane",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::MeshManager::createPlane",1,"Ogre::MeshManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::MeshManager::createPlane",2,"Ogre::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Ogre::MeshManager::createPlane",3,"Ogre::String const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Ogre::MeshManager::createPlane",4,"Ogre::Plane const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Ogre::MeshManager::createPlane",5,"Ogre::Real");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Ogre::MeshManager::createPlane",6,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__MeshManager,0))){
    SWIG_fail_ptr("MeshManager_createPlane",1,SWIGTYPE_p_Ogre__MeshManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Ogre__Plane,0))){
    SWIG_fail_ptr("MeshManager_createPlane",4,SWIGTYPE_p_Ogre__Plane);
  }
  
  arg5 = (Ogre::Real)lua_tonumber(L, 5);
  arg6 = (Ogre::Real)lua_tonumber(L, 6);
  result = (arg1)->createPlane((Ogre::String const &)*arg2,(Ogre::String const &)*arg3,(Ogre::Plane const &)*arg4,arg5,arg6);
  {
    Ogre::MeshPtr * resultptr = new Ogre::MeshPtr((const Ogre::MeshPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__MeshPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MeshManager_createPlane(lua_State* L) {
  int argc;
  int argv[14]={
    1,2,3,4,5,6,7,8,9,10,11,12,13,14
  };
  
  argc = lua_gettop(L);
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__MeshManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Ogre__Plane, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_MeshManager_createPlane__SWIG_7(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__MeshManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Ogre__Plane, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_MeshManager_createPlane__SWIG_6(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__MeshManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Ogre__Plane, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_MeshManager_createPlane__SWIG_5(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__MeshManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Ogre__Plane, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isboolean(L,argv[8]);
                    }
                    if (_v) {
                      return _wrap_MeshManager_createPlane__SWIG_4(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__MeshManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Ogre__Plane, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isboolean(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        return _wrap_MeshManager_createPlane__SWIG_3(L);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 11) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__MeshManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Ogre__Plane, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isboolean(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isnumber(L,argv[10]);
                        }
                        if (_v) {
                          return _wrap_MeshManager_createPlane__SWIG_2(L);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 12) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__MeshManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Ogre__Plane, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isboolean(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isnumber(L,argv[10]);
                        }
                        if (_v) {
                          {
                            _v = lua_isnumber(L,argv[11]);
                          }
                          if (_v) {
                            return _wrap_MeshManager_createPlane__SWIG_1(L);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 13) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__MeshManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Ogre__Plane, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isboolean(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isnumber(L,argv[10]);
                        }
                        if (_v) {
                          {
                            _v = lua_isnumber(L,argv[11]);
                          }
                          if (_v) {
                            {
                              void *ptr;
                              if (lua_isuserdata(L,argv[12])==0 || SWIG_ConvertPtr(L,argv[12], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
                                _v = 0;
                              } else {
                                _v = 1;
                              }
                            }
                            if (_v) {
                              return _wrap_MeshManager_createPlane__SWIG_0(L);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'MeshManager_createPlane'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::MeshManager::createPlane(Ogre::String const &,Ogre::String const &,Ogre::Plane const &,Ogre::Real,Ogre::Real,int,int,bool,unsigned short,Ogre::Real,Ogre::Real,Ogre::Vector3 const &)\n"
    "    Ogre::MeshManager::createPlane(Ogre::String const &,Ogre::String const &,Ogre::Plane const &,Ogre::Real,Ogre::Real,int,int,bool,unsigned short,Ogre::Real,Ogre::Real)\n"
    "    Ogre::MeshManager::createPlane(Ogre::String const &,Ogre::String const &,Ogre::Plane const &,Ogre::Real,Ogre::Real,int,int,bool,unsigned short,Ogre::Real)\n"
    "    Ogre::MeshManager::createPlane(Ogre::String const &,Ogre::String const &,Ogre::Plane const &,Ogre::Real,Ogre::Real,int,int,bool,unsigned short)\n"
    "    Ogre::MeshManager::createPlane(Ogre::String const &,Ogre::String const &,Ogre::Plane const &,Ogre::Real,Ogre::Real,int,int,bool)\n"
    "    Ogre::MeshManager::createPlane(Ogre::String const &,Ogre::String const &,Ogre::Plane const &,Ogre::Real,Ogre::Real,int,int)\n"
    "    Ogre::MeshManager::createPlane(Ogre::String const &,Ogre::String const &,Ogre::Plane const &,Ogre::Real,Ogre::Real,int)\n"
    "    Ogre::MeshManager::createPlane(Ogre::String const &,Ogre::String const &,Ogre::Plane const &,Ogre::Real,Ogre::Real)\n");
  lua_error(L);return 0;
}


static swig_lua_method swig_Ogre_MeshManager_methods[] = {
    {"createPlane", _wrap_MeshManager_createPlane}, 
    {0,0}
};
static swig_lua_attribute swig_Ogre_MeshManager_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Ogre_MeshManager_bases[] = {0};
static const char *swig_Ogre_MeshManager_base_names[] = {0};
static swig_lua_class _wrap_class_Ogre_MeshManager = { "MeshManager", &SWIGTYPE_p_Ogre__MeshManager,0,0, swig_Ogre_MeshManager_methods, swig_Ogre_MeshManager_attributes, swig_Ogre_MeshManager_bases, swig_Ogre_MeshManager_base_names };

static int _wrap_ResourceGroupManager_getSingleton(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::ResourceGroupManager *result = 0 ;
  
  SWIG_check_num_args("Ogre::ResourceGroupManager::getSingleton",0,0)
  result = (Ogre::ResourceGroupManager *) &Ogre::ResourceGroupManager::getSingleton();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__ResourceGroupManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceGroupManager_DEFAULT_RESOURCE_GROUP_NAME_set(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::String *arg1 = 0 ;
  std::string temp1 ;
  
  SWIG_check_num_args("Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME",1,"Ogre::String const &");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceGroupManager_DEFAULT_RESOURCE_GROUP_NAME_get(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::String *result = 0 ;
  
  SWIG_check_num_args("Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME",0,0)
  result = (Ogre::String *) &Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME;
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceGroupManager_INTERNAL_RESOURCE_GROUP_NAME_set(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::String *arg1 = 0 ;
  std::string temp1 ;
  
  SWIG_check_num_args("Ogre::ResourceGroupManager::INTERNAL_RESOURCE_GROUP_NAME",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Ogre::ResourceGroupManager::INTERNAL_RESOURCE_GROUP_NAME",1,"Ogre::String const &");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  Ogre::ResourceGroupManager::INTERNAL_RESOURCE_GROUP_NAME = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceGroupManager_INTERNAL_RESOURCE_GROUP_NAME_get(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::String *result = 0 ;
  
  SWIG_check_num_args("Ogre::ResourceGroupManager::INTERNAL_RESOURCE_GROUP_NAME",0,0)
  result = (Ogre::String *) &Ogre::ResourceGroupManager::INTERNAL_RESOURCE_GROUP_NAME;
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceGroupManager_AUTODETECT_RESOURCE_GROUP_NAME_set(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::String *arg1 = 0 ;
  std::string temp1 ;
  
  SWIG_check_num_args("Ogre::ResourceGroupManager::AUTODETECT_RESOURCE_GROUP_NAME",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Ogre::ResourceGroupManager::AUTODETECT_RESOURCE_GROUP_NAME",1,"Ogre::String const &");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  Ogre::ResourceGroupManager::AUTODETECT_RESOURCE_GROUP_NAME = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceGroupManager_AUTODETECT_RESOURCE_GROUP_NAME_get(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::String *result = 0 ;
  
  SWIG_check_num_args("Ogre::ResourceGroupManager::AUTODETECT_RESOURCE_GROUP_NAME",0,0)
  result = (Ogre::String *) &Ogre::ResourceGroupManager::AUTODETECT_RESOURCE_GROUP_NAME;
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceGroupManager_RESOURCE_SYSTEM_NUM_REFERENCE_COUNTS_set(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  
  SWIG_check_num_args("Ogre::ResourceGroupManager::RESOURCE_SYSTEM_NUM_REFERENCE_COUNTS",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ogre::ResourceGroupManager::RESOURCE_SYSTEM_NUM_REFERENCE_COUNTS",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  Ogre::ResourceGroupManager::RESOURCE_SYSTEM_NUM_REFERENCE_COUNTS = arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceGroupManager_RESOURCE_SYSTEM_NUM_REFERENCE_COUNTS_get(lua_State* L) {
  int SWIG_arg = 0;
  size_t result;
  
  SWIG_check_num_args("Ogre::ResourceGroupManager::RESOURCE_SYSTEM_NUM_REFERENCE_COUNTS",0,0)
  result = Ogre::ResourceGroupManager::RESOURCE_SYSTEM_NUM_REFERENCE_COUNTS;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_Ogre_ResourceGroupManager_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_Ogre_ResourceGroupManager_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Ogre_ResourceGroupManager_bases[] = {0};
static const char *swig_Ogre_ResourceGroupManager_base_names[] = {0};
static swig_lua_class _wrap_class_Ogre_ResourceGroupManager = { "ResourceGroupManager", &SWIGTYPE_p_Ogre__ResourceGroupManager,0,0, swig_Ogre_ResourceGroupManager_methods, swig_Ogre_ResourceGroupManager_attributes, swig_Ogre_ResourceGroupManager_bases, swig_Ogre_ResourceGroupManager_base_names };

static swig_lua_method swig_Ogre_ManualResourceLoader_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_Ogre_ManualResourceLoader_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Ogre_ManualResourceLoader_bases[] = {0};
static const char *swig_Ogre_ManualResourceLoader_base_names[] = {0};
static swig_lua_class _wrap_class_Ogre_ManualResourceLoader = { "ManualResourceLoader", &SWIGTYPE_p_Ogre__ManualResourceLoader,0,0, swig_Ogre_ManualResourceLoader_methods, swig_Ogre_ManualResourceLoader_attributes, swig_Ogre_ManualResourceLoader_bases, swig_Ogre_ManualResourceLoader_base_names };

static swig_lua_method swig_Ogre_Resource_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_Ogre_Resource_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Ogre_Resource_bases[] = {0};
static const char *swig_Ogre_Resource_base_names[] = {0};
static swig_lua_class _wrap_class_Ogre_Resource = { "Resource", &SWIGTYPE_p_Ogre__Resource,0,0, swig_Ogre_Resource_methods, swig_Ogre_Resource_attributes, swig_Ogre_Resource_bases, swig_Ogre_Resource_base_names };

static void swig_delete_ResourceManager(void *obj) {
Ogre::ResourceManager *arg1 = (Ogre::ResourceManager *) obj;
delete arg1;
}
static swig_lua_method swig_Ogre_ResourceManager_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_Ogre_ResourceManager_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Ogre_ResourceManager_bases[] = {0};
static const char *swig_Ogre_ResourceManager_base_names[] = {0};
static swig_lua_class _wrap_class_Ogre_ResourceManager = { "ResourceManager", &SWIGTYPE_p_Ogre__ResourceManager,0, swig_delete_ResourceManager, swig_Ogre_ResourceManager_methods, swig_Ogre_ResourceManager_attributes, swig_Ogre_ResourceManager_bases, swig_Ogre_ResourceManager_base_names };

static swig_lua_method swig_Ogre_CompositorInstance_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_Ogre_CompositorInstance_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Ogre_CompositorInstance_bases[] = {0};
static const char *swig_Ogre_CompositorInstance_base_names[] = {0};
static swig_lua_class _wrap_class_Ogre_CompositorInstance = { "CompositorInstance", &SWIGTYPE_p_Ogre__CompositorInstance,0,0, swig_Ogre_CompositorInstance_methods, swig_Ogre_CompositorInstance_attributes, swig_Ogre_CompositorInstance_bases, swig_Ogre_CompositorInstance_base_names };

static swig_lua_method swig_Ogre_CompositorLogic_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_Ogre_CompositorLogic_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Ogre_CompositorLogic_bases[] = {0};
static const char *swig_Ogre_CompositorLogic_base_names[] = {0};
static swig_lua_class _wrap_class_Ogre_CompositorLogic = { "CompositorLogic", &SWIGTYPE_p_Ogre__CompositorLogic,0,0, swig_Ogre_CompositorLogic_methods, swig_Ogre_CompositorLogic_attributes, swig_Ogre_CompositorLogic_bases, swig_Ogre_CompositorLogic_base_names };

static int _wrap_CompositorManager_initialise(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::CompositorManager *arg1 = (Ogre::CompositorManager *) 0 ;
  
  SWIG_check_num_args("Ogre::CompositorManager::initialise",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::CompositorManager::initialise",1,"Ogre::CompositorManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__CompositorManager,0))){
    SWIG_fail_ptr("CompositorManager_initialise",1,SWIGTYPE_p_Ogre__CompositorManager);
  }
  
  (arg1)->initialise();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CompositorManager_addCompositor__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::CompositorManager *arg1 = (Ogre::CompositorManager *) 0 ;
  Ogre::Viewport *arg2 = (Ogre::Viewport *) 0 ;
  Ogre::String *arg3 = 0 ;
  int arg4 ;
  std::string temp3 ;
  Ogre::CompositorInstance *result = 0 ;
  
  SWIG_check_num_args("Ogre::CompositorManager::addCompositor",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::CompositorManager::addCompositor",1,"Ogre::CompositorManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Ogre::CompositorManager::addCompositor",2,"Ogre::Viewport *");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Ogre::CompositorManager::addCompositor",3,"Ogre::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Ogre::CompositorManager::addCompositor",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__CompositorManager,0))){
    SWIG_fail_ptr("CompositorManager_addCompositor",1,SWIGTYPE_p_Ogre__CompositorManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Viewport,0))){
    SWIG_fail_ptr("CompositorManager_addCompositor",2,SWIGTYPE_p_Ogre__Viewport);
  }
  
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  arg4 = (int)lua_tonumber(L, 4);
  result = (Ogre::CompositorInstance *)(arg1)->addCompositor(arg2,(Ogre::String const &)*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__CompositorInstance,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CompositorManager_addCompositor__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::CompositorManager *arg1 = (Ogre::CompositorManager *) 0 ;
  Ogre::Viewport *arg2 = (Ogre::Viewport *) 0 ;
  Ogre::String *arg3 = 0 ;
  std::string temp3 ;
  Ogre::CompositorInstance *result = 0 ;
  
  SWIG_check_num_args("Ogre::CompositorManager::addCompositor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::CompositorManager::addCompositor",1,"Ogre::CompositorManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Ogre::CompositorManager::addCompositor",2,"Ogre::Viewport *");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Ogre::CompositorManager::addCompositor",3,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__CompositorManager,0))){
    SWIG_fail_ptr("CompositorManager_addCompositor",1,SWIGTYPE_p_Ogre__CompositorManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Viewport,0))){
    SWIG_fail_ptr("CompositorManager_addCompositor",2,SWIGTYPE_p_Ogre__Viewport);
  }
  
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  result = (Ogre::CompositorInstance *)(arg1)->addCompositor(arg2,(Ogre::String const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__CompositorInstance,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CompositorManager_addCompositor(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__CompositorManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Viewport, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_CompositorManager_addCompositor__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__CompositorManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Viewport, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_CompositorManager_addCompositor__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CompositorManager_addCompositor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::CompositorManager::addCompositor(Ogre::Viewport *,Ogre::String const &,int)\n"
    "    Ogre::CompositorManager::addCompositor(Ogre::Viewport *,Ogre::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_CompositorManager_removeCompositor(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::CompositorManager *arg1 = (Ogre::CompositorManager *) 0 ;
  Ogre::Viewport *arg2 = (Ogre::Viewport *) 0 ;
  Ogre::String *arg3 = 0 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Ogre::CompositorManager::removeCompositor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::CompositorManager::removeCompositor",1,"Ogre::CompositorManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Ogre::CompositorManager::removeCompositor",2,"Ogre::Viewport *");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Ogre::CompositorManager::removeCompositor",3,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__CompositorManager,0))){
    SWIG_fail_ptr("CompositorManager_removeCompositor",1,SWIGTYPE_p_Ogre__CompositorManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Viewport,0))){
    SWIG_fail_ptr("CompositorManager_removeCompositor",2,SWIGTYPE_p_Ogre__Viewport);
  }
  
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  (arg1)->removeCompositor(arg2,(Ogre::String const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CompositorManager_setCompositorEnabled(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::CompositorManager *arg1 = (Ogre::CompositorManager *) 0 ;
  Ogre::Viewport *arg2 = (Ogre::Viewport *) 0 ;
  Ogre::String *arg3 = 0 ;
  bool arg4 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Ogre::CompositorManager::setCompositorEnabled",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::CompositorManager::setCompositorEnabled",1,"Ogre::CompositorManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Ogre::CompositorManager::setCompositorEnabled",2,"Ogre::Viewport *");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Ogre::CompositorManager::setCompositorEnabled",3,"Ogre::String const &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Ogre::CompositorManager::setCompositorEnabled",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__CompositorManager,0))){
    SWIG_fail_ptr("CompositorManager_setCompositorEnabled",1,SWIGTYPE_p_Ogre__CompositorManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Viewport,0))){
    SWIG_fail_ptr("CompositorManager_setCompositorEnabled",2,SWIGTYPE_p_Ogre__Viewport);
  }
  
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->setCompositorEnabled(arg2,(Ogre::String const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CompositorManager_freePooledTextures__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::CompositorManager *arg1 = (Ogre::CompositorManager *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Ogre::CompositorManager::freePooledTextures",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::CompositorManager::freePooledTextures",1,"Ogre::CompositorManager *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ogre::CompositorManager::freePooledTextures",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__CompositorManager,0))){
    SWIG_fail_ptr("CompositorManager_freePooledTextures",1,SWIGTYPE_p_Ogre__CompositorManager);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->freePooledTextures(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CompositorManager_freePooledTextures__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::CompositorManager *arg1 = (Ogre::CompositorManager *) 0 ;
  
  SWIG_check_num_args("Ogre::CompositorManager::freePooledTextures",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::CompositorManager::freePooledTextures",1,"Ogre::CompositorManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__CompositorManager,0))){
    SWIG_fail_ptr("CompositorManager_freePooledTextures",1,SWIGTYPE_p_Ogre__CompositorManager);
  }
  
  (arg1)->freePooledTextures();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CompositorManager_freePooledTextures(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__CompositorManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_CompositorManager_freePooledTextures__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__CompositorManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_CompositorManager_freePooledTextures__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CompositorManager_freePooledTextures'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ogre::CompositorManager::freePooledTextures(bool)\n"
    "    Ogre::CompositorManager::freePooledTextures()\n");
  lua_error(L);return 0;
}


static int _wrap_CompositorManager_registerCompositorLogic(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::CompositorManager *arg1 = (Ogre::CompositorManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::CompositorLogic *arg3 = (Ogre::CompositorLogic *) 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Ogre::CompositorManager::registerCompositorLogic",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::CompositorManager::registerCompositorLogic",1,"Ogre::CompositorManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::CompositorManager::registerCompositorLogic",2,"Ogre::String const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Ogre::CompositorManager::registerCompositorLogic",3,"Ogre::CompositorLogic *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__CompositorManager,0))){
    SWIG_fail_ptr("CompositorManager_registerCompositorLogic",1,SWIGTYPE_p_Ogre__CompositorManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Ogre__CompositorLogic,0))){
    SWIG_fail_ptr("CompositorManager_registerCompositorLogic",3,SWIGTYPE_p_Ogre__CompositorLogic);
  }
  
  (arg1)->registerCompositorLogic((Ogre::String const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CompositorManager_unregisterCompositorLogic(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::CompositorManager *arg1 = (Ogre::CompositorManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Ogre::CompositorManager::unregisterCompositorLogic",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::CompositorManager::unregisterCompositorLogic",1,"Ogre::CompositorManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::CompositorManager::unregisterCompositorLogic",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__CompositorManager,0))){
    SWIG_fail_ptr("CompositorManager_unregisterCompositorLogic",1,SWIGTYPE_p_Ogre__CompositorManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->unregisterCompositorLogic((Ogre::String const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CompositorManager_getCompositorLogic(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::CompositorManager *arg1 = (Ogre::CompositorManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  std::string temp2 ;
  Ogre::CompositorLogic *result = 0 ;
  
  SWIG_check_num_args("Ogre::CompositorManager::getCompositorLogic",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ogre::CompositorManager::getCompositorLogic",1,"Ogre::CompositorManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Ogre::CompositorManager::getCompositorLogic",2,"Ogre::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__CompositorManager,0))){
    SWIG_fail_ptr("CompositorManager_getCompositorLogic",1,SWIGTYPE_p_Ogre__CompositorManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (Ogre::CompositorLogic *)(arg1)->getCompositorLogic((Ogre::String const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__CompositorLogic,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CompositorManager_getSingleton(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::CompositorManager *result = 0 ;
  
  SWIG_check_num_args("Ogre::CompositorManager::getSingleton",0,0)
  result = (Ogre::CompositorManager *) &Ogre::CompositorManager::getSingleton();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__CompositorManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CompositorManager_getSingletonPtr(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::CompositorManager *result = 0 ;
  
  SWIG_check_num_args("Ogre::CompositorManager::getSingletonPtr",0,0)
  result = (Ogre::CompositorManager *)Ogre::CompositorManager::getSingletonPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__CompositorManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_Ogre_CompositorManager_methods[] = {
    {"initialise", _wrap_CompositorManager_initialise}, 
    {"addCompositor", _wrap_CompositorManager_addCompositor}, 
    {"removeCompositor", _wrap_CompositorManager_removeCompositor}, 
    {"setCompositorEnabled", _wrap_CompositorManager_setCompositorEnabled}, 
    {"freePooledTextures", _wrap_CompositorManager_freePooledTextures}, 
    {"registerCompositorLogic", _wrap_CompositorManager_registerCompositorLogic}, 
    {"unregisterCompositorLogic", _wrap_CompositorManager_unregisterCompositorLogic}, 
    {"getCompositorLogic", _wrap_CompositorManager_getCompositorLogic}, 
    {0,0}
};
static swig_lua_attribute swig_Ogre_CompositorManager_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Ogre_CompositorManager_bases[] = {0};
static const char *swig_Ogre_CompositorManager_base_names[] = {0};
static swig_lua_class _wrap_class_Ogre_CompositorManager = { "CompositorManager", &SWIGTYPE_p_Ogre__CompositorManager,0,0, swig_Ogre_CompositorManager_methods, swig_Ogre_CompositorManager_attributes, swig_Ogre_CompositorManager_bases, swig_Ogre_CompositorManager_base_names };

static int _wrap_new_SdkCameraMan(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Camera *arg1 = (Ogre::Camera *) 0 ;
  OgreBites::SdkCameraMan *result = 0 ;
  
  SWIG_check_num_args("OgreBites::SdkCameraMan::SdkCameraMan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OgreBites::SdkCameraMan::SdkCameraMan",1,"Ogre::Camera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Camera,0))){
    SWIG_fail_ptr("new_SdkCameraMan",1,SWIGTYPE_p_Ogre__Camera);
  }
  
  result = (OgreBites::SdkCameraMan *)new OgreBites::SdkCameraMan(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OgreBites__SdkCameraMan,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SdkCameraMan_setCamera(lua_State* L) {
  int SWIG_arg = 0;
  OgreBites::SdkCameraMan *arg1 = (OgreBites::SdkCameraMan *) 0 ;
  Ogre::Camera *arg2 = (Ogre::Camera *) 0 ;
  
  SWIG_check_num_args("OgreBites::SdkCameraMan::setCamera",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OgreBites::SdkCameraMan::setCamera",1,"OgreBites::SdkCameraMan *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("OgreBites::SdkCameraMan::setCamera",2,"Ogre::Camera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OgreBites__SdkCameraMan,0))){
    SWIG_fail_ptr("SdkCameraMan_setCamera",1,SWIGTYPE_p_OgreBites__SdkCameraMan);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Camera,0))){
    SWIG_fail_ptr("SdkCameraMan_setCamera",2,SWIGTYPE_p_Ogre__Camera);
  }
  
  (arg1)->setCamera(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SdkCameraMan_getCamera(lua_State* L) {
  int SWIG_arg = 0;
  OgreBites::SdkCameraMan *arg1 = (OgreBites::SdkCameraMan *) 0 ;
  Ogre::Camera *result = 0 ;
  
  SWIG_check_num_args("OgreBites::SdkCameraMan::getCamera",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OgreBites::SdkCameraMan::getCamera",1,"OgreBites::SdkCameraMan *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OgreBites__SdkCameraMan,0))){
    SWIG_fail_ptr("SdkCameraMan_getCamera",1,SWIGTYPE_p_OgreBites__SdkCameraMan);
  }
  
  result = (Ogre::Camera *)(arg1)->getCamera();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__Camera,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SdkCameraMan_setTarget(lua_State* L) {
  int SWIG_arg = 0;
  OgreBites::SdkCameraMan *arg1 = (OgreBites::SdkCameraMan *) 0 ;
  Ogre::SceneNode *arg2 = (Ogre::SceneNode *) 0 ;
  
  SWIG_check_num_args("OgreBites::SdkCameraMan::setTarget",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OgreBites::SdkCameraMan::setTarget",1,"OgreBites::SdkCameraMan *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("OgreBites::SdkCameraMan::setTarget",2,"Ogre::SceneNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OgreBites__SdkCameraMan,0))){
    SWIG_fail_ptr("SdkCameraMan_setTarget",1,SWIGTYPE_p_OgreBites__SdkCameraMan);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__SceneNode,0))){
    SWIG_fail_ptr("SdkCameraMan_setTarget",2,SWIGTYPE_p_Ogre__SceneNode);
  }
  
  (arg1)->setTarget(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SdkCameraMan_getTarget(lua_State* L) {
  int SWIG_arg = 0;
  OgreBites::SdkCameraMan *arg1 = (OgreBites::SdkCameraMan *) 0 ;
  Ogre::SceneNode *result = 0 ;
  
  SWIG_check_num_args("OgreBites::SdkCameraMan::getTarget",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OgreBites::SdkCameraMan::getTarget",1,"OgreBites::SdkCameraMan *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OgreBites__SdkCameraMan,0))){
    SWIG_fail_ptr("SdkCameraMan_getTarget",1,SWIGTYPE_p_OgreBites__SdkCameraMan);
  }
  
  result = (Ogre::SceneNode *)(arg1)->getTarget();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__SceneNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SdkCameraMan_setTopSpeed(lua_State* L) {
  int SWIG_arg = 0;
  OgreBites::SdkCameraMan *arg1 = (OgreBites::SdkCameraMan *) 0 ;
  Ogre::Real arg2 ;
  
  SWIG_check_num_args("OgreBites::SdkCameraMan::setTopSpeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OgreBites::SdkCameraMan::setTopSpeed",1,"OgreBites::SdkCameraMan *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OgreBites::SdkCameraMan::setTopSpeed",2,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OgreBites__SdkCameraMan,0))){
    SWIG_fail_ptr("SdkCameraMan_setTopSpeed",1,SWIGTYPE_p_OgreBites__SdkCameraMan);
  }
  
  arg2 = (Ogre::Real)lua_tonumber(L, 2);
  (arg1)->setTopSpeed(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SdkCameraMan_getTopSpeed(lua_State* L) {
  int SWIG_arg = 0;
  OgreBites::SdkCameraMan *arg1 = (OgreBites::SdkCameraMan *) 0 ;
  Ogre::Real result;
  
  SWIG_check_num_args("OgreBites::SdkCameraMan::getTopSpeed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OgreBites::SdkCameraMan::getTopSpeed",1,"OgreBites::SdkCameraMan *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OgreBites__SdkCameraMan,0))){
    SWIG_fail_ptr("SdkCameraMan_getTopSpeed",1,SWIGTYPE_p_OgreBites__SdkCameraMan);
  }
  
  result = (Ogre::Real)(arg1)->getTopSpeed();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SdkCameraMan_setStyle(lua_State* L) {
  int SWIG_arg = 0;
  OgreBites::SdkCameraMan *arg1 = (OgreBites::SdkCameraMan *) 0 ;
  OgreBites::CameraStyle arg2 ;
  
  SWIG_check_num_args("OgreBites::SdkCameraMan::setStyle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OgreBites::SdkCameraMan::setStyle",1,"OgreBites::SdkCameraMan *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OgreBites::SdkCameraMan::setStyle",2,"OgreBites::CameraStyle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OgreBites__SdkCameraMan,0))){
    SWIG_fail_ptr("SdkCameraMan_setStyle",1,SWIGTYPE_p_OgreBites__SdkCameraMan);
  }
  
  arg2 = (OgreBites::CameraStyle)(int)lua_tonumber(L, 2);
  (arg1)->setStyle(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SdkCameraMan_getStyle(lua_State* L) {
  int SWIG_arg = 0;
  OgreBites::SdkCameraMan *arg1 = (OgreBites::SdkCameraMan *) 0 ;
  OgreBites::CameraStyle result;
  
  SWIG_check_num_args("OgreBites::SdkCameraMan::getStyle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OgreBites::SdkCameraMan::getStyle",1,"OgreBites::SdkCameraMan *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OgreBites__SdkCameraMan,0))){
    SWIG_fail_ptr("SdkCameraMan_getStyle",1,SWIGTYPE_p_OgreBites__SdkCameraMan);
  }
  
  result = (OgreBites::CameraStyle)(arg1)->getStyle();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SdkCameraMan_manualStop(lua_State* L) {
  int SWIG_arg = 0;
  OgreBites::SdkCameraMan *arg1 = (OgreBites::SdkCameraMan *) 0 ;
  
  SWIG_check_num_args("OgreBites::SdkCameraMan::manualStop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OgreBites::SdkCameraMan::manualStop",1,"OgreBites::SdkCameraMan *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OgreBites__SdkCameraMan,0))){
    SWIG_fail_ptr("SdkCameraMan_manualStop",1,SWIGTYPE_p_OgreBites__SdkCameraMan);
  }
  
  (arg1)->manualStop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SdkCameraMan(void *obj) {
OgreBites::SdkCameraMan *arg1 = (OgreBites::SdkCameraMan *) obj;
delete arg1;
}
static swig_lua_method swig_OgreBites_SdkCameraMan_methods[] = {
    {"setCamera", _wrap_SdkCameraMan_setCamera}, 
    {"getCamera", _wrap_SdkCameraMan_getCamera}, 
    {"setTarget", _wrap_SdkCameraMan_setTarget}, 
    {"getTarget", _wrap_SdkCameraMan_getTarget}, 
    {"setTopSpeed", _wrap_SdkCameraMan_setTopSpeed}, 
    {"getTopSpeed", _wrap_SdkCameraMan_getTopSpeed}, 
    {"setStyle", _wrap_SdkCameraMan_setStyle}, 
    {"getStyle", _wrap_SdkCameraMan_getStyle}, 
    {"manualStop", _wrap_SdkCameraMan_manualStop}, 
    {0,0}
};
static swig_lua_attribute swig_OgreBites_SdkCameraMan_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OgreBites_SdkCameraMan_bases[] = {0};
static const char *swig_OgreBites_SdkCameraMan_base_names[] = {0};
static swig_lua_class _wrap_class_OgreBites_SdkCameraMan = { "SdkCameraMan", &SWIGTYPE_p_OgreBites__SdkCameraMan,_wrap_new_SdkCameraMan, swig_delete_SdkCameraMan, swig_OgreBites_SdkCameraMan_methods, swig_OgreBites_SdkCameraMan_attributes, swig_OgreBites_SdkCameraMan_bases, swig_OgreBites_SdkCameraMan_base_names };

#ifdef __cplusplus
}
#endif

static const struct luaL_reg swig_commands[] = {
    { "MeshManager_getSingleton", _wrap_MeshManager_getSingleton},
    { "ResourceGroupManager_getSingleton", _wrap_ResourceGroupManager_getSingleton},
    { "CompositorManager_getSingleton", _wrap_CompositorManager_getSingleton},
    { "CompositorManager_getSingletonPtr", _wrap_CompositorManager_getSingletonPtr},
    {0,0}
};

static swig_lua_var_info swig_variables[] = {
    { "Vector3_ZERO", _wrap_Vector3_ZERO_get, SWIG_Lua_set_immutable },
    { "Vector3_UNIT_X", _wrap_Vector3_UNIT_X_get, SWIG_Lua_set_immutable },
    { "Vector3_UNIT_Y", _wrap_Vector3_UNIT_Y_get, SWIG_Lua_set_immutable },
    { "Vector3_UNIT_Z", _wrap_Vector3_UNIT_Z_get, SWIG_Lua_set_immutable },
    { "Vector3_NEGATIVE_UNIT_X", _wrap_Vector3_NEGATIVE_UNIT_X_get, SWIG_Lua_set_immutable },
    { "Vector3_NEGATIVE_UNIT_Y", _wrap_Vector3_NEGATIVE_UNIT_Y_get, SWIG_Lua_set_immutable },
    { "Vector3_NEGATIVE_UNIT_Z", _wrap_Vector3_NEGATIVE_UNIT_Z_get, SWIG_Lua_set_immutable },
    { "Vector3_UNIT_SCALE", _wrap_Vector3_UNIT_SCALE_get, SWIG_Lua_set_immutable },
    { "ResourceGroupManager_DEFAULT_RESOURCE_GROUP_NAME", _wrap_ResourceGroupManager_DEFAULT_RESOURCE_GROUP_NAME_get, _wrap_ResourceGroupManager_DEFAULT_RESOURCE_GROUP_NAME_set },
    { "ResourceGroupManager_INTERNAL_RESOURCE_GROUP_NAME", _wrap_ResourceGroupManager_INTERNAL_RESOURCE_GROUP_NAME_get, _wrap_ResourceGroupManager_INTERNAL_RESOURCE_GROUP_NAME_set },
    { "ResourceGroupManager_AUTODETECT_RESOURCE_GROUP_NAME", _wrap_ResourceGroupManager_AUTODETECT_RESOURCE_GROUP_NAME_get, _wrap_ResourceGroupManager_AUTODETECT_RESOURCE_GROUP_NAME_set },
    { "ResourceGroupManager_RESOURCE_SYSTEM_NUM_REFERENCE_COUNTS", _wrap_ResourceGroupManager_RESOURCE_SYSTEM_NUM_REFERENCE_COUNTS_get, _wrap_ResourceGroupManager_RESOURCE_SYSTEM_NUM_REFERENCE_COUNTS_set },
    {0,0,0}
};

static swig_lua_const_info swig_constants[] = {
{ SWIG_LUA_INT,     (char *)"PF_UNKNOWN", (long) Ogre::PF_UNKNOWN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_L8", (long) Ogre::PF_L8, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_BYTE_L", (long) Ogre::PF_BYTE_L, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_L16", (long) Ogre::PF_L16, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_SHORT_L", (long) Ogre::PF_SHORT_L, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_A8", (long) Ogre::PF_A8, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_BYTE_A", (long) Ogre::PF_BYTE_A, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_A4L4", (long) Ogre::PF_A4L4, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_BYTE_LA", (long) Ogre::PF_BYTE_LA, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_R5G6B5", (long) Ogre::PF_R5G6B5, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_B5G6R5", (long) Ogre::PF_B5G6R5, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_R3G3B2", (long) Ogre::PF_R3G3B2, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_A4R4G4B4", (long) Ogre::PF_A4R4G4B4, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_A1R5G5B5", (long) Ogre::PF_A1R5G5B5, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_R8G8B8", (long) Ogre::PF_R8G8B8, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_B8G8R8", (long) Ogre::PF_B8G8R8, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_A8R8G8B8", (long) Ogre::PF_A8R8G8B8, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_A8B8G8R8", (long) Ogre::PF_A8B8G8R8, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_B8G8R8A8", (long) Ogre::PF_B8G8R8A8, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_R8G8B8A8", (long) Ogre::PF_R8G8B8A8, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_X8R8G8B8", (long) Ogre::PF_X8R8G8B8, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_X8B8G8R8", (long) Ogre::PF_X8B8G8R8, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_BYTE_RGB", (long) Ogre::PF_BYTE_RGB, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_BYTE_BGR", (long) Ogre::PF_BYTE_BGR, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_BYTE_BGRA", (long) Ogre::PF_BYTE_BGRA, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_BYTE_RGBA", (long) Ogre::PF_BYTE_RGBA, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_A2R10G10B10", (long) Ogre::PF_A2R10G10B10, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_A2B10G10R10", (long) Ogre::PF_A2B10G10R10, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_DXT1", (long) Ogre::PF_DXT1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_DXT2", (long) Ogre::PF_DXT2, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_DXT3", (long) Ogre::PF_DXT3, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_DXT4", (long) Ogre::PF_DXT4, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_DXT5", (long) Ogre::PF_DXT5, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_FLOAT16_R", (long) Ogre::PF_FLOAT16_R, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_FLOAT16_RGB", (long) Ogre::PF_FLOAT16_RGB, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_FLOAT16_RGBA", (long) Ogre::PF_FLOAT16_RGBA, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_FLOAT32_R", (long) Ogre::PF_FLOAT32_R, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_FLOAT32_RGB", (long) Ogre::PF_FLOAT32_RGB, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_FLOAT32_RGBA", (long) Ogre::PF_FLOAT32_RGBA, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_FLOAT16_GR", (long) Ogre::PF_FLOAT16_GR, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_FLOAT32_GR", (long) Ogre::PF_FLOAT32_GR, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_DEPTH", (long) Ogre::PF_DEPTH, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_SHORT_RGBA", (long) Ogre::PF_SHORT_RGBA, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_SHORT_GR", (long) Ogre::PF_SHORT_GR, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_SHORT_RGB", (long) Ogre::PF_SHORT_RGB, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_PVRTC_RGB2", (long) Ogre::PF_PVRTC_RGB2, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_PVRTC_RGBA2", (long) Ogre::PF_PVRTC_RGBA2, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_PVRTC_RGB4", (long) Ogre::PF_PVRTC_RGB4, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_PVRTC_RGBA4", (long) Ogre::PF_PVRTC_RGBA4, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PF_COUNT", (long) Ogre::PF_COUNT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PFF_HASALPHA", (long) Ogre::PFF_HASALPHA, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PFF_COMPRESSED", (long) Ogre::PFF_COMPRESSED, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PFF_FLOAT", (long) Ogre::PFF_FLOAT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PFF_DEPTH", (long) Ogre::PFF_DEPTH, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PFF_NATIVEENDIAN", (long) Ogre::PFF_NATIVEENDIAN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PFF_LUMINANCE", (long) Ogre::PFF_LUMINANCE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PCT_BYTE", (long) Ogre::PCT_BYTE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PCT_SHORT", (long) Ogre::PCT_SHORT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PCT_FLOAT16", (long) Ogre::PCT_FLOAT16, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PCT_FLOAT32", (long) Ogre::PCT_FLOAT32, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PCT_COUNT", (long) Ogre::PCT_COUNT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"FOG_NONE", (long) Ogre::FOG_NONE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"FOG_EXP", (long) Ogre::FOG_EXP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"FOG_EXP2", (long) Ogre::FOG_EXP2, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"FOG_LINEAR", (long) Ogre::FOG_LINEAR, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"CULL_NONE", (long) Ogre::CULL_NONE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"CULL_CLOCKWISE", (long) Ogre::CULL_CLOCKWISE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"CULL_ANTICLOCKWISE", (long) Ogre::CULL_ANTICLOCKWISE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"MANUAL_CULL_NONE", (long) Ogre::MANUAL_CULL_NONE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"MANUAL_CULL_BACK", (long) Ogre::MANUAL_CULL_BACK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"MANUAL_CULL_FRONT", (long) Ogre::MANUAL_CULL_FRONT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SHADOWTYPE_NONE", (long) Ogre::SHADOWTYPE_NONE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SHADOWDETAILTYPE_ADDITIVE", (long) Ogre::SHADOWDETAILTYPE_ADDITIVE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SHADOWDETAILTYPE_MODULATIVE", (long) Ogre::SHADOWDETAILTYPE_MODULATIVE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SHADOWDETAILTYPE_INTEGRATED", (long) Ogre::SHADOWDETAILTYPE_INTEGRATED, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SHADOWDETAILTYPE_STENCIL", (long) Ogre::SHADOWDETAILTYPE_STENCIL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SHADOWDETAILTYPE_TEXTURE", (long) Ogre::SHADOWDETAILTYPE_TEXTURE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SHADOWTYPE_STENCIL_MODULATIVE", (long) Ogre::SHADOWTYPE_STENCIL_MODULATIVE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SHADOWTYPE_STENCIL_ADDITIVE", (long) Ogre::SHADOWTYPE_STENCIL_ADDITIVE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SHADOWTYPE_TEXTURE_MODULATIVE", (long) Ogre::SHADOWTYPE_TEXTURE_MODULATIVE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SHADOWTYPE_TEXTURE_ADDITIVE", (long) Ogre::SHADOWTYPE_TEXTURE_ADDITIVE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SHADOWTYPE_TEXTURE_ADDITIVE_INTEGRATED", (long) Ogre::SHADOWTYPE_TEXTURE_ADDITIVE_INTEGRATED, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SHADOWTYPE_TEXTURE_MODULATIVE_INTEGRATED", (long) Ogre::SHADOWTYPE_TEXTURE_MODULATIVE_INTEGRATED, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PM_POINTS", (long) Ogre::PM_POINTS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PM_WIREFRAME", (long) Ogre::PM_WIREFRAME, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PM_SOLID", (long) Ogre::PM_SOLID, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RENDER_QUEUE_BACKGROUND", (long) Ogre::RENDER_QUEUE_BACKGROUND, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RENDER_QUEUE_SKIES_EARLY", (long) Ogre::RENDER_QUEUE_SKIES_EARLY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RENDER_QUEUE_1", (long) Ogre::RENDER_QUEUE_1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RENDER_QUEUE_2", (long) Ogre::RENDER_QUEUE_2, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RENDER_QUEUE_WORLD_GEOMETRY_1", (long) Ogre::RENDER_QUEUE_WORLD_GEOMETRY_1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RENDER_QUEUE_3", (long) Ogre::RENDER_QUEUE_3, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RENDER_QUEUE_4", (long) Ogre::RENDER_QUEUE_4, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RENDER_QUEUE_MAIN", (long) Ogre::RENDER_QUEUE_MAIN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RENDER_QUEUE_6", (long) Ogre::RENDER_QUEUE_6, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RENDER_QUEUE_7", (long) Ogre::RENDER_QUEUE_7, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RENDER_QUEUE_WORLD_GEOMETRY_2", (long) Ogre::RENDER_QUEUE_WORLD_GEOMETRY_2, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RENDER_QUEUE_8", (long) Ogre::RENDER_QUEUE_8, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RENDER_QUEUE_9", (long) Ogre::RENDER_QUEUE_9, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RENDER_QUEUE_SKIES_LATE", (long) Ogre::RENDER_QUEUE_SKIES_LATE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RENDER_QUEUE_OVERLAY", (long) Ogre::RENDER_QUEUE_OVERLAY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RENDER_QUEUE_MAX", (long) Ogre::RENDER_QUEUE_MAX, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"AxisAlignedBox_EXTENT_NULL", (long) Ogre::AxisAlignedBox::EXTENT_NULL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"AxisAlignedBox_EXTENT_FINITE", (long) Ogre::AxisAlignedBox::EXTENT_FINITE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"AxisAlignedBox_EXTENT_INFINITE", (long) Ogre::AxisAlignedBox::EXTENT_INFINITE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"AxisAlignedBox_FAR_LEFT_BOTTOM", (long) Ogre::AxisAlignedBox::FAR_LEFT_BOTTOM, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"AxisAlignedBox_FAR_LEFT_TOP", (long) Ogre::AxisAlignedBox::FAR_LEFT_TOP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"AxisAlignedBox_FAR_RIGHT_TOP", (long) Ogre::AxisAlignedBox::FAR_RIGHT_TOP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"AxisAlignedBox_FAR_RIGHT_BOTTOM", (long) Ogre::AxisAlignedBox::FAR_RIGHT_BOTTOM, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"AxisAlignedBox_NEAR_RIGHT_BOTTOM", (long) Ogre::AxisAlignedBox::NEAR_RIGHT_BOTTOM, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"AxisAlignedBox_NEAR_LEFT_BOTTOM", (long) Ogre::AxisAlignedBox::NEAR_LEFT_BOTTOM, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"AxisAlignedBox_NEAR_LEFT_TOP", (long) Ogre::AxisAlignedBox::NEAR_LEFT_TOP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"AxisAlignedBox_NEAR_RIGHT_TOP", (long) Ogre::AxisAlignedBox::NEAR_RIGHT_TOP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Node_TS_LOCAL", (long) Ogre::Node::TS_LOCAL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Node_TS_PARENT", (long) Ogre::Node::TS_PARENT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Node_TS_WORLD", (long) Ogre::Node::TS_WORLD, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Light_LT_POINT", (long) Ogre::Light::LT_POINT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Light_LT_DIRECTIONAL", (long) Ogre::Light::LT_DIRECTIONAL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Light_LT_SPOTLIGHT", (long) Ogre::Light::LT_SPOTLIGHT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BBO_TOP_LEFT", (long) Ogre::BBO_TOP_LEFT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BBO_TOP_CENTER", (long) Ogre::BBO_TOP_CENTER, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BBO_TOP_RIGHT", (long) Ogre::BBO_TOP_RIGHT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BBO_CENTER_LEFT", (long) Ogre::BBO_CENTER_LEFT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BBO_CENTER", (long) Ogre::BBO_CENTER, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BBO_CENTER_RIGHT", (long) Ogre::BBO_CENTER_RIGHT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BBO_BOTTOM_LEFT", (long) Ogre::BBO_BOTTOM_LEFT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BBO_BOTTOM_CENTER", (long) Ogre::BBO_BOTTOM_CENTER, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BBO_BOTTOM_RIGHT", (long) Ogre::BBO_BOTTOM_RIGHT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BBR_VERTEX", (long) Ogre::BBR_VERTEX, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BBR_TEXCOORD", (long) Ogre::BBR_TEXCOORD, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BBT_POINT", (long) Ogre::BBT_POINT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BBT_ORIENTED_COMMON", (long) Ogre::BBT_ORIENTED_COMMON, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BBT_ORIENTED_SELF", (long) Ogre::BBT_ORIENTED_SELF, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BBT_PERPENDICULAR_COMMON", (long) Ogre::BBT_PERPENDICULAR_COMMON, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BBT_PERPENDICULAR_SELF", (long) Ogre::BBT_PERPENDICULAR_SELF, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"CS_FREELOOK", (long) OgreBites::CS_FREELOOK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"CS_ORBIT", (long) OgreBites::CS_ORBIT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"CS_MANUAL", (long) OgreBites::CS_MANUAL, 0, 0, 0},
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_Ogre__RenderWindowTo_p_Ogre__RenderTarget(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Ogre::RenderTarget *)  ((Ogre::RenderWindow *) x));
}
static void *_p_Ogre__BillboardSetTo_p_Ogre__Renderable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Ogre::Renderable *)  ((Ogre::BillboardSet *) x));
}
static void *_p_Ogre__SceneNodeTo_p_Ogre__Node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Ogre::Node *)  ((Ogre::SceneNode *) x));
}
static void *_p_Ogre__EntityTo_p_Ogre__MovableObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Ogre::MovableObject *)  ((Ogre::Entity *) x));
}
static void *_p_Ogre__LightTo_p_Ogre__MovableObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Ogre::MovableObject *)  ((Ogre::Light *) x));
}
static void *_p_Ogre__BillboardSetTo_p_Ogre__MovableObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Ogre::MovableObject *)  ((Ogre::BillboardSet *) x));
}
static swig_type_info _swigt__p_BillboardSet = {"_p_BillboardSet", "BillboardSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CornerEnum = {"_p_CornerEnum", "CornerEnum *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OgreBites__SdkCameraMan = {"_p_OgreBites__SdkCameraMan", "OgreBites::SdkCameraMan *", 0, 0, (void*)&_wrap_class_OgreBites_SdkCameraMan, 0};
static swig_type_info _swigt__p_Ogre__Angle = {"_p_Ogre__Angle", "Ogre::Angle *", 0, 0, (void*)&_wrap_class_Ogre_Angle, 0};
static swig_type_info _swigt__p_Ogre__Any = {"_p_Ogre__Any", "Ogre::Any *", 0, 0, (void*)&_wrap_class_Ogre_Any, 0};
static swig_type_info _swigt__p_Ogre__AxisAlignedBox = {"_p_Ogre__AxisAlignedBox", "Ogre::AxisAlignedBox *", 0, 0, (void*)&_wrap_class_Ogre_AxisAlignedBox, 0};
static swig_type_info _swigt__p_Ogre__Billboard = {"_p_Ogre__Billboard", "Ogre::Billboard *", 0, 0, (void*)&_wrap_class_Ogre_Billboard, 0};
static swig_type_info _swigt__p_Ogre__BillboardSet = {"_p_Ogre__BillboardSet", "Ogre::BillboardSet *", 0, 0, (void*)&_wrap_class_Ogre_BillboardSet, 0};
static swig_type_info _swigt__p_Ogre__Camera = {"_p_Ogre__Camera", "Ogre::Camera *", 0, 0, (void*)&_wrap_class_Ogre_Camera, 0};
static swig_type_info _swigt__p_Ogre__ColourValue = {"_p_Ogre__ColourValue", "Ogre::ColourValue *", 0, 0, (void*)&_wrap_class_Ogre_ColourValue, 0};
static swig_type_info _swigt__p_Ogre__CompositorInstance = {"_p_Ogre__CompositorInstance", "Ogre::CompositorInstance *", 0, 0, (void*)&_wrap_class_Ogre_CompositorInstance, 0};
static swig_type_info _swigt__p_Ogre__CompositorLogic = {"_p_Ogre__CompositorLogic", "Ogre::CompositorLogic *", 0, 0, (void*)&_wrap_class_Ogre_CompositorLogic, 0};
static swig_type_info _swigt__p_Ogre__CompositorManager = {"_p_Ogre__CompositorManager", "Ogre::CompositorManager *", 0, 0, (void*)&_wrap_class_Ogre_CompositorManager, 0};
static swig_type_info _swigt__p_Ogre__Degree = {"_p_Ogre__Degree", "Ogre::Degree *", 0, 0, (void*)&_wrap_class_Ogre_Degree, 0};
static swig_type_info _swigt__p_Ogre__Entity = {"_p_Ogre__Entity", "Ogre::Entity *", 0, 0, (void*)&_wrap_class_Ogre_Entity, 0};
static swig_type_info _swigt__p_Ogre__InstancedGeometry = {"_p_Ogre__InstancedGeometry", "Ogre::InstancedGeometry *", 0, 0, (void*)&_wrap_class_Ogre_InstancedGeometry, 0};
static swig_type_info _swigt__p_Ogre__Light = {"_p_Ogre__Light", "Ogre::Light *", 0, 0, (void*)&_wrap_class_Ogre_Light, 0};
static swig_type_info _swigt__p_Ogre__ManualResourceLoader = {"_p_Ogre__ManualResourceLoader", "Ogre::ManualResourceLoader *", 0, 0, (void*)&_wrap_class_Ogre_ManualResourceLoader, 0};
static swig_type_info _swigt__p_Ogre__MeshManager = {"_p_Ogre__MeshManager", "Ogre::MeshManager *", 0, 0, (void*)&_wrap_class_Ogre_MeshManager, 0};
static swig_type_info _swigt__p_Ogre__MeshPtr = {"_p_Ogre__MeshPtr", "Ogre::MeshPtr *", 0, 0, (void*)&_wrap_class_Ogre_MeshPtr, 0};
static swig_type_info _swigt__p_Ogre__MovableObject = {"_p_Ogre__MovableObject", "Ogre::MovableObject *", 0, 0, (void*)&_wrap_class_Ogre_MovableObject, 0};
static swig_type_info _swigt__p_Ogre__Node = {"_p_Ogre__Node", "Ogre::Node *", 0, 0, (void*)&_wrap_class_Ogre_Node, 0};
static swig_type_info _swigt__p_Ogre__Plane = {"_p_Ogre__Plane", "Ogre::Plane *", 0, 0, (void*)&_wrap_class_Ogre_Plane, 0};
static swig_type_info _swigt__p_Ogre__Quaternion = {"_p_Ogre__Quaternion", "Ogre::Quaternion *", 0, 0, (void*)&_wrap_class_Ogre_Quaternion, 0};
static swig_type_info _swigt__p_Ogre__Radian = {"_p_Ogre__Radian", "Ogre::Radian *", 0, 0, (void*)&_wrap_class_Ogre_Radian, 0};
static swig_type_info _swigt__p_Ogre__RenderTarget = {"_p_Ogre__RenderTarget", "Ogre::RenderTarget *", 0, 0, (void*)&_wrap_class_Ogre_RenderTarget, 0};
static swig_type_info _swigt__p_Ogre__RenderWindow = {"_p_Ogre__RenderWindow", "Ogre::RenderWindow *", 0, 0, (void*)&_wrap_class_Ogre_RenderWindow, 0};
static swig_type_info _swigt__p_Ogre__Renderable = {"_p_Ogre__Renderable", "Ogre::Renderable *", 0, 0, (void*)&_wrap_class_Ogre_Renderable, 0};
static swig_type_info _swigt__p_Ogre__Resource = {"_p_Ogre__Resource", "Ogre::Resource *", 0, 0, (void*)&_wrap_class_Ogre_Resource, 0};
static swig_type_info _swigt__p_Ogre__ResourceGroupManager = {"_p_Ogre__ResourceGroupManager", "Ogre::ResourceGroupManager *", 0, 0, (void*)&_wrap_class_Ogre_ResourceGroupManager, 0};
static swig_type_info _swigt__p_Ogre__ResourceManager = {"_p_Ogre__ResourceManager", "Ogre::ResourceManager *", 0, 0, (void*)&_wrap_class_Ogre_ResourceManager, 0};
static swig_type_info _swigt__p_Ogre__RibbonTrail = {"_p_Ogre__RibbonTrail", "Ogre::RibbonTrail *", 0, 0, (void*)&_wrap_class_Ogre_RibbonTrail, 0};
static swig_type_info _swigt__p_Ogre__SceneManager = {"_p_Ogre__SceneManager", "Ogre::SceneManager *", 0, 0, (void*)&_wrap_class_Ogre_SceneManager, 0};
static swig_type_info _swigt__p_Ogre__SceneNode = {"_p_Ogre__SceneNode", "Ogre::SceneNode *", 0, 0, (void*)&_wrap_class_Ogre_SceneNode, 0};
static swig_type_info _swigt__p_Ogre__SharedPtrT_Ogre__Resource_t = {"_p_Ogre__SharedPtrT_Ogre__Resource_t", "Ogre::SharedPtr< Ogre::Resource > *|Ogre::ResourcePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__StaticGeometry = {"_p_Ogre__StaticGeometry", "Ogre::StaticGeometry *", 0, 0, (void*)&_wrap_class_Ogre_StaticGeometry, 0};
static swig_type_info _swigt__p_Ogre__SubEntity = {"_p_Ogre__SubEntity", "Ogre::SubEntity *", 0, 0, (void*)&_wrap_class_Ogre_SubEntity, 0};
static swig_type_info _swigt__p_Ogre__Vector2 = {"_p_Ogre__Vector2", "Ogre::Vector2 *", 0, 0, (void*)&_wrap_class_Ogre_Vector2, 0};
static swig_type_info _swigt__p_Ogre__Vector3 = {"_p_Ogre__Vector3", "Ogre::Vector3 *", 0, 0, (void*)&_wrap_class_Ogre_Vector3, 0};
static swig_type_info _swigt__p_Ogre__Viewport = {"_p_Ogre__Viewport", "Ogre::Viewport *", 0, 0, (void*)&_wrap_class_Ogre_Viewport, 0};
static swig_type_info _swigt__p_Ogre__uint16 = {"_p_Ogre__uint16", "Ogre::uint16 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SceneManager = {"_p_SceneManager", "SceneManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Viewport = {"_p_Viewport", "Viewport *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *|Ogre::Real *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|Ogre::uint8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mapT_std__string_std__string_t = {"_p_mapT_std__string_std__string_t", "Ogre::NameValuePairList *|map< std::string,std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *|Ogre::String *", 0, 0, (void*)&_wrap_class_std_string, 0};
static swig_type_info _swigt__p_std__type_info = {"_p_std__type_info", "std::type_info *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint32 = {"_p_uint32", "Ogre::RGBA *|uint32 *|Ogre::ARGB *|Ogre::BGRA *|Ogre::ABGR *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "Ogre::uchar *|unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *|Ogre::uint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "Ogre::ulong *|unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|Ogre::ushort *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vectorT_Ogre__PixelFormat_t__type = {"_p_vectorT_Ogre__PixelFormat_t__type", "vector< Ogre::PixelFormat >::type *|Ogre::PixelFormatList *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_BillboardSet,
  &_swigt__p_CornerEnum,
  &_swigt__p_OgreBites__SdkCameraMan,
  &_swigt__p_Ogre__Angle,
  &_swigt__p_Ogre__Any,
  &_swigt__p_Ogre__AxisAlignedBox,
  &_swigt__p_Ogre__Billboard,
  &_swigt__p_Ogre__BillboardSet,
  &_swigt__p_Ogre__Camera,
  &_swigt__p_Ogre__ColourValue,
  &_swigt__p_Ogre__CompositorInstance,
  &_swigt__p_Ogre__CompositorLogic,
  &_swigt__p_Ogre__CompositorManager,
  &_swigt__p_Ogre__Degree,
  &_swigt__p_Ogre__Entity,
  &_swigt__p_Ogre__InstancedGeometry,
  &_swigt__p_Ogre__Light,
  &_swigt__p_Ogre__ManualResourceLoader,
  &_swigt__p_Ogre__MeshManager,
  &_swigt__p_Ogre__MeshPtr,
  &_swigt__p_Ogre__MovableObject,
  &_swigt__p_Ogre__Node,
  &_swigt__p_Ogre__Plane,
  &_swigt__p_Ogre__Quaternion,
  &_swigt__p_Ogre__Radian,
  &_swigt__p_Ogre__RenderTarget,
  &_swigt__p_Ogre__RenderWindow,
  &_swigt__p_Ogre__Renderable,
  &_swigt__p_Ogre__Resource,
  &_swigt__p_Ogre__ResourceGroupManager,
  &_swigt__p_Ogre__ResourceManager,
  &_swigt__p_Ogre__RibbonTrail,
  &_swigt__p_Ogre__SceneManager,
  &_swigt__p_Ogre__SceneNode,
  &_swigt__p_Ogre__SharedPtrT_Ogre__Resource_t,
  &_swigt__p_Ogre__StaticGeometry,
  &_swigt__p_Ogre__SubEntity,
  &_swigt__p_Ogre__Vector2,
  &_swigt__p_Ogre__Vector3,
  &_swigt__p_Ogre__Viewport,
  &_swigt__p_Ogre__uint16,
  &_swigt__p_SceneManager,
  &_swigt__p_Viewport,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_mapT_std__string_std__string_t,
  &_swigt__p_std__string,
  &_swigt__p_std__type_info,
  &_swigt__p_uint32,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_vectorT_Ogre__PixelFormat_t__type,
};

static swig_cast_info _swigc__p_BillboardSet[] = {  {&_swigt__p_BillboardSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CornerEnum[] = {  {&_swigt__p_CornerEnum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OgreBites__SdkCameraMan[] = {  {&_swigt__p_OgreBites__SdkCameraMan, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Angle[] = {  {&_swigt__p_Ogre__Angle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Any[] = {  {&_swigt__p_Ogre__Any, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__AxisAlignedBox[] = {  {&_swigt__p_Ogre__AxisAlignedBox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Billboard[] = {  {&_swigt__p_Ogre__Billboard, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__BillboardSet[] = {  {&_swigt__p_Ogre__BillboardSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Camera[] = {  {&_swigt__p_Ogre__Camera, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__ColourValue[] = {  {&_swigt__p_Ogre__ColourValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__CompositorInstance[] = {  {&_swigt__p_Ogre__CompositorInstance, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__CompositorLogic[] = {  {&_swigt__p_Ogre__CompositorLogic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__CompositorManager[] = {  {&_swigt__p_Ogre__CompositorManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Degree[] = {  {&_swigt__p_Ogre__Degree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Entity[] = {  {&_swigt__p_Ogre__Entity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__InstancedGeometry[] = {  {&_swigt__p_Ogre__InstancedGeometry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Light[] = {  {&_swigt__p_Ogre__Light, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__ManualResourceLoader[] = {  {&_swigt__p_Ogre__ManualResourceLoader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__MeshManager[] = {  {&_swigt__p_Ogre__MeshManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__MeshPtr[] = {  {&_swigt__p_Ogre__MeshPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__MovableObject[] = {  {&_swigt__p_Ogre__MovableObject, 0, 0, 0},  {&_swigt__p_Ogre__Entity, _p_Ogre__EntityTo_p_Ogre__MovableObject, 0, 0},  {&_swigt__p_Ogre__Light, _p_Ogre__LightTo_p_Ogre__MovableObject, 0, 0},  {&_swigt__p_Ogre__BillboardSet, _p_Ogre__BillboardSetTo_p_Ogre__MovableObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Node[] = {  {&_swigt__p_Ogre__SceneNode, _p_Ogre__SceneNodeTo_p_Ogre__Node, 0, 0},  {&_swigt__p_Ogre__Node, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Plane[] = {  {&_swigt__p_Ogre__Plane, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Quaternion[] = {  {&_swigt__p_Ogre__Quaternion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Radian[] = {  {&_swigt__p_Ogre__Radian, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__RenderTarget[] = {  {&_swigt__p_Ogre__RenderTarget, 0, 0, 0},  {&_swigt__p_Ogre__RenderWindow, _p_Ogre__RenderWindowTo_p_Ogre__RenderTarget, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__RenderWindow[] = {  {&_swigt__p_Ogre__RenderWindow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Renderable[] = {  {&_swigt__p_Ogre__Renderable, 0, 0, 0},  {&_swigt__p_Ogre__BillboardSet, _p_Ogre__BillboardSetTo_p_Ogre__Renderable, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Resource[] = {  {&_swigt__p_Ogre__Resource, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__ResourceGroupManager[] = {  {&_swigt__p_Ogre__ResourceGroupManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__ResourceManager[] = {  {&_swigt__p_Ogre__ResourceManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__RibbonTrail[] = {  {&_swigt__p_Ogre__RibbonTrail, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__SceneManager[] = {  {&_swigt__p_Ogre__SceneManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__SceneNode[] = {  {&_swigt__p_Ogre__SceneNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__SharedPtrT_Ogre__Resource_t[] = {  {&_swigt__p_Ogre__SharedPtrT_Ogre__Resource_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__StaticGeometry[] = {  {&_swigt__p_Ogre__StaticGeometry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__SubEntity[] = {  {&_swigt__p_Ogre__SubEntity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Vector2[] = {  {&_swigt__p_Ogre__Vector2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Vector3[] = {  {&_swigt__p_Ogre__Vector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Viewport[] = {  {&_swigt__p_Ogre__Viewport, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__uint16[] = {  {&_swigt__p_Ogre__uint16, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SceneManager[] = {  {&_swigt__p_SceneManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Viewport[] = {  {&_swigt__p_Viewport, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mapT_std__string_std__string_t[] = {  {&_swigt__p_mapT_std__string_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__type_info[] = {  {&_swigt__p_std__type_info, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint32[] = {  {&_swigt__p_uint32, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vectorT_Ogre__PixelFormat_t__type[] = {  {&_swigt__p_vectorT_Ogre__PixelFormat_t__type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_BillboardSet,
  _swigc__p_CornerEnum,
  _swigc__p_OgreBites__SdkCameraMan,
  _swigc__p_Ogre__Angle,
  _swigc__p_Ogre__Any,
  _swigc__p_Ogre__AxisAlignedBox,
  _swigc__p_Ogre__Billboard,
  _swigc__p_Ogre__BillboardSet,
  _swigc__p_Ogre__Camera,
  _swigc__p_Ogre__ColourValue,
  _swigc__p_Ogre__CompositorInstance,
  _swigc__p_Ogre__CompositorLogic,
  _swigc__p_Ogre__CompositorManager,
  _swigc__p_Ogre__Degree,
  _swigc__p_Ogre__Entity,
  _swigc__p_Ogre__InstancedGeometry,
  _swigc__p_Ogre__Light,
  _swigc__p_Ogre__ManualResourceLoader,
  _swigc__p_Ogre__MeshManager,
  _swigc__p_Ogre__MeshPtr,
  _swigc__p_Ogre__MovableObject,
  _swigc__p_Ogre__Node,
  _swigc__p_Ogre__Plane,
  _swigc__p_Ogre__Quaternion,
  _swigc__p_Ogre__Radian,
  _swigc__p_Ogre__RenderTarget,
  _swigc__p_Ogre__RenderWindow,
  _swigc__p_Ogre__Renderable,
  _swigc__p_Ogre__Resource,
  _swigc__p_Ogre__ResourceGroupManager,
  _swigc__p_Ogre__ResourceManager,
  _swigc__p_Ogre__RibbonTrail,
  _swigc__p_Ogre__SceneManager,
  _swigc__p_Ogre__SceneNode,
  _swigc__p_Ogre__SharedPtrT_Ogre__Resource_t,
  _swigc__p_Ogre__StaticGeometry,
  _swigc__p_Ogre__SubEntity,
  _swigc__p_Ogre__Vector2,
  _swigc__p_Ogre__Vector3,
  _swigc__p_Ogre__Viewport,
  _swigc__p_Ogre__uint16,
  _swigc__p_SceneManager,
  _swigc__p_Viewport,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_mapT_std__string_std__string_t,
  _swigc__p_std__string,
  _swigc__p_std__type_info,
  _swigc__p_uint32,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_short,
  _swigc__p_vectorT_Ogre__PixelFormat_t__type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an eariler #define will rename it
*/
SWIGEXPORT int SWIG_init(lua_State* L)
{
  int i;
  /* start with global table */
  lua_pushvalue(L,LUA_GLOBALSINDEX);
  /* SWIG's internal initalisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_equal);
  /* begin the module (its a table with the same name as the module) */
  SWIG_Lua_module_begin(L,SWIG_name);
  /* add commands/functions */
  for (i = 0; swig_commands[i].name; i++){
    SWIG_Lua_module_add_function(L,swig_commands[i].name,swig_commands[i].func);
  }
  /* add variables */
  for (i = 0; swig_variables[i].name; i++){
    SWIG_Lua_module_add_variable(L,swig_variables[i].name,swig_variables[i].get,swig_variables[i].set);
  }
  /* set up base class pointers (the hierachy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* additional registration structs & classes in lua */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_class_register(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* constants */
  SWIG_Lua_InstallConstants(L,swig_constants);
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  lua_pop(L,1);  /* tidy stack (remove module table)*/
  lua_pop(L,1);  /* tidy stack (remove global table)*/
  return 1;
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

