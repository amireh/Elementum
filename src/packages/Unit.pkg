/*
 * Copyright (C) Shroom Studios, Inc - All Rights Reserved
 *
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 *
 * Written by Ahmad Amireh <ahmad@shroom-studios.com>, September 2011
 */

$#include "Unit.h"

namespace Pixy
{
  /*! \class Unit "Unit.h" "include/Unit.h"
  *
  *  \brief
  *  Represents Unit GameObjects, their actions and attributes.
  *
  */
  struct Event;
  class Puppet;
  class Unit : public Pixy::Entity, public Pixy::BaseUnit, public Pixy::Mobile
  {
    public:

    enum Position {
      Ready,
      Charging,
      Attacking,
      Blocking,
      Trampling
    };


    Unit();
    Unit(const Unit& src);
    virtual ~Unit();

    virtual bool live();
    virtual void die();

    virtual bool attack(Pixy::Puppet* inTarget);
    virtual bool attack(Pixy::Unit* inTarget, bool doBlock = false);

    virtual void serialize(Event& inEvt);
    virtual void deserialize(const Event& inEvt);

    virtual Entity* toEntity() const;

    //void move(int inDestination, boost::function<void(Pixy::Mobile*)> callback=0);
    //void moveAndAttack(Puppet* inTarget);
    //void moveAndAttack(std::list<Unit*> inBlockers);

    Pixy::Puppet* getEnemy() const;

    int getAttackOrder() const;
    void setAttackOrder(int);

    Pixy::Unit* getBlockTarget() const;
    void setBlockTarget(Pixy::Unit*);
    Pixy::Entity* getAttackTarget() const;
    void setAttackTarget(Pixy::Entity*);

    // called by Puppet::attachUnit()
    void _setEnemy(Pixy::Puppet* inPuppet);

    virtual void setAP(int inU);
    virtual void setHP(int inU);
    //~ virtual void setBaseHP(int inU);
    //~ virtual void setBaseAP(int inU);

    //~ virtual bool attack(Pixy::Puppet* inTarget);
    //~ virtual bool attack(Pixy::Unit* inTarget, bool block=false);

    virtual void updateTextOverlay();
    virtual void reset();
    virtual void rest();
    virtual void getUp();

    bool isDying() const;

  }; // end of class Unit
} // end of Pixy namespace
