#include "ParticleUniversePrerequisites.h"
#include "ParticleUniverseParticle.h"
#include "ParticleUniverseTechnique.h"
#include "ParticleUniverseIElement.h"
#include "ParticleUniverseSystemListener.h"
#include "OgreMovableObject.h"
#include "ParticleUniverseController.h"

namespace ParticleUniverse
{

  class Particle
  {
  };
  class ParticleTechnique
  {
  };

	class ParticleSystem : public Ogre::MovableObject
	{
		public:
			// Default values
			static const bool DEFAULT_KEEP_LOCAL;
			static const Real DEFAULT_ITERATION_INTERVAL;
			static const Real DEFAULT_FIXED_TIMEOUT;
			static const Real DEFAULT_NON_VISIBLE_UPDATE_TIMEOUT;
			static const bool DEFAULT_SMOOTH_LOD;
			static const Real DEFAULT_FAST_FORWARD_TIME;
			static const char *DEFAULT_MAIN_CAMERA_NAME;
			static const Real DEFAULT_SCALE_VELOCITY;
			static const Real DEFAULT_SCALE_TIME;
			static const Vector3 DEFAULT_SCALE;
			static const bool DEFAULT_TIGHT_BOUNDINGBOX;

			enum ParticleSystemState
			{
				PSS_PREPARED,
				PSS_STARTED,
				PSS_STOPPED,
				PSS_PAUSED
			};

			ParticleSystem(const String& name);
			ParticleSystem(const String& name, const String& resourceGroupName);
	        virtual ~ParticleSystem(void);

			/** Gets the derived position of the particle system (i.e derived from the parent node, if available).
	        */
			virtual const Ogre::Vector3& getDerivedPosition(void);

			/** Gets the derived orientation of the particle system (i.e derived from the parent node, if available).
	        */
			virtual const Ogre::Quaternion& getDerivedOrientation(void) const;

			/** Gets the latest orientation of the particle system before update.
	        */
			const Ogre::Quaternion& getLatestOrientation(void) const;

			/** Returns true if the particle system has rotated between updates.
	        */
			bool hasRotatedBetweenUpdates(void) const;

			/** If the orientation of the particle system has been changed since the last update, the passed vector
				is rotated accordingly.
	        */
			void rotationOffset(Ogre::Vector3& pos);

			/** Is smooth Lod set?.
	        */
			inline bool isSmoothLod (void) const;

			/** Set smooth Lod.
	        */
			void setSmoothLod (bool smoothLod);

			/** Returns the time since the ParticleSystem was started.
	        */
			inline Ogre::Real getTimeElapsedSinceStart(void) const;

			/** Get the name of the resource group that is assigned to this ParticleSystem.
			*/
			const Ogre::String& getResourceGroupName(void) const;

			/** Set the name of the resource group for this ParticleSystem.
			*/
			void setResourceGroupName(const Ogre::String& resourceGroupName);

			/** Create a ParticleTechnique and add it to this ParticleSystem.
	        */
			ParticleTechnique* createTechnique(void);

			/** Add a technique to the list.
			@remarks
				It must be possible to add a previously created technique to the list. This is the case with
				techniques that were created outside the particle system. An example is the creation of
				techniques by means of a script. The technique will be placed under control of the particle
				system.	The Particle System Manager however, deletes the techniques (since they are also
				created by the Particle System Manager).
			@param
				technique Pointer to a previously created technique.
	        */
			void addTechnique (ParticleTechnique* technique);

			/** Remove a technique from the system, but don't destroy it.
	        */
			void removeTechnique (ParticleTechnique* technique);

			/** Get a ParticleTechnique given a certain index.
	        */
			ParticleTechnique* getTechnique (size_t index) const;

			/** Get a ParticleTechnique. Search by ParticleTechnique name.
	        */
			ParticleTechnique* getTechnique (const Ogre::String& name) const;

			/** Get the number of ParticleTechniques of this ParticleSystem.
	        */
			size_t getNumTechniques (void) const;

			/** Destroy a ParticleTechnique.
	        */
			void destroyTechnique(ParticleTechnique* particleTechnique);

			/** Destroy a ParticleTechnique identified by means of an index.
	        */
			void destroyTechnique (size_t index);

			/** Destroy all ParticleTechniques of this ParticleSystem.
	        */
			void destroyAllTechniques (void);


			/** Overridden from MovableObject
			@see
				MovableObject
			*/
			virtual void setRenderQueueGroup(uint8 queueId);

			/**
			*/
			const Ogre::Real getNonVisibleUpdateTimeout(void) const;

			/**
			*/
			void setNonVisibleUpdateTimeout(Ogre::Real timeout);

			/** Prepares the particle system.
			@remarks
				This optional state can be used to prepare the particle system, so that initial actions are
				preformed before the particle system is started.
			*/
			void prepare (void);

			/** Starts the particle system.
			@remarks
				Only if a particle system has been attached to a SceneNode it can be started.
			*/
			void start (void);

			/** Starts the particle system and stops after a period of time.
			*/
			void start(Ogre::Real stopTime);

			/** Convenient function to start and stop (gradually) in one step.
			@remarks
				This function uses the stopFade(void) funtion; see stopFade(void).
			*/
			void startAndStopFade(Ogre::Real stopTime);

			/** Stops the particle system.
			@remarks
				Only if a particle system has been attached to a SceneNode and started it can be stopped.
			*/
			void stop(void);

			/** Stops the particle system after a period of time.
			@remarks
				This is basicly the same as calling setFixedTimeout().
			*/
			void stop(Ogre::Real stopTime);

			/** Stops emission of all particle and really stops the particle system when all particles are expired.

			*/
			void stopFade(void);

			/** Stops emission of all particle after a period of time and really stops the particle system when all particles are expired.
			*/
			void stopFade(Ogre::Real stopTime);

			/** Pauses the particle system.
			*/
			void pause(void);

			/** Pauses the particle system for a period of time. After this time, the Particle System automatically resumes.
			*/
			void pause(Ogre::Real pauseTime);

			/** Resumes the particle system.
			*/
			void resume(void);

			/** Returns the state of the particle system.
			*/
			ParticleSystemState getState (void) const;

			/**
			*/
			const Ogre::Real getFastForwardTime(void) const;

			/**
			*/
			const Ogre::Real getFastForwardInterval(void) const;

			/**
			*/
			void setFastForward(Ogre::Real time, Ogre::Real interval);

			/** Get the main camera (name).
			*/
			const Ogre::String& getMainCameraName(void) const;
			Ogre::Camera* getMainCamera(void);

			/** True if the main camera has been set.
			*/
			bool hasMainCamera(void);

			/** Set the main camera (name).
			@remarks
				By setting the main camera, the number of cameras for which un update is performed,
				is narrowed. Particle System LOD for example only really works with a 1-camera setup,
				so setting a camera (name) basicly prevents that LODding isn't screwed up if the scene
				contains multiple cameras.
			*/
			void setMainCameraName(Ogre::String cameraName);
			void setMainCamera(Ogre::Camera* camera);

			/** Returns a pointer to the current camera (the one that gets updated/notified).
			*/
			Ogre::Camera* getCurrentCamera(void);

			/**
			*/
			void fastForward(void);

			/** Returns the number of emitted ParticleTechniques.
			@remarks
				Emitted ParticleTechniques are determined by means of the _markForEmission() function.
	        */
			size_t getNumEmittedTechniques (void) const;

			/** Mark all emitted objects (ParticleTechniques and all the objects registered
				at each ParticleTechnique).
	        */
			void _markForEmission(void);

			/** Reset mark for emission indication for all techniques.
	        */
			void _resetMarkForEmission(void);

			/** Function to suppress notification of an emission change.
			@remarks
				This function is typically used when notification isn´t needed anymore. An example for this
				situation is for instance in case the ParticleTechnique is destroyed, which also causes the
				emitters to be destroyed.
	        */
			void suppressNotifyEmissionChange(bool suppress);

			/** Is called as soon as a new technique is added or deleted, which leads to a re-evaluation of the
				emitted objects.
			*/
			void _notifyEmissionChange(void);

			/**
	        */
			const Real getIterationInterval(void) const;
			void setIterationInterval(const Ogre::Real iterationInterval);

			/**
	        */
			const Real getFixedTimeout(void) const;
			void setFixedTimeout(const Ogre::Real fixedTimeout);

			/** Sets whether the bounds will be automatically updated for the life of the particle system.
			*/
			void setBoundsAutoUpdated(bool autoUpdate, Ogre::Real stopIn = 0.0f);

			/** Reset the bounding box of the particle system to the most minimal value.
			*/
			void _resetBounds(void);

			/** Returns the scale.
			*/
			const Ogre::Vector3& getScale(void) const;

			/** Set the scale independant from the node to which it is attached.
			*/
			void setScale(const Ogre::Vector3& scale);

			/** Returns the velocity scale.
			*/
			const Ogre::Real& getScaleVelocity(void) const;

			/** Set the velocity scale.
			*/
			void setScaleVelocity(const Ogre::Real& scaleVelocity);


			/** Get the time scale.
			*/
			const Ogre::Real& getScaleTime(void) const;

			/** Set the time scale.
			*/
			void setScaleTime(const Ogre::Real& scaleTime);

			/**
			*/
			bool isKeepLocal(void) const;

			/** If this attribute is set to 'true', the particles are emitted relative to the system
			*/
			void setKeepLocal(bool keepLocal);

			/** Is 'true' when the bounding box is wrapped tight around the particle system or 'false' when the
				bounding box is only increasing and doesn´t shrink when the particle system shrinks.
			*/
			bool hasTightBoundingBox(void) const;

			/** Set mTightBoundingBox.
			*/
			void setTightBoundingBox(bool tightBoundingBox);


			/** Returns the time of a pause (if set)
			*/
			Real getPauseTime (void) const;

			/** Set the pause time. This is used to pause the ParticleSystem for a certain amount of time.
			*/
			void setPauseTime (Ogre::Real pauseTime);

			/** See Particle::setEnabled
	        */
			virtual void setEnabled(bool enabled);

			/** Get the SceneManager with which the ParticleSystem is created
	        */
			Ogre::SceneManager* getSceneManager(void);

			/** Set the SceneManager with which the ParticleSystem is created
	        */
			void setSceneManager(Ogre::SceneManager* sceneManager);

			/** Set the indication to false if you want to update the particle system yourself
	        */
			void setUseController(bool useController);

			/** Returns 'true' if one of externs is of a certain type.
			@remarks
				All techniques are searched.
	        */
			bool hasExternType(const Ogre::String& externType) const;

			/** Get/set a category. See 'mCategory' for a description of its use.
			*/
			const Ogre::String& getCategory(void) const;
			void setCategory(const Ogre::String& category);
	};

}
#endif
