/*
 * Copyright (C) Shroom Studios, Inc - All Rights Reserved
 *
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 *
 * Written by Ahmad Amireh <ahmad@shroom-studios.com>, September 2011
 */

$#include "Combat.h"

namespace Pixy
{

  class Spell;
  class GfxEngine;
  class FxEngine;
  class UIEngine;
  class ScriptEngine;
  class EventManager;
  class NetworkManager;
  class EntityManager;
  class Puppet;
  class Engine;
  class Unit;
	class Combat : public Pixy::GameState, public Pixy::EventListener {
	public:
    typedef std::list<Pixy::Puppet*> puppets_t;

		~Combat( void ){ };

		void enter( void );
		void exit( void );

		void pause( void );
		void resume( void );
		void update( unsigned long lTimeElapsed );

		void keyPressed( const OIS::KeyEvent &e );
		void keyReleased( const OIS::KeyEvent &e );

		bool mouseMoved( const OIS::MouseEvent &e );
		bool mousePressed( const OIS::MouseEvent &e, OIS::MouseButtonID id );
		bool mouseReleased( const OIS::MouseEvent &e, OIS::MouseButtonID id );

		static Combat* getSingletonPtr( void );
		static Combat& getSingleton();

		void registerPuppet(Pixy::Puppet* inPuppet);

    void assignPuppet(Pixy::Puppet* inPuppet);

    Pixy::Combat::puppets_t const& getPuppets();
    Pixy::Puppet* getPuppet();
    Pixy::Puppet* getEnemy(int inUID);
    Pixy::Puppet* getPuppet(int inUID);
    Pixy::Puppet* getActivePuppet();

    Pixy::Unit* getUnit(int inUID);

    void doBattle();

    void unitAttacked(Pixy::Unit*);

    void markForDeath(Pixy::Unit*);

    //~ boost::asio::io_service& getIOService();
    boost::asio::strand& getStrand();

    void __setIsDebugging @ setIsDebugging(bool setting);
    bool __isDebugging @ isDebugging() const;

	};
} // end of namespace
