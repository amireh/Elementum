$#include "GfxEngine.h"

class GfxEngine : public Pixy::Engine, public Pixy::EventListener {

public:

enum QueryFlags {
  ENTITY_MASK = 1<<0,
  TERRAIN_MASK = 1<<1
};

Ogre::Vector3 mPuppetPos[2];
Ogre::Vector3 mPuppetScale, mUnitScale;
Ogre::ColourValue mMTOFontColor;
Ogre::String mMTOFontName;
int mMTOFontSize;
Ogre::String mMTOMaterialName;

Ogre::Vector3 mUnitMargin;
Ogre::Vector3 mPuppetMargin;
Ogre::Vector3 mCameraYawPitchDist;

int mPackSpacing;

virtual ~GfxEngine();
static GfxEngine* getSingletonPtr();
//void setCamera(const Ogre::String& inCameraName);


void setupMovableTextOverlays();

bool attachToScene(Pixy::Renderable* inEntity);
void detachFromScene(Pixy::Renderable* inEntity);
Renderable* getSelected();

//bool moveUnit(Pixy::Unit* inUnit, int inDestination);

Ogre::Camera* getCamera();
OgreBites::SdkCameraMan* getCameraMan();
Ogre::Root* getRoot();
Ogre::SceneManager* getSceneMgr();
Ogre::Viewport* getViewport();

void setupSceneManager();

void setupViewports();

void setupCamera();

void setupTerrain();

void setupLights();

void setupNodes();

void setupWaypoints();

void changeOwnership(Pixy::CUnit* inUnit);

OgreMax::OgreMaxScene* loadScene(std::string inOgreMaxScene);
void unloadScene(OgreMax::OgreMaxScene* inScene);

void enableCompositorEffect(std::string inEffect);

void loadDotScene(std::string inFile, std::string inName);

void createSphere(const std::string& strName, const float r, const int nRings = 16, const int nSegments = 16);
Ogre::Vector2 getScreenCoords(Ogre::MovableObject* inObject);

void setYawPitchDist(Ogre::Vector3 inVec);
void trackNode(Ogre::SceneNode* inNode);

void _setUserAny(Ogre::MovableObject* inObj, void* any);
};
