/*
 * Copyright (C) Shroom Studios, Inc - All Rights Reserved
 *
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 *
 * Written by Ahmad Amireh <ahmad@shroom-studios.com>, September 2011
 */

$#include "Entity.h"
$#include "BaseEntity.h"
$#include "Animable.h"
$#include "Renderable.h"
$#include "Caster.h"

namespace Pixy
{
  class Unit;
  class Entity : public Pixy::BaseEntity//, public Pixy::Caster, public Pixy::Animable, public Pixy::Renderable
  {
    public:

    typedef Pixy::Spell spell_t;
    typedef std::list<spell_t*> spells_t;

    Entity();
    //~ Entity(const Entity& src);
    virtual ~Entity();

    void setup(Ogre::SceneManager*);

    virtual bool live();
		virtual void die();

    /**
     * Overridden from Pixy::Caster
     **/
		virtual void attachSpell(Pixy::BaseSpell* inSpell);
		virtual void attachBuff(Pixy::BaseSpell* inSpell);

		virtual Pixy::Caster* toCaster() const;

    MovableTextOverlay* getText() const;
    void setText(MovableTextOverlay* inT);
    virtual void updateTextOverlay()=0;

    void hide();
    void show();

    //~ void trackEnemyPuppet();
    void trackEnemyUnit(Pixy::Unit* inUnit);

    // --- BaseEntity Interface ---
    /*!
     * @brief
     * Sets the HP of this Entity. If the HP drops below 0, this Entity dies and
     * triggers BaseEntity::die().
     **/
    void setHP(int);
    int getHP() const;

    /*!
     * @brief
     * Sets the entity's race.
     *
     * @note
     * This is assigned by the ResourceManager.
     **/
		void _setRace(int inRace);
		int getRace() const;

		/*!
     * @brief
     * Assigns the owner of this Entity. Every Entity belongs to an owner:
     *  Puppets are owned by themselves, in which case this field points to "this".
     *  Units are owned by Puppets, and their Owner field points to that Puppet.
     *
     * @note
     * Units are assigned their owner ownership once they're alive.
     * See Puppet::attachUnit()
		 **/
		void _setOwner(Entity* inOwner);
		Entity* getOwner() const;

		/*!
		 * @brief Is this Entity dead yet?
     *
     * @note
     * All entities are flagged dead when they're constructed until BaseEntity::alive()
     * is called.
		 **/
		bool isDead() const;
    bool isPuppet() const;
    bool isUnit() const;

    virtual void serialize(Event& inEvt);
    virtual void deserialize(const Event& inEvt);

    // --- Identifiable ---
		/*!
     * @brief
     * The UID is a global identifier for _this_ object and you can be assured
     * that no other object has the same UID throughout the game's instance.
     *
     * This UID is generated by the server.
     *
     * @warning
     * Attempting to re-assign the UID after it's been changed from Unassigned
     * will throw an exception of type "integrity_violation".
     */
		void _setUID(int);
		int getUID() const;

		/*!
     * @brief
     * The name is used for determining the sub-type of an object, for example
     * a Spell or a Unit's name. Names are not unique in the sense that many
     * objects could share the same name but with a different UID.
     *
     * The name is assigned to the object when it's created by its respective
     * factory.
     *
     * @warning
     * Attempting to re-assign an object's name after it's been changed from Unnamed
     * will throw an exception of type "integrity_violation".
     */
    void _setName(std::string const&);
    std::string getName() const;

    // --- Caster Interface ----
    /*!
     * @brief
     * Adds the given BaseSpell object to this Caster's container, and assigns this
     * Caster instance as the BaseSpell's Caster.
     *
     * @warning
     * Ownership of the BaseSpell pointer is transferred to the Caster,
     * which means you can't invalidate throughout the lifetime of this Caster.
     *
     * Furthermore, Casters will _destroy_ all BaseSpell objects they hold upon
     * their destruction.
     */
		virtual void attachSpell(Pixy::BaseSpell* inSpell);
		virtual void attachBuff(Pixy::BaseSpell* inSpell);

    /*!
     * @brief
     * Removes BaseSpell with the given UID from the container. The BaseSpell object
     * will be destroyed if remove is true.
     *
     * @note
     * This method can raise an exception of type invalid_uid if the spell can not be found.
     */
		virtual void detachSpell(int inUID, bool remove=true);
		virtual void detachBuff(int inUID, bool remove=true);

    /*!
     * @brief
     * Returns the BaseSpell with the given UID.
     *
     * @note
     * This method can raise an exception of type invalid_uid if the spell can not be found.
     */
    virtual Pixy::Entity::spell_t* getSpell(int inUID);
    virtual Pixy::Entity::spell_t* getBuff(int inUID);

    //! @brief Returns the current BaseSpell objects the Caster has
		virtual SpellList const& getSpells();
		virtual SpellList const& getBuffs();

    //! @brief Convenience method for returning the number of Spells this Caster has
		virtual int nrSpells();
		virtual int nrBuffs();

    virtual bool hasBuff(int inUID);
    virtual bool hasBuffWithName(std::string);

    // --- Animable ---
    void registerAnimationState(Pixy::Animable::AnimID inId, std::string inState, bool doLoop = true);

    void step(unsigned long deltaTime);

    float animateLive();
    float animateDie();
    float animateIdle();
    float animateWalk();
    float animateRun();
    float animateAttack();
    float animateHit();
    float animateRest();
    float animateGetUp();

    // if override is true, then the given animation will instantly
    // play and override any currently playing one (even mini ones)
    //
    // note: only applies to Mini animations
    float _animate(Pixy::Animable::AnimID inId, bool override = false);

    static void setAnimFadeSpeed(float inSpeed);
    static float getAnimFadeSpeed();

    // --- Renderable ---
    void attachSceneNode(Ogre::SceneNode* inNode);
		Ogre::SceneNode* getSceneNode() const;

		void attachSceneObject(Ogre::Entity* inObject);
		Ogre::Entity* getSceneObject() const;

    Ogre::Entity* attachExtension(std::string inMesh, std::string inBone);

    std::string getMesh() const;
    std::string getMaterial() const;
    void setMaterial(std::string);
    void setMesh(std::string);

  }; // end of class Entity
} // end of Pixy namespace
